<?xml version="1.0"?>
<doc>
    <assembly>
        "Carto"
    </assembly>
    <members>
        <member name="M:PIE.Carto.TransparentPreFilter.get_FilterValues">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.get_IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.get_FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.get_Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.get_Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelElementFillSymbol(PIE.Display.IFillSymbol)">
            <summary>
设置选中面元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelElementFillSymbol">
            <summary>
获取选中面元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelElementLineSymbol(PIE.Display.ILineSymbol)">
            <summary>
设置选中线元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelElementLineSymbol">
            <summary>
获取选中线元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelElementMarkerSymbol(PIE.Display.IMarkerSymbol)">
            <summary>
设置选中点元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelElementMarkerSymbol">
            <summary>
获取选中点元素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelFeatureFillSymbol(PIE.Display.IFillSymbol)">
            <summary>
设置选中面要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelFeatureFillSymbol">
            <summary>
获取选中面要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelFeatureLineSymbol(PIE.Display.ILineSymbol)">
            <summary>
设置选中线要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelFeatureLineSymbol">
            <summary>
获取选中线要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.set_SelFeatureMarkerSymbol(PIE.Display.IMarkerSymbol)">
            <summary>
设置选中点要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_SelFeatureMarkerSymbol">
            <summary>
获取选中点要素符号
</summary>
        </member>
        <member name="M:PIE.Carto.SelectionEnvironment.get_Instance">
            <summary>
获取SelectionEnvironment对象
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelElementFillSymbol">
            <summary>
获取或设置选中面元素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelElementLineSymbol">
            <summary>
获取或设置选中线元素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelElementMarkerSymbol">
            <summary>
获取或设置选中点元素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelFeatureFillSymbol">
            <summary>
获取或设置选中面要素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelFeatureLineSymbol">
            <summary>
获取或设置选中线要素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.SelFeatureMarkerSymbol">
            <summary>
获取或设置选中点要素符号
</summary>
        </member>
        <member name="P:PIE.Carto.SelectionEnvironment.Instance">
            <summary>
获取SelectionEnvironment对象
</summary>
        </member>
        <member name="T:PIE.Carto.SelectionEnvironment">
            <summary>
SelectionEnvironment对象类
</summary>
        </member>
        <member name="M:SysCarto.SelectionEnviroment.op_Assign(SysCarto.SelectionEnviroment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数  重载等号"="操作符

</member>
        <member name="M:SysCarto.SelectionEnviroment.#ctor(SysCarto.SelectionEnviroment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数  拷贝构造

</member>
        <member name="M:SysCarto.SelectionEnviroment.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SelectionEnviroment.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrElemFillSymbol">
@brief 元素面符号

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrElemLineSymbol">
@brief 元素线符号

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrElemMarkerSymbol">
@brief 元素点标记符号

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrFeatureFillSymbol">
@brief 要素面符号

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrFeatureLineSymbol">
@brief 要素线符号

</member>
        <member name="F:SysCarto.SelectionEnviroment.m_ptrFeatureMarkerSymbol">
@brief 要素点标记符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelElementFillSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中元素面符号
@param [in] ptrSymbol 面符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelElementFillSymbol">
@brief 获取选中元素面符号
@return  SysDisplay::FillSymbolPtr  面符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelElementLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中元素线符号
@param [in] ptrSymbol 线符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelElementLineSymbol">
@brief 获取选中元素线符号
@return  SysDisplay::LineSymbolPtr  线符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelElementMarkerSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中元素点标记符号
@param [in] ptrSymbol 点标记符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelElementMarkerSymbol">
@brief 获取选中元素点标记符号
@return  SysDisplay::MarkerSymbolPtr  点标记符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelFeatureFillSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中要素面符号
@param [in] ptrSymbol 填充面符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelFeatureFillSymbol">
@brief 获取选中要素面符号
@return  SysDisplay::FillSymbolPtr  填充面符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelFeatureLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中要素线符号
@param [in] ptrSymbol 线符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelFeatureLineSymbol">
@brief 获取选中要素线符号
@return  SysDisplay::LineSymbolPtr  线符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.SetSelFeatureMarkerSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置选中要素标记符号
@param [in] ptrSymbol 标记符号
@return  void

</member>
        <member name="M:SysCarto.SelectionEnviroment.GetSelFeatureMarkerSymbol">
@brief 获取选中要素标记符号
@return  SysDisplay::MarkerSymbolPtr  标记符号

</member>
        <member name="M:SysCarto.SelectionEnviroment.Instance">
@brief  获得单例
@return 选中环境对象指针

</member>
        <member name="T:SysCarto.SelectionEnviroment">
@class SelectionEnviroment
@brief 选中环境

</member>
        <member name="M:PIE.Carto.MarkerNorthArrow.set_Size(System.Double)">
            <summary>
设置大小
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.get_Size">
            <summary>
获取大小
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.set_Color(System.Drawing.Color)">
            <summary>
设置颜色
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.get_Color">
            <summary>
获取颜色
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.set_CalibrationAngle(System.Double)">
            <summary>
Calibration angle.Rotation is modified by this angle.
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.get_CalibrationAngle">
            <summary>
Calibration angle.Rotation is modified by this angle.
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.set_MarkerSymbol(PIE.Display.IMarkerSymbol)">
            <summary>
获取或设置符号
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.get_MarkerSymbol">
            <summary>
获取或设置符号
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementsSelectionChanged(PIE.Carto.OnElementsSelectionChangedEventHandler)">
            <summary>
选择要素变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementsReordered(PIE.Carto.OnElementsReorderedEventHandler)">
            <summary>
多要素排序事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnAllElementsDeleted(PIE.Carto.OnAllElementsDeletedEventHandler)">
            <summary>
所有要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementsDeleted(PIE.Carto.OnElementsDeletedEventHandler)">
            <summary>
多要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementsAdded(PIE.Carto.OnElementsAddedEventHandler)">
            <summary>
多要素更新事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementUpdated(PIE.Carto.OnElementUpdatedEventHandler)">
            <summary>
要素更新事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementDeleted(PIE.Carto.OnElementDeletedEventHandler)">
            <summary>
要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnElementAdded(PIE.Carto.OnElementAddedEventHandler)">
            <summary>
要素添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnMapPreLoadFinished(PIE.Carto.OnMapPreLoadFinishedEventHandler)">
            <summary>
地图预加载完成事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnCurrentLayerChanged(PIE.Carto.OnCurrentLayerChangedEventHandler)">
            <summary>
当前图层变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeforeCurrentLayerChanging(PIE.Carto.OnBeforeCurrentLayerChangingEventHandler)">
            <summary>
当前图层变化前事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnAfterDraw(PIE.Carto.OnAfterDrawEventHandler)">
            <summary>
绘图后事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeginDraw(PIE.Carto.OnBeginDrawEventHandler)">
            <summary>
绘图前事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnViewRefreshed(PIE.Carto.OnViewRefreshedEventHandler)">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnSpatialReferenceChanged(PIE.Carto.OnSpatialReferenceChangedEventHandler)">
            <summary>
空间参考信息变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnFeaturesSelectionChanged(PIE.Carto.OnFeaturesSelectionChangedEventHandler)">
            <summary>
要素选择变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnContentsCleared(PIE.Carto.OnContentsClearedEventHandler)">
            <summary>
图层内容清除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnContentsChanged(PIE.Carto.OnContentsChangedEventHandler)">
            <summary>
图层内容变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnFocusMapChanged(PIE.Carto.OnFocusMapChangedEventHandler)">
            <summary>
图层变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnLayersDeleted(PIE.Carto.OnLayersDeletedEventHandler)">
            <summary>
多图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnLayersAdded(PIE.Carto.OnLayersAddedEventHandler)">
            <summary>
多图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnLayerReordered(PIE.Carto.OnLayerReorderedEventHandler)">
            <summary>
图层排序事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnLayerDeleted(PIE.Carto.OnLayerDeletedEventHandler)">
            <summary>
图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnLayerAdded(PIE.Carto.OnLayerAddedEventHandler)">
            <summary>
图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeforeLayersDeleted(PIE.Carto.OnBeforeLayersDeletedEventHandler)">
            <summary>
多图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeforeLayersAdded(PIE.Carto.OnBeforeLayersAddedEventHandler)">
            <summary>
多图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeforeLayerDeleted(PIE.Carto.OnBeforeLayerDeletedEventHandler)">
            <summary>
图层移除前事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.add_OnBeforeLayerAdded(PIE.Carto.OnBeforeLayerAddedEventHandler)">
            <summary>
图层添加前事件
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.Map.get_ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_SelectionFeatureCount">
            <summary>
选中要素个数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_TrackerCancel(PIE.SystemUI.ITrackerCancel)">
            <summary>
获得TrackerCancel对象
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_IsShowSelection(System.Boolean)">
            <summary>
是否显示选择
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_ExportFrame">
            <summary>
获取输出图框
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_ExtentStack">
            <summary>
获得范围栈
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_FullExtent(PIE.Geometry.IEnvelope)">
            <summary>
地图全图范围
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_Extent(PIE.Geometry.IEnvelope)">
            <summary>
地图视图范围
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_IsActived">
            <summary>
是否激活状体
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_FocusMap(PIE.Carto.IMap)">
            <summary>
地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_DisplayTransformation">
            <summary>
ScreenDisplay
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_GraphicsContainer">
            <summary>
标绘图层-默认
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_DefaultTempLayer">
            <summary>
临时图层
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_CurrentLayer(PIE.Carto.ILayer)">
            <summary>
当前地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_LayerCount">
            <summary>
地图图层数目
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_ClipGeometry(PIE.Geometry.IGeometry)">
            <summary>
地图ClipGeometry
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_ReferenceScale(System.Double)">
            <summary>
地图ReferenceScale
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_MapScale(System.Double)">
            <summary>
地图比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_MapUnits(&lt;unknown type&gt;)">
            <summary>
地图单位
</summary>
        </member>
        <member name="M:PIE.Carto.Map.set_SpatialReference(PIE.Geometry.ISpatialReference)">
            <summary>
坐标参考
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_Name">
            <summary>
地图名称
</summary>
        </member>
        <member name="M:PIE.Carto.Map.get_ID">
            <summary>
地图ID
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.set_Labels(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置标签
</summary>
            <param name="labels">标签</param>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.get_Labels">
            <summary>
获取标签
</summary>
            <returns>标签</returns>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.set_UniqueValues(PIE.Carto.IUniqueValues)">
            <summary>
设置UniqueValues
</summary>
            <param name="uniqueValues">UniqueValues</param>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.get_UniqueValues">
            <summary>
获取UniqueValues
</summary>
            <returns>UniqueValues</returns>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.set_ClassColors(System.Collections.Generic.IList`1{System.Drawing.Color})">
            <summary>
设置ClassColors
</summary>
            <param name="listColor">ClassColors</param>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.get_ClassColors">
            <summary>
获取ClassColors
</summary>
            <returns>ClassColors</returns>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.get_ColorRamp">
            <summary>
获取ColorRamp
</summary>
            <returns>ColorRamp</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.set_Expanded(System.Boolean)">
            <summary>
设置是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.get_Expanded">
            <summary>
获取是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.get_LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="F:PIE.Carto.MapDocument.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.MapDocument.#ctor(SysUtility._ptr_t&lt;SysCarto.MapDocument&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="F:PIE.Carto.MapDocument.m_PageLayout">
            <summary>
PageLayout
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnDocumentOpened">
            <summary>
打开文档前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnBeforeDocumentOpened">
            <summary>
打开文档前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnMapsChanged">
            <summary>
MapsChanged变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnDocumentClosed">
            <summary>
文档关闭后触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnBeforeDocumentClosed">
            <summary>
文档关闭前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnDocumentCreated">
            <summary>
文档创建完成事件
</summary>
        </member>
        <member name="E:PIE.Carto.MapDocument.OnActiveViewChanged">
            <summary>
ActiveViewChanged变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.MapDocument.ReplaceContents(PIE.Carto.IPmdContents)">
            <summary>
代替Contents
</summary>
            <param name="contents">contents</param>
            <summary>
代替Contents
</summary>
            <param name="contents">contents</param>
        </member>
        <member name="M:PIE.Carto.MapDocument.IsUsesRelativePaths">
            <summary>
是否使用相对路径
</summary>
            <returns>是否成功</returns>
            <summary>
是否使用相对路径
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.Thumbnail">
            <summary>
文档缩略图
</summary>
            <returns>缩略图</returns>
            <summary>
文档缩略图
</summary>
            <returns>缩略图</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetOperationStack">
            <summary>
获取操作堆栈
</summary>
            <returns>堆栈</returns>
            <summary>
获取操作堆栈
</summary>
            <returns>堆栈</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetPageLayout">
            <summary>
获取制图对象
</summary>
            <returns>制图对象</returns>
            <summary>
获取制图对象
</summary>
            <returns>制图对象</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetMapCount">
            <summary>
获取地图数量
</summary>
            <returns>地图数量</returns>
            <summary>
获取地图数量
</summary>
            <returns>地图数量</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetMap(System.Int32)">
            <summary>
根据索引获取地图
</summary>
            <param name="index">索引号</param>
            <returns>地图对象</returns>
            <summary>
根据索引获取地图
</summary>
            <param name="index">索引号</param>
            <returns>地图对象</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetMaps">
            <summary>
获取地图集合
</summary>
            <returns>返回地图集合</returns>
            <summary>
获取地图集合
</summary>
            <returns>返回地图集合</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetActiveView">
            <summary>
获取视图
</summary>
            <returns>视图对象</returns>
            <summary>
获取视图
</summary>
            <returns>视图对象</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.Close">
            <summary>
关闭文档
</summary>
            <returns>是否成功</returns>
            <summary>
关闭文档
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
另存文档
</summary>
            <param name="fileName">文档路径</param>
            <param name="fileName">是否使用相对路径</param>
            <param name="fileName">是否创建缩略图</param>
            <returns>是否成功</returns>
            <summary>
另存文档
</summary>
            <param name="fileName">文档路径</param>
            <param name="fileName">是否使用相对路径</param>
            <param name="fileName">是否创建缩略图</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.Save(System.Boolean,System.Boolean)">
            <summary>
保存文档
</summary>
            <param name="bUseRelativePaths">是否使用相对路径 true</param>
            <param name="bUseRelativePaths">是否创建缩略图 true</param>
            <returns>是否成功</returns>
            <summary>
保存文档
</summary>
            <param name="bUseRelativePaths">是否使用相对路径 true</param>
            <param name="bUseRelativePaths">是否创建缩略图 true</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.Open(System.String)">
            <summary>
打开文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>是否成功</returns>
            <summary>
打开文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.New(System.String)">
            <summary>
新建文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>返回值说明</returns>
            <summary>
新建文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.GetDocumentFilename">
            <summary>
获取文档名称
</summary>
            <returns>文档路径</returns>
            <summary>
获取文档名称
</summary>
            <returns>文档路径</returns>
        </member>
        <member name="M:PIE.Carto.MapDocument.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapDocument.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapDocument.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MapDocument">
            <summary>
MapDocument类
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnDocumentOpened">
            <summary>
打开文档前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnBeforeDocumentOpened">
            <summary>
打开文档前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnMapsChanged">
            <summary>
MapsChanged变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnDocumentClosed">
            <summary>
文档关闭后触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnBeforeDocumentClosed">
            <summary>
文档关闭前触发事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnDocumentCreated">
            <summary>
文档创建完成事件
</summary>
        </member>
        <member name="E:PIE.Carto.IMapDocumentEvents.OnActiveViewChanged">
            <summary>
ActiveViewChanged变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.IMapDocumentEvents">
            <summary>
IMapDocumentEvents接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnDocumentOpenedEventHandler">
            <summary>
打开文档后触发事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnBeforeDocumentOpenedEventHandler">
            <summary>
打开文档前触发事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnMapsChangedEventHandler">
            <summary>
MapsChanged变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnDocumentClosedEventHandler">
            <summary>
文档关闭后触发事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnBeforeDocumentClosedEventHandler">
            <summary>
文档关闭前触发事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnDocumentCreatedEventHandler">
            <summary>
文档创建完成事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnActiveViewChangedEventHandler">
            <summary>
ActiveViewChanged变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.IMapDocument.ReplaceContents(PIE.Carto.IPmdContents)">
            <summary>
代替Contents
</summary>
            <param name="contents">contents</param>
        </member>
        <member name="M:PIE.Carto.IMapDocument.IsUsesRelativePaths">
            <summary>
是否使用相对路径
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.Thumbnail">
            <summary>
文档缩略图
</summary>
            <returns>缩略图</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetOperationStack">
            <summary>
获取操作堆栈
</summary>
            <returns>堆栈</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetPageLayout">
            <summary>
获取制图对象
</summary>
            <returns>制图对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetMapCount">
            <summary>
获取地图数量
</summary>
            <returns>地图数量</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetMap(System.Int32)">
            <summary>
根据索引获取地图
</summary>
            <param name="index">索引号</param>
            <returns>地图对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetMaps">
            <summary>
获取地图集合
</summary>
            <returns>返回地图集合</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetActiveView">
            <summary>
获取视图
</summary>
            <returns>视图对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.Close">
            <summary>
关闭文档
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.SaveAs(System.String,System.Boolean,System.Boolean)">
            <summary>
另存文档
</summary>
            <param name="fileName">文档路径</param>
            <param name="fileName">是否使用相对路径</param>
            <param name="fileName">是否创建缩略图</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.Save(System.Boolean,System.Boolean)">
            <summary>
保存文档
</summary>
            <param name="bUseRelativePaths">是否使用相对路径 true</param>
            <param name="bUseRelativePaths">是否创建缩略图 true</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.Open(System.String)">
            <summary>
打开文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.New(System.String)">
            <summary>
新建文档
</summary>
            <param name="fileName">文档路径</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IMapDocument.GetDocumentFilename">
            <summary>
获取文档名称
</summary>
            <returns>文档路径</returns>
        </member>
        <member name="T:PIE.Carto.IMapDocument">
            <summary>
IMapDocument接口
</summary>
        </member>
        <member name="D:SysCarto.MapDocumentPtr">
@brief  地图文档对象  智能指针

</member>
        <member name="M:SysCarto.MapDocument.ConstructLayer_DomElement(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,QDomElement*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构建图层到Dom文档元素中
@param [in] fileName  文件名称
@param [in] bUseRelativePaths  是否使用相对路径
@param [in] layerElement   图层元素
@return  SysCarto::LayerPtr 图层

</member>
        <member name="M:SysCarto.MapDocument.ConstructDomElement_Layer(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,SysUtility._ptr_t&lt;SysCarto.Layer&gt;,QDomDocument*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构建Dom文档元素到图层中
@param [in] fileName  文件名称
@param [in] bUseRelativePaths  是否使用相对路径
@param [in] ptrLayer  图层
@param [in out] domDocument    dom文档
@param [in out] layerElement   图层元素
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.SavePmdFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
@brief 保存pmd文件
@param [in] fileName  文件名称
@param [in] bUseRelativePaths  是否使用相对路径
@param [in] bCreateThumnbail   是否创建缩略图
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.ReadPmdFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 读取pmd文件
@param [in] fileName  文件名称
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.InitNewMaps">
@brief 初始化新地图
@return  void

</member>
        <member name="M:SysCarto.MapDocument.LoadGraphicsElementFromXML(QDomElement,SysCarto.IGraphicsContainer*)">
@brief 从XML格式文档加载为制图
@param [in] parentNode  父节点
@param [in] pGraphicContainer  制图容器
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.LoadPageInfoFromXML(SysUtility._ptr_t&lt;SysCarto.Page&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 从XML格式文档加载为页面
@param [in] ptrPage 页面对象
@param [in] pageInfoDomElement  元素节点
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.SavePageInfoToXML(SysUtility._ptr_t&lt;SysCarto.Page&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomDocument*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 保存页面为XML格式文档
@param [in] ptrPage 页面对象
@param [in] domDocument  dom文档
@param [in] pageInfoDomElement  元素节点
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.LoadPageLayoutFromXML(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 从XML格式文档加载为页面布局
@param [in] listMap 地图集合
@param [in] rootNode  元素根节点
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.SavePageLayoutToXML(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomDocument*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 保存页面布局为XML格式文档
@param [in] strFileName 文档名称
@param [in] domDocument  dom文档
@param [in] rootNode  元素根节点
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.LoadMapsFromXML(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 从XML格式文档加载为地图
@param [in] listMap 地图集合
@param [in] strFileName 文档名称
@param [in] rootNode  元素根节点
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.SaveMapsToXML(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,QDomDocument*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QDomElement)">
@brief 保存地图为XML格式文档
@param [in] strFileName 文档名称
@param [in] bUseRelativePaths 是否使用相对路径
@param [in] domDocument  dom文档
@param [in] rootNode  元素根节点
@return  bool 是否成功

</member>
        <member name="F:SysCarto.MapDocument.m_ptrPageLayout">
@brief  地图集合

@brief  页面布局

</member>
        <member name="F:SysCarto.MapDocument.m_bUsesRelativePaths">
@brief  是否使用相对路径

</member>
        <member name="F:SysCarto.MapDocument.m_strThumbnailFile">
@brief  文档缩略图

</member>
        <member name="F:SysCarto.MapDocument.m_strDoc">
@brief  文档

</member>
        <member name="M:SysCarto.MapDocument.ReplaceContents(SysUtility._ptr_t&lt;SysCarto.IPmdContents&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 代替内容
@param [in] ptrContents 内容
@return  void

</member>
        <member name="M:SysCarto.MapDocument.IsUsesRelativePaths">
@brief 是否使用相对路径
@return  bool 是否为相对路径 

</member>
        <member name="M:SysCarto.MapDocument.Thumbnail">
@brief 文档缩略图
@return QImage 缩略图

</member>
        <member name="M:SysCarto.MapDocument.GetOperationStack">
@brief 获取操作堆栈
@return  SysUI::IOperationStackPtr  操作堆栈

</member>
        <member name="M:SysCarto.MapDocument.GetPageLayout">
@brief 获取制图对象
@return PageLayoutPtr 制图对象

</member>
        <member name="M:SysCarto.MapDocument.GetMapCount">
@brief 获取地图数量
@return  int 地图数量

</member>
        <member name="M:SysCarto.MapDocument.GetMap(System.Int32)">
@brief 根据索引获取地图
@param [in] index 索引号
@return  MapPtr  地图对象

</member>
        <member name="M:SysCarto.MapDocument.GetMaps(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取地图集合
@param [in] listMap 地图集合
@return void 地图集合

</member>
        <member name="M:SysCarto.MapDocument.GetActiveView">
@brief 获取视图
@return  ActiveViewPtr 视图对象

</member>
        <member name="M:SysCarto.MapDocument.Close">
@brief 关闭文档
@return bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.SaveAs(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
@brief 另存文档
@param [in] fileName 文档路径
@param [in] bUseRelativePaths 是否使用相对路径
@param [in] bCreateThumnbail 是否创建缩略图
@return bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.Save(System.Boolean,System.Boolean)">
@brief 保存文档
@param [in] bUseRelativePaths 是否使用相对路径
@param [in] bCreateThumnbail  是否创建缩略图
@return bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 打开文档
@param [in] fileName 文档路径
@return bool 是否成功

</member>
        <member name="M:SysCarto.MapDocument.New(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 新建文档
@param [in] fileName 文档路径
@return  bool  是否成功

</member>
        <member name="M:SysCarto.MapDocument.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysCarto.MapDocument.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MapDocument">
@class MapDocument
	* @brief 地图文档对象

</member>
        <member name="D:SysCarto.IPmdContentsPtr">
@brief  pmd文档内容 智能指针对象

</member>
        <member name="F:SysCarto.IPmdContents.m_ptrCurrentTool">
@brief 当前工具

</member>
        <member name="F:SysCarto.IPmdContents.m_customerProperty">
@brief 自定义属性

</member>
        <member name="M:SysCarto.IPmdContents.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IPmdContents.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IPmdContents.SetTrackerCancel(SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置取消追踪
@param [in] ptrTrackerCancel 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.IPmdContents.GetTrackerCancel">
@brief 获得取消追踪
@return SysUI::TrackerCancelPtr 取消追踪对象

</member>
        <member name="M:SysCarto.IPmdContents.SetCurrentTool(SysUtility._ptr_t&lt;SysUI.ITool&gt;)">
@brief 设置当前工具
@param [in] ptrTool 当前工具对象
@return void 

</member>
        <member name="M:SysCarto.IPmdContents.GetCurrentTool">
@brief 获得当前工具
@return SysUI::IToolPtr 当前工具对象

</member>
        <member name="M:SysCarto.IPmdContents.SetCustomerProperty(boost.any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置自定义属性
@param [in] prop 自定义属性
@return  void

</member>
        <member name="M:SysCarto.IPmdContents.GetMaps(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取地图集合
@return listMap 地图集合对象

</member>
        <member name="M:SysCarto.IPmdContents.GetPageLayout">
@brief  获取制图对象
@return PageLayoutPtr 制图对象

</member>
        <member name="M:SysCarto.IPmdContents.GetMap">
@brief 获取焦点地图对象
@return MapPtr 焦点地图对象

</member>
        <member name="M:SysCarto.IPmdContents.GetActiveView">
@brief  获取视图对象
@return ActiveViewPtr 视图对象

</member>
        <member name="T:SysCarto.IPmdContents">
@class IPmdContents
@brief  pmd文档内容

</member>
        <member name="D:SysUI.IToolPtr">
@brief 工具插件智能指针

</member>
        <member name="M:SysUI.ITool.OnWheelEvent(QWheelEvent*)">
@brief 鼠标滚轮操作
@param[in] event 鼠标事件参数
@return 是否响应

</member>
        <member name="M:SysUI.ITool.OnLeaveEvent(QEvent*)">
@brief 焦点离开操作
@param [in] event 事件参数
@return

</member>
        <member name="M:SysUI.ITool.OnEnterEvent(QEvent*)">
@brief 焦点进入操作
@param [in] event 事件参数

</member>
        <member name="M:SysUI.ITool.JustMouseMove(QMouseEvent*)">
@brief 鼠标移动操作
@param[in] event 鼠标事件参数
@remark 无鼠标按键时才触发

</member>
        <member name="M:SysUI.ITool.OnMouseUp(QMouseEvent*)">
@brief 鼠标抬起操作
@param[in] event 鼠标事件参数

</member>
        <member name="M:SysUI.ITool.OnMouseMove(QMouseEvent*)">
@brief 鼠标移动操作
@param[in] event 鼠标事件参数
@remark 需要有按键操作

</member>
        <member name="M:SysUI.ITool.OnMouseDown(QMouseEvent*)">
@brief 鼠标按下操作
@param[in] event 鼠标事件参数

</member>
        <member name="M:SysUI.ITool.OnKeyUp(QKeyEvent*)">
@brief 键盘按键抬起操作
@param[in] event 键盘事件参数

</member>
        <member name="M:SysUI.ITool.OnKeyDown(QKeyEvent*)">
@brief 键盘按键按下操作
@param[in] event 键盘事件参数

</member>
        <member name="M:SysUI.ITool.OnDblClick(QMouseEvent*)">
@brief 鼠标双击操作
@param[in] event 鼠标事件参数

</member>
        <member name="M:SysUI.ITool.OnContextMenu(QContextMenuEvent*)">
@brief 菜单操作
@param[in] event 菜单事件参数
@return  成功 true, 失败 false

</member>
        <member name="M:SysUI.ITool.Deactivate">
@brief 取消激活
@return  成功 true,失败 false

</member>
        <member name="M:SysUI.ITool.Activate">
@brief 激活工具
@return 成功 true, 失败 false

</member>
        <member name="M:SysUI.ITool.GetCursor">
@brief 获取光标
@return 光标对象

</member>
        <member name="T:SysUI.ITool">
@class ITool
	* @brief 工具插件接口

</member>
        <member name="M:SysUI.EnvironmentSetting.op_Assign(SysUI.EnvironmentSetting!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 重载等号"="操作符   可以使用=初始化对象

</member>
        <member name="M:SysUI.EnvironmentSetting.#ctor(SysUI.EnvironmentSetting!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 拷贝构造函数

</member>
        <member name="M:SysUI.EnvironmentSetting.Dispose">
@brief 析构函数

</member>
        <member name="M:SysUI.EnvironmentSetting.#ctor">
@brief 构造函数

</member>
        <member name="F:SysUI.EnvironmentSetting.m_iMaxFeaturesSelectionCount">
@brief 选中最大要素数量

</member>
        <member name="F:SysUI.EnvironmentSetting.m_pSettings">
@brief 设置对象

</member>
        <member name="F:SysUI.EnvironmentSetting.m_TempProperty">
@brief 临时属性集合

</member>
        <member name="F:SysUI.EnvironmentSetting.m_strCurrentWorkDir">
@brief 当前工作目录

</member>
        <member name="M:SysUI.EnvironmentSetting.SetCurrentWorkDir(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置当前工作目录
@param [in] str 当前工作目录
@return

</member>
        <member name="M:SysUI.EnvironmentSetting.SetMaxFeaturesSelectionCount(System.Int32)">
@brief 设置要素最大选择数
@param [in] int 要素最大选择数
@return

</member>
        <member name="M:SysUI.EnvironmentSetting.GetMaxFeaturesSelectionCount">
@brief 获取要素最大选择数
@return 要素最大选择数

</member>
        <member name="M:SysUI.EnvironmentSetting.GetCurrentWorkDir">
@brief 获取当前工作目录
@return 当前工作目录

</member>
        <member name="M:SysUI.EnvironmentSetting.GetCursorResDir">
@brief 获取光标资源文件夹路径
@return 光标资源文件夹路径

</member>
        <member name="M:SysUI.EnvironmentSetting.GetResourceDir">
@brief 获取资源文件夹路径
@return 资源文件夹路径

</member>
        <member name="M:SysUI.EnvironmentSetting.GetStyleDir">
@brief 获取配置文件夹路径
@return 配置文件夹路径

</member>
        <member name="M:SysUI.EnvironmentSetting.GetDataDir">
@brief 获取数据文件夹路径
@return 数据文件夹路径

</member>
        <member name="M:SysUI.EnvironmentSetting.GetConfigDir">
@brief 获取配置文件夹路径
@return 配置文件夹路径

</member>
        <member name="M:SysUI.EnvironmentSetting.GetAppBinDir">
@brief 获取应用程序根路径
@return 应用程序根路径

</member>
        <member name="M:SysUI.EnvironmentSetting.Instance">
@brief  获得单例
@return 环境设置对象指针

</member>
        <member name="T:SysUI.EnvironmentSetting">
@brief 环境设置类

</member>
        <member name="F:SysCarto.MapDocumentEvents.DocumentOpened">
@brief  文档打开信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.BeforeDocumentOpened">
@brief  文档打开之前信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.MapsChanged">
@brief  地图改变信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.DocumentClosed">
@brief  文档关闭信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.BeforeDocumentClosed">
@brief  文档关闭之前信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.DocumentCreated">
@brief  文档创建信号

</member>
        <member name="F:SysCarto.MapDocumentEvents.ActiveViewChanged">
@brief  激活视图改变信号

</member>
        <member name="T:SysCarto.MapDocumentEvents">
@class  MapDocumentEvents
@brief  地图文档对象事件

</member>
        <member name="D:SysCarto.MapsPtr">
@brief  地图集 智能指针对象

</member>
        <member name="F:SysCarto.Maps.m_mapIndex">
@brief  地图索引

</member>
        <member name="F:SysCarto.Maps.m_listMaps">
@brief  地图集合

</member>
        <member name="M:SysCarto.Maps.Contains(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含指定地图对象
@param [in] ptrMap 指定地图对象
@return bool true表示已包含；false表示不包含

</member>
        <member name="M:SysCarto.Maps.Count">
@brief  获取集合中地图数量
@return int 地图数量

</member>
        <member name="M:SysCarto.Maps.RemoveAll">
@brief 移除所有地图
@return  void

</member>
        <member name="M:SysCarto.Maps.RemoveAt(System.Int32)">
@brief 从集合中移除指定索引号的地图
@param [in] index 索引编号
@return void

</member>
        <member name="M:SysCarto.Maps.Remove(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从集合中移除地图
@param [in] ptrMap 地图对象
@return void

</member>
        <member name="M:SysCarto.Maps.Move(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 移动地图到指定位置
@param [in] ptrMap  需要移动的地图对象
@param [in] toIndex 需要移动到的索引编号
@return bool 是否成功

</member>
        <member name="M:SysCarto.Maps.IndexOf(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据地图对象获取其在集合中的索引号
@param [in] ptrMap 地图对象
@return int 索引号

</member>
        <member name="M:SysCarto.Maps.GetItem(System.Int32)">
@brief 根据索引获取地图对象
@param [in] index 索引编号
@return MapPtr 地图对象

</member>
        <member name="M:SysCarto.Maps.Create">
@brief   创建一个新地图
@return  MapPtr 地图

</member>
        <member name="M:SysCarto.Maps.Add(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加地图到集合
@param [in] ptrMap 地图对象
@return void

</member>
        <member name="M:SysCarto.Maps.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Maps.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.Maps">
@class Maps
@brief  地图集

</member>
        <member name="M:QDomNode.namedItem(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Shortcut to avoid dealing with QDomNodeList
all the time.

</member>
        <member name="M:PIE.Carto.TransparentAfterFilter.set_FilterValue(System.Drawing.Color)">
            <summary>
设置过滤的颜色
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.get_FilterValue">
            <summary>
获取过滤的颜色
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.get_IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.get_FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.get_Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.get_Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.get_AnnoProperties">
            <summary>
获取或者设置图层注记属性
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.get_DisplayAnnotation">
            <summary>
获取或设置图层是否显示注记
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.get_Render">
            <summary>
获取或者设置矢量图层渲染
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.get_Selectable">
            <summary>
获取或设置图层是否选中
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.set_DisplayField(System.String)">
            <summary>
获取或设置图层显示字段
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.get_FeatureClass">
            <summary>
获取或者设置矢量数据集
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.set_Width(System.Double)">
            <summary>
设置箭头宽度
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.get_Width">
            <summary>
获取箭头宽度
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_SortClassesAscending(System.Boolean)">
            <summary>
设置分级是否升序排列
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_SortClassesAscending">
            <summary>
获取分级是否升序排列
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_NormField(System.String)">
            <summary>
设置归一化字段
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_NormField">
            <summary>
获取归一化字段
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_MinimumBreak">
            <summary>
获取或设置最小分级值
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_MinimumBreak(System.Double)">
            <summary>
获取或设置最小分级值
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_Field(System.String)">
            <summary>
设置分级字段
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_Field">
            <summary>
获取分级字段
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_ClassCount(System.Int32)">
            <summary>
设置分级数量
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_ClassCount">
            <summary>
获取或设置分级数量
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.set_BackgroundSymbol(PIE.Display.IFillSymbol)">
            <summary>
设置背景符号
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.get_BackgroundSymbol">
            <summary>
获取背景符号
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.get_Layers">
            <summary>
获取多图层
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.set_Dataset(PIE.DataSource.IMultiDataset)">
            <summary>
设置数据集
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.get_Dataset">
            <summary>
获取数据集
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.set_Expanded(System.Boolean)">
            <summary>
设置是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.get_Expanded">
            <summary>
获取是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.get_LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureRender.set_Transparency(System.Int32)">
            <summary>
设置透明度百分比（0-100）
</summary>
            <param name="transparency">透明度百分比（0-100）</param>
        </member>
        <member name="M:PIE.Carto.FeatureRender.get_Transparency">
            <summary>
获得透明度百分比（0-100）
</summary>
            <returns>透明度百分比（0-100）</returns>
        </member>
        <member name="M:PIE.Carto.FeatureRender.get_Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_ExportFileName(System.String)">
            <summary>
设置导出路径
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_ExportFileName">
            <summary>
获取导出路径
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_TrackerCancel(PIE.SystemUI.ITrackerCancel)">
            <summary>
设置ITrackerCancel
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_TrackerCancel">
            <summary>
获取ITrackerCancel
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_BackgroundColor(System.Drawing.Color)">
            <summary>
设置导出背景色
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_BackgroundColor">
            <summary>
获取导出背景色
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_Height(System.Int32)">
            <summary>
设置导出高度
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_Height">
            <summary>
获取导出高度
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_Width(System.Int32)">
            <summary>
设置导出宽度
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_Width">
            <summary>
获取导出宽度
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.set_DPI(System.Double)">
            <summary>
设置导出DPI
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.get_DPI">
            <summary>
获取导出DPI
</summary>
        </member>
        <member name="F:PIE.Carto.ExportPNG.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.#ctor(SysUtility._ptr_t&lt;SysCarto.ExporterPNG&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.ExportPNG.FinishExporting">
            <summary>
导出完毕
</summary>
            <summary>
导出完毕
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.StartExporting">
            <summary>
开始导出
</summary>
            <summary>
开始导出
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.ExportFileName">
            <summary>
获取或设置导出路径
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.TrackerCancel">
            <summary>
获取或设置ITrackerCancel
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.BackgroundColor">
            <summary>
获取或设置导出背景色
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.Height">
            <summary>
获取或设置导出高度
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.Width">
            <summary>
获取或设置导出宽度
</summary>
        </member>
        <member name="P:PIE.Carto.ExportPNG.DPI">
            <summary>
获取或设置导出DPI
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExportPNG.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ExportPNG">
            <summary>
ExportPNG类
</summary>
        </member>
        <member name="M:PIE.Carto.IExportPNG.FinishExporting">
            <summary>
导出完毕
</summary>
        </member>
        <member name="M:PIE.Carto.IExportPNG.StartExporting">
            <summary>
开始导出
</summary>
        </member>
        <member name="P:PIE.Carto.IExportPNG.ExportFileName">
            <summary>
获取或设置导出路径
</summary>
        </member>
        <member name="T:PIE.Carto.IExportPNG">
            <summary>
IExportPNG接口
</summary>
        </member>
        <member name="D:SysCarto.ExporterPNGPtr">
@brief   输出图片PNG  智能指针对象

</member>
        <member name="F:SysCarto.ExporterPNG.m_strExportFileName">
@brief 输出的文件名

</member>
        <member name="F:SysCarto.ExporterPNG.m_pImage">
@brief 图像

</member>
        <member name="M:SysCarto.ExporterPNG.FinishExporting">
@brief 完成输出
@return   void

</member>
        <member name="M:SysCarto.ExporterPNG.StartExporting">
@brief 开始输出
@return   void

</member>
        <member name="M:SysCarto.ExporterPNG.GetDevice">
@brief 获取设备
@return  QPaintDevice*  设备

</member>
        <member name="M:SysCarto.ExporterPNG.SetExportFileName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置输出的文件名
@param [in] strFile 输出的文件名
@return void 

</member>
        <member name="M:SysCarto.ExporterPNG.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ExporterPNG.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.ExporterPNG">
@class  ExporterPNG
@brief  输出图片PNG

</member>
        <member name="M:PIE.Carto.MapSurroundFrame.set_Shadow(PIE.Carto.IShadow)">
            <summary>
阴影
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.get_Shadow">
            <summary>
阴影
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.set_Border(PIE.Carto.IBorder)">
            <summary>
边界
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.get_Border">
            <summary>
边界
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.set_Background(PIE.Carto.IBackground)">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.get_Background">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.set_MapSurround(PIE.Carto.IMapSurround)">
            <summary>
获取或设置MapSurround
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.get_MapSurround">
            <summary>
获取MapSurround
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.get_FieldDelimiter">
            <summary>
获取或者设置渲染FieldDelimiter信息
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.get_DefaultSymbol">
            <summary>
获取默认渲染符号
</summary>
            <returns>渲染符号</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.set_DefaultSymbol(PIE.Display.ISymbol)">
            <summary>
设置默认渲染符号
</summary>
            <param name="defaultSymbol">渲染符号</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.get_DefaultLabel">
            <summary>
获取或者设置默认渲染标注信息
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.set_LinearStretchPercent(System.Double)">
            <summary>
设置线性拉伸百分比
</summary>
            <param name="dValue">线性拉伸百分比</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.get_LinearStretchPercent">
            <summary>
获取线性拉伸百分比
</summary>
            <returns>线性拉伸百分比</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretch.set_StretchType(&lt;unknown type&gt;)">
            <summary>
设置栅格拉伸类型
</summary>
            <param name="eType">栅格拉伸类型</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.get_StretchType">
            <summary>
获取栅格拉伸类型
</summary>
            <returns>栅格拉伸类型</returns>
        </member>
        <member name="F:PIE.Carto.RasterStretch.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.#ctor(SysCarto.IRasterStretch*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.GetRenderMinMax(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.SetLutLineInfo(System.Boolean,System.Collections.Generic.IList`1{System.Drawing.Point},System.Int32)">
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.GetLutLineInfo(System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{System.Drawing.Point}}@)">
            <summary>
 获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
            <summary>
 获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretch.GetLut(System.Int32)">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <returns>获取Lut</returns>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.SetLut(System.Int32,System.Byte[])">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.GetMinimumMaximum(System.Double@,System.Double@,System.Int32)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.SetMinimumMaximum(System.Double,System.Double,System.Int32)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.GetMinimumMaximum(System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.Carto.RasterStretch.SetMinimumMaximum(System.Double,System.Double)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="P:PIE.Carto.RasterStretch.LinearStretchPercent">
            <summary>
获取或者设置线性拉伸百分比
</summary>
        </member>
        <member name="P:PIE.Carto.RasterStretch.StretchType">
            <summary>
获取或者设置栅格拉伸类型
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretch.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterStretch">
            <summary>
栅格拉伸类
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.get_IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.get_FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.get_Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.get_Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="F:PIE.Carto.RPCTranslatePreFilter.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.#ctor(SysUtility._ptr_t&lt;SysCarto.RPCTranslatePreFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.FilterExtent(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32)">
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
        </member>
        <member name="P:PIE.Carto.RPCTranslatePreFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.RPCTranslatePreFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.RPCTranslatePreFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.RPCTranslatePreFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.Process(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Int32},PIE.DataSource.IPixelBuffer,System.Object)">
            <summary>
是否正在进程
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <param name="pEnvelope">Envelope对象</param>
            <param name="nWidth">宽度</param>
            <param name="nHeight">高度</param>
            <param name="listBands">波段集合</param>
            <param name="memDataOut">缓冲区</param>memDataOut
<param name="dataMask">掩膜</param>memDataOut
<return>是否正在进程</return><summary>
是否正在进程
</summary><param name="rasterDataset">栅格数据集</param><param name="pEnvelope">Envelope对象</param><param name="nWidth">宽度</param><param name="nHeight">高度</param><param name="listBands">波段集合</param><param name="memDataOut">缓冲区</param>memDataOut
<param name="dataMask">掩膜</param>memDataOut
<return>是否正在进程</return></member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RPCTranslatePreFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RPCTranslatePreFilter">
            <summary>
RPCTranslatePreFilter类
</summary>
        </member>
        <member name="M:PIE.Carto.IRPCTranslatePreFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="M:PIE.Carto.IRPCTranslatePreFilter.FilterExtent(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32)">
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
        </member>
        <member name="M:PIE.Carto.IRPCTranslatePreFilter.Process(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Int32},PIE.DataSource.IPixelBuffer,System.Object)">
            <summary>
是否正在进程
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <param name="pEnvelope">Envelope对象</param>
            <param name="nWidth">宽度</param>
            <param name="nHeight">高度</param>
            <param name="listBands">波段集合</param>
            <param name="memDataOut">缓冲区</param>memDataOut
<param name="dataMask">掩膜</param>memDataOut
<return>是否正在进程</return></member>
        <member name="T:PIE.Carto.IRPCTranslatePreFilter">
            <summary>
IRPCTranslatePreFilter接口
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_RenderingRule">
            <summary>
获取或设置渲染规则
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_MosaicRule">
            <summary>
获取或设置镶嵌规则
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_BandIDs">
            <summary>
获取或设置波段编号
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_CompressionQuality">
            <summary>
获取或设置压缩质量
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_Compression">
            <summary>
获取或设置压缩
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_Interpolation">
            <summary>
获取或设置Interpolation
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_ImageFormat">
            <summary>
获取或设置图片类型(PNG,PNG8,PNG24,PNG32,JPG,PDF,BMP,GIF,SVG)
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_NoDataInterpretation">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_NoData">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_PixelType">
            <summary>
获取或设置像素类型U16，S16，F32
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.get_BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="F:PIE.Carto.ArcGISImageDynamicLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.ArcGISImageDynamicLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.RenderingRule">
            <summary>
获取或设置渲染规则
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.MosaicRule">
            <summary>
获取或设置镶嵌规则
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.BandIDs">
            <summary>
获取或设置波段编号
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.CompressionQuality">
            <summary>
获取或设置压缩质量
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.Compression">
            <summary>
获取或设置压缩
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.Interpolation">
            <summary>
获取或设置Interpolation
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.NoDataInterpretation">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.NoData">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.PixelType">
            <summary>
获取或设置像素类型U16，S16，F32
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.ImageFormat">
            <summary>
获取或设置图片类型(JPGPNG,PNG,PNG8,PNG24,PNG32,JPG,BMP,GIF,TIFF)
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISImageDynamicLayer.BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageDynamicLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ArcGISImageDynamicLayer">
            <summary>
ArcGIS动态地图服务图层对象
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.RenderingRule">
            <summary>
获取或设置渲染规则
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.MosaicRule">
            <summary>
获取或设置镶嵌规则
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.BandIDs">
            <summary>
获取或设置波段编号
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.CompressionQuality">
            <summary>
获取或设置压缩质量
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.Compression">
            <summary>
获取或设置压缩
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.Interpolation">
            <summary>
获取或设置Interpolation
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.NoDataInterpretation">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.NoData">
            <summary>
获取或设置无效值
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.PixelType">
            <summary>
获取或设置像素类型U16，S16，F32
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.ImageFormat">
            <summary>
获取或设置图片类型(JPGPNG,PNG,PNG8,PNG24,PNG32,JPG,BMP,GIF,TIFF)
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISImageDynamicLayer.BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="T:PIE.Carto.IArcGISImageDynamicLayer">
            <summary>
ArcGIS动态影像服务图层对象接口
</summary>
        </member>
        <member name="D:SysCarto.ArcGISImageDynamicLayerPtr">
@brief   ArcGIS鍥惧儚鍔ㄦ€佸浘灞? 鏅鸿兘鎸囬拡瀵硅薄

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strTime">
@brief 鏃堕棿

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strSize">
@brief 灏哄

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strRenderingRule">
@brief 娓叉煋灏哄害

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strPixelType">
@brief 鍍忕礌鐐圭被鍨?

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strNoDataInterpretation">
@brief 鏃犳晥鏁版嵁鎻掑叆椤?

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strNoData">
@brief 鏃犳晥鏁版嵁

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strMosaicRule">
@brief 鎻掑叆椤?

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strInterpolation">
@brief 鎻掑叆椤?

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strImageSR">
@brief 鍥惧儚SR

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strFormat">
@brief 鏍煎紡

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strCompressionQuality">
@brief 鍘嬬缉璐ㄩ噺

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strCompression">
@brief 鍘嬬缉

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strBboxSR">
@brief 娉㈡鐩掑瓙SR

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strBbox">
@brief 娉㈡鐩掑瓙

</member>
        <member name="F:SysCarto.ArcGISImageDynamicLayer.m_strBandIds">
@brief 娉㈡鍛戒护

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetRequestCommand">
@brief 鑾峰彇闇€姹傚懡浠?
@return  QString  闇€姹傚懡浠?

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetUriParameter">
@brief 鑾峰彇URI鍙傛暟
@return QString   URI鍙傛暟

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.CopyTo(SysCarto.Layer*)">
@brief 鎷疯礉鍒癓ayer
@param[in] Layer* Layer瀵硅薄

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetTime(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏃堕棿
@param [in] str 鏃堕棿
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetTime">
@brief 鑾峰彇鏃堕棿
@return QString  鏃堕棿

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetSize(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆灏哄
@param [in] str 灏哄
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetSize">
@brief 鑾峰彇灏哄
@return QString  灏哄

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetRenderingRule(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娓叉煋灏哄害
@param [in] str 娓叉煋灏哄害
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetRenderingRule">
@brief 鑾峰彇娓叉煋灏哄害
@return QString  娓叉煋灏哄害

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetPixelType(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍍忕礌鐐圭被鍨?
@param [in] str 鍍忕礌鐐圭被鍨?
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetPixelType">
@brief 鑾峰彇鍍忕礌鐐圭被鍨?
@return QString  鍍忕礌鐐圭被鍨?

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetNoDataInterpretation(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏃犳晥鏁版嵁鎻掑叆椤?
@param [in] str 鏃犳晥鏁版嵁鎻掑叆椤?
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetNoDataInterpretation">
@brief 鑾峰彇鏃犳晥鏁版嵁鎻掑叆椤?
@return QString  鏃犳晥鏁版嵁鎻掑叆椤?

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetNoData(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏃犳晥鏁版嵁
@param [in] str 鏃犳晥鏁版嵁
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetNoData">
@brief 鑾峰彇鏃犳晥鏁版嵁
@return QString  鏃犳晥鏁版嵁

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetMosaicRule(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆闀跺祵灏哄害
@param [in] str 闀跺祵灏哄害
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetMosaicRule">
@brief 鑾峰彇闀跺祵灏哄害
@return QString  闀跺祵灏哄害

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetInterpolation(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鎻掑叆椤?
@param [in] str 鎻掑叆椤?
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetInterpolation">
@brief 鑾峰彇鎻掑叆椤?
@return QString  鎻掑叆椤?

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetImageSR(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍥惧儚SR
@param [in] str 鍥惧儚SR
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetImageSR">
@brief 鑾峰彇鍥惧儚SR
@return QString  鍥惧儚SR

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetFormat(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏍煎紡
@param [in] str 鏍煎紡
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetFormat">
@brief 鑾峰彇鏍煎紡
@return QString  鍘嬬缉璐ㄩ噺

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetCompressionQuality(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍘嬬缉璐ㄩ噺
@param [in] str 鍘嬬缉璐ㄩ噺
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetCompressionQuality">
@brief 鑾峰彇鍘嬬缉璐ㄩ噺
@return QString  鍘嬬缉璐ㄩ噺

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetCompression(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍘嬬缉
@param [in] str 鍘嬬缉
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetCompression">
@brief 鑾峰彇鍘嬬缉
@return QString  鍘嬬缉

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetBboxSR(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娉㈡鐩掑瓙SR
@param [in] str 娉㈡鐩掑瓙SR
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetBboxSR">
@brief 鑾峰彇娉㈡鐩掑瓙SR
@return QString  娉㈡鐩掑瓙SR

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetBbox(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娉㈡鐩掑瓙
@param [in] str 娉㈡鐩掑瓙
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetBbox">
@brief 鑾峰彇娉㈡鐩掑瓙
@return QString  娉㈡鐩掑瓙

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.SetBandIds(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娉㈡ID
@param [in] str 娉㈡ID
@return void 

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.GetBandIds">
@brief 鑾峰彇娉㈡ID
@return QString 娉㈡ID

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.Clone">
@brief 鍏嬮殕
@return LayerPtr 鍏嬮殕瀵硅薄

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.Dispose">
@brief 鏋愭瀯鍑芥暟

</member>
        <member name="M:SysCarto.ArcGISImageDynamicLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 鏋勯€犲嚱鏁?
@param [in] uri  缁熶竴璧勬簮鏍囪瘑绗?

</member>
        <member name="T:SysCarto.ArcGISImageDynamicLayer">
@class ArcGISImageDynamicLayer
@brief  ArcGIS鍥惧儚鍔ㄦ€佸浘灞?

</member>
        <member name="M:PIE.Carto.MapFrameElement.set_Shadow(PIE.Carto.IShadow)">
            <summary>
阴影
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.get_Shadow">
            <summary>
阴影
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.set_Border(PIE.Carto.IBorder)">
            <summary>
边界
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.get_Border">
            <summary>
边界
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.set_Background(PIE.Carto.IBackground)">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.get_Background">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.get_Map">
            <summary>
Map
</summary>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.set_ColorMap(System.Collections.Generic.IList`1{System.Drawing.Color})">
            <summary>
设置ColorMap
</summary>
            <param name="colorMap">ColorMap</param>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.get_ColorMap">
            <summary>
获取ColorMap
</summary>
            <returns>ColorMap</returns>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.get_Symbol">
            <summary>
获取渲染符号
</summary>
            <returns>渲染符号</returns>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.set_Symbol(PIE.Display.ISymbol)">
            <summary>
设置渲染符号
</summary>
            <param name="symbol">渲染符号</param>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.get_Label">
            <summary>
获取或者设置渲染标注信息
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.get_Description">
            <summary>
获取或者设置渲染描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.Element.set_Geometry(PIE.Geometry.IGeometry)">
            <summary>
设置Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.Element.get_Geometry">
            <summary>
获取Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.Element.set_CustomerProperty(System.Object)">
            <summary>
设置属性
</summary>
        </member>
        <member name="M:PIE.Carto.Element.get_CustomerProperty">
            <summary>
获取属性
</summary>
        </member>
        <member name="M:PIE.Carto.Element.set_Name(System.String)">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Carto.Element.get_Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.get_Image">
            <summary>
获取图片
</summary>
        </member>
        <member name="M:PIE.Carto.RenderFactory.ExportToFile(PIE.Carto.IRasterRender,System.String)">
            <summary>
保存RasterRender到xml
</summary>
            <param name="rasterRender">RasterRender栅格渲染</param>
            <param name="strXMLPath">栅格渲染文件</param>
            <returns>是否成功</returns>
            <summary>
保存RasterRender到xml
</summary>
            <param name="rasterRender">RasterRender栅格渲染</param>
            <param name="strXMLPath">栅格渲染文件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.RenderFactory.ImportFromFile(System.String)">
            <summary>
打开RasterRender
</summary>
            <param name="strXMLPath">栅格渲染文件</param>
            <returns>RasterRender对象</returns>
            <summary>
打开RasterRender
</summary>
            <param name="strXMLPath">栅格渲染文件</param>
            <returns>RasterRender对象</returns>
        </member>
        <member name="M:PIE.Carto.RenderFactory.CreateDefaultFeatureRender(PIE.DataSource.IFeatureDataset)">
            <summary>
创建默认矢量渲染
</summary>
            <param name="dataset">矢量数据集对象</param>
            <returns>FeatureRender对象</returns>
            <summary>
创建默认矢量渲染
</summary>
            <param name="dataset">矢量数据集对象</param>
            <returns>FeatureRender对象</returns>
        </member>
        <member name="M:PIE.Carto.RenderFactory.CreateDefaultRasterRender(PIE.DataSource.IRasterDataset)">
            <summary>
创建默认栅格渲染
</summary>
            <param name="dataset">栅格数据集对象</param>
            <returns>RasterRender对象</returns>
            <summary>
创建默认栅格渲染
</summary>
            <param name="dataset">栅格数据集对象</param>
            <returns>RasterRender对象</returns>
        </member>
        <member name="T:PIE.Carto.RenderFactory">
            <summary>
渲染工厂类
</summary>
        </member>
        <member name="M:SysCarto.RenderFactory.ExportToFile(SysUtility._ptr_t&lt;SysCarto.RasterRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 导出到文件
@param [in] ptrRasterRender  栅格渲染
@param [in] strXMLPath   XML文档路径
@return  bool  是否成功

</member>
        <member name="M:SysCarto.RenderFactory.ImportFromFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从文件中导入
@param [in] strXMLPath   XML文档路径
@return  RasterRenderPtr 栅格渲染

</member>
        <member name="M:SysCarto.RenderFactory.CreateDefaultFeatureRender(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建默认矢量要素渲染
@param [in] ptrDataset   矢量数据集
@return  FeatureRenderPtr 矢量要素渲染

</member>
        <member name="M:SysCarto.RenderFactory.CreateDefaultRasterRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建默认栅格渲染
@param [in] ptrDataset   栅格数据集
@return  RasterRenderPtr 栅格渲染

</member>
        <member name="T:SysCarto.RenderFactory">
@class  RenderFactory
@brief  渲染工厂

</member>
        <member name="M:PIE.Carto.Layer.add_OnPropertyChanged(PIE.Carto.OnPropertyChangedEventHandler)">
            <summary>
属性变化变化
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.add_OnRenderChanged(PIE.Carto.OnRenderChangedEventHandler)">
            <summary>
触发渲染变化
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.add_OnVisibilityChanged(PIE.Carto.OnVisibilityChangedEventHandler)">
            <summary>
可视化变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.get_Tag">
            <summary>
获取或设置Tag
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.get_IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.get_FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.get_Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.get_Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_AfterRasterFilterList(System.Collections.Generic.IList`1{PIE.Carto.IAfterRasterFilter})">
            <summary>
获取后置过滤器（对显示数据起作用）
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_AfterRasterFilterList">
            <summary>
获取后置过滤器（对显示数据起作用）
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_PreRasterFilterList(System.Collections.Generic.IList`1{PIE.Carto.IPreRasterFilter})">
            <summary>
获取前置过滤器（对原始数据起作用）
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_PreRasterFilterList">
            <summary>
获取前置过滤器（对原始数据起作用）
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_InvertBrightness(System.Boolean)">
            <summary>
设置亮度值反转与否信息
</summary>
            <param name="invertBrightness">亮度值反转与否</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_InvertBrightness">
            <summary>
获取亮度值反转与否信息
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_NoDataColor(System.Drawing.Color)">
            <summary>
设置NoDataColor信息
</summary>
            <param name="noDataColor">NoDataColor信息</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_NoDataColor">
            <summary>
获取NoDataColor信息
</summary>
            <returns>NoDataColor值</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_TransparencyValue(System.Int32)">
            <summary>
设置透明度值信息
</summary>
            <param name="transparencyValue">透明度信息</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_TransparencyValue">
            <summary>
获取透明度信息
</summary>
            <returns>透明度信息</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_ContrastValue(System.Int32)">
            <summary>
设置对比度值信息
</summary>
            <param name="contrastValue">对比度信息</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_ContrastValue">
            <summary>
获取对比度信息
</summary>
            <returns>对比度信息</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_BrightnessValue(System.Int32)">
            <summary>
设置亮度值信息
</summary>
            <param name="brightnessValue">亮度值信息</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_BrightnessValue">
            <summary>
获取亮度值信息
</summary>
            <returns>亮度值信息</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_ResamplingType(&lt;unknown type&gt;)">
            <summary>
设置栅格重采样类型
</summary>
            <param name="resampleType">栅格重采样类型</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_ResamplingType">
            <summary>
获取栅格重采样类型
</summary>
            <returns>栅格重采样类型</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.set_DisplayResolutionFactor(System.Int32)">
            <summary>
设置分辨率因子
</summary>
            <param name="factor">分辨率因子</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_DisplayResolutionFactor">
            <summary>
获取分辨率因子
</summary>
            <returns>分辨率因子</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_Description">
            <summary>
获得渲染描述信息
</summary>
            <returns>渲染描述信息</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.get_Name">
            <summary>
获得渲染名称
</summary>
            <returns>渲染名称</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.set_DefaultColor(System.Drawing.Color)">
            <summary>
设置默认颜色
</summary>
            <param name="defaultColor">默认颜色</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_DefaultColor">
            <summary>
获取默认颜色
</summary>
            <returns>默认颜色</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.set_DefaultLabel(System.String)">
            <summary>
设置默认标签
</summary>
            <param name="defaultLabel">默认标签</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_DefaultLabel">
            <summary>
获取默认标签
</summary>
            <returns>默认标签</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.set_LabelMap(System.Collections.Generic.IDictionary`2{System.String,System.Object})">
            <summary>
设置Label地图
</summary>
            <param name="labelMap">Label地图</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_LabelMap">
            <summary>
获取Label地图
</summary>
            <returns>默认颜色</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.set_UniqueValues(PIE.Carto.IUniqueValues)">
            <summary>
设置UniqueValues
</summary>
            <param name="uniqueValues">UniqueValues</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_UniqueValues">
            <summary>
获取UniqueValues
</summary>
            <returns>UniqueValues</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.set_ClassColors(System.Collections.Generic.IList`1{System.Drawing.Color})">
            <summary>
设置ClassColors
</summary>
            <param name="listColor">ClassColors</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_ClassColors">
            <summary>
获取ClassColors
</summary>
            <returns>ClassColors</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.get_ColorRamp">
            <summary>
获取ColorRamp
</summary>
            <returns>ColorRamp</returns>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.get_IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.get_FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.get_Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.get_Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementsSelectionChanged(PIE.Carto.OnElementsSelectionChangedEventHandler)">
            <summary>
选择要素变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementsReordered(PIE.Carto.OnElementsReorderedEventHandler)">
            <summary>
多要素排序事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnAllElementsDeleted(PIE.Carto.OnAllElementsDeletedEventHandler)">
            <summary>
所有要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementsDeleted(PIE.Carto.OnElementsDeletedEventHandler)">
            <summary>
多要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementsAdded(PIE.Carto.OnElementsAddedEventHandler)">
            <summary>
多要素更新事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementUpdated(PIE.Carto.OnElementUpdatedEventHandler)">
            <summary>
要素更新事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementDeleted(PIE.Carto.OnElementDeletedEventHandler)">
            <summary>
要素删除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnElementAdded(PIE.Carto.OnElementAddedEventHandler)">
            <summary>
要素添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnMapPreLoadFinished(PIE.Carto.OnMapPreLoadFinishedEventHandler)">
            <summary>
地图预加载完成事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnViewRefreshed(PIE.Carto.OnViewRefreshedEventHandler)">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnCurrentLayerChanged(PIE.Carto.OnCurrentLayerChangedEventHandler)">
            <summary>
当前图层变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeforeCurrentLayerChanging(PIE.Carto.OnBeforeCurrentLayerChangingEventHandler)">
            <summary>
当前图层变化前事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnAfterDraw(PIE.Carto.OnAfterDrawEventHandler)">
            <summary>
绘图后事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeginDraw(PIE.Carto.OnBeginDrawEventHandler)">
            <summary>
绘图前事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnSpatialReferenceChanged(PIE.Carto.OnSpatialReferenceChangedEventHandler)">
            <summary>
空间参考信息变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnFeaturesSelectionChanged(PIE.Carto.OnFeaturesSelectionChangedEventHandler)">
            <summary>
要素选择变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnContentsCleared(PIE.Carto.OnContentsClearedEventHandler)">
            <summary>
图层内容清除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnContentsChanged(PIE.Carto.OnContentsChangedEventHandler)">
            <summary>
图层内容变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnFocusMapChanged(PIE.Carto.OnFocusMapChangedEventHandler)">
            <summary>
图层变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnLayersDeleted(PIE.Carto.OnLayersDeletedEventHandler)">
            <summary>
多图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnLayersAdded(PIE.Carto.OnLayersAddedEventHandler)">
            <summary>
多图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnLayerReordered(PIE.Carto.OnLayerReorderedEventHandler)">
            <summary>
图层排序事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnLayerDeleted(PIE.Carto.OnLayerDeletedEventHandler)">
            <summary>
图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnLayerAdded(PIE.Carto.OnLayerAddedEventHandler)">
            <summary>
图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeforeLayersDeleted(PIE.Carto.OnBeforeLayersDeletedEventHandler)">
            <summary>
多图层移除事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeforeLayersAdded(PIE.Carto.OnBeforeLayersAddedEventHandler)">
            <summary>
多图层添加事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeforeLayerDeleted(PIE.Carto.OnBeforeLayerDeletedEventHandler)">
            <summary>
图层移除前事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.add_OnBeforeLayerAdded(PIE.Carto.OnBeforeLayerAddedEventHandler)">
            <summary>
图层添加前事件
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_TrackerCancel(PIE.SystemUI.ITrackerCancel)">
            <summary>
获得TrackerCancel对象
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_IsShowSelection(System.Boolean)">
            <summary>
是否显示选择
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_ExportFrame">
            <summary>
获取输出图框
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_ExtentStack">
            <summary>
获得范围栈
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_FullExtent(PIE.Geometry.IEnvelope)">
            <summary>
地图全图范围
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_Extent(PIE.Geometry.IEnvelope)">
            <summary>
地图视图范围
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_IsActived">
            <summary>
是否激活状体
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_FocusMap(PIE.Carto.IMap)">
            <summary>
地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_DisplayTransformation">
            <summary>
ScreenDisplay
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_GraphicsContainer">
            <summary>
标绘图层-默认
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_DefaultTempLayer">
            <summary>
临时图层
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.set_CurrentLayer(PIE.Carto.ILayer)">
            <summary>
当前地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.get_GraphicContainer">
            <summary>
获取或设置GraphicsContainer
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.add_OnAbortEditOperation(PIE.Carto.OnAbortEditOperationEventHandler)">
            <summary>
放弃编辑操作事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.add_OnStopEditOperation(PIE.Carto.OnStopEditOperationEventHandler)">
            <summary>
结束编辑操作事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.add_OnStartEditOperation(PIE.Carto.OnStartEditOperationEventHandler)">
            <summary>
开始编辑操作事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.add_OnStopEditing(PIE.Carto.OnStopEditingEventHandler)">
            <summary>
结束编辑事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.add_OnStartEditing(PIE.Carto.OnStartEditingEventHandler)">
            <summary>
开始编辑事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_EditFeature">
            <summary>
获取或者设置编辑要素
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_SnapTolerance">
            <summary>
获取或者设置捕捉容差
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_TraceSymbol">
            <summary>
获取或者设置追踪点符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_SnapSymbol">
            <summary>
获取或者设置捕捉点符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_SketchVertexSymbol">
            <summary>
获取或者设置草图节点符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_SketchSymbol">
            <summary>
获取或者设置草图符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_SelectedVertexSymbol">
            <summary>
获取或者设置已选择节点符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.set_CurrentLayer(PIE.Carto.IFeatureLayer)">
            <summary>
设置当前图层
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_CurrentLayer">
            <summary>
获取当前图层
</summary>
            <returns>当前图层</returns>
        </member>
        <member name="M:PIE.Carto.Editor.set_Map(PIE.Carto.IMap)">
            <summary>
设置地图对象
</summary>
            <param name="pMap">地图对象</param>
        </member>
        <member name="M:PIE.Carto.Editor.get_Map">
            <summary>
获取或者设置当前地图
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.get_Instance">
            <summary>
获得C++示例
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_OnAbortEditOperationEventHandler">
            <summary>
放弃编辑操作事件
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_OnStopEditOperationEventHandler">
            <summary>
结束编辑操作事件
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_OnStartEditOperationEventHandler">
            <summary>
开始编辑操作事件
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_OnStopEditingEventHandler">
            <summary>
结束编辑事件
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_OnStartEditingEventHandler">
            <summary>
开始编辑事件
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_Instance">
            <summary>
实例成员
</summary>
        </member>
        <member name="F:PIE.Carto.Editor.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Carto.Editor.OnAbortEditOperation">
            <summary>
放弃编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.Editor.OnStopEditOperation">
            <summary>
结束编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.Editor.OnStartEditOperation">
            <summary>
开始编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.Editor.OnStopEditing">
            <summary>
结束编辑事件
</summary>
        </member>
        <member name="E:PIE.Carto.Editor.OnStartEditing">
            <summary>
开始编辑事件
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.Trace(PIE.Geometry.IPoint)">
            <summary>
实时追踪调用
</summary>
            <param name="pRealPoint">实时追踪地理点</param>
            <summary>
实时追踪调用
</summary>
            <param name="pRealPoint">实时追踪地理点</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetTraceParameter(PIE.Geometry.IPoint,System.Collections.Generic.IList`1{PIE.Geometry.IPoint})">
            <summary>
设置追踪参数
</summary>
            <param name="pStartPoint">起始点</param>
            <param name="pLstTracePoint">追踪结果列表</param>
            <summary>
设置追踪参数
</summary>
            <param name="pStartPoint">起始点</param>
            <param name="pLstTracePoint">追踪结果列表</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetTraced(System.Boolean)">
            <summary>
设置追踪状态
</summary>
            <param name="bIsTraced">是否追踪</param>
            <summary>
设置追踪状态
</summary>
            <param name="bIsTraced">是否追踪</param>
        </member>
        <member name="M:PIE.Carto.Editor.IsTraced">
            <summary>
获取是否追踪
</summary>
            <returns>是否追踪</returns>
            <summary>
获取是否追踪
</summary>
            <returns>是否追踪</returns>
        </member>
        <member name="P:PIE.Carto.Editor.EditFeature">
            <summary>
获取或者设置编辑要素
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.RefreshSketch(System.Drawing.Graphics,PIE.Display.IDisplayTransformation)">
            <summary>
刷新草图
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrTransform">转换对象</param>
            <summary>
刷新草图
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnappingMidPoint(System.Boolean)">
            <summary>
设置捕捉中间点
</summary>
            <param name="b">是否捕捉</param>
            <summary>
设置捕捉中间点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnappingPoint(System.Boolean)">
            <summary>
设置捕捉点
</summary>
            <param name="b">是否捕捉</param>
            <summary>
设置捕捉点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnappingEnd(System.Boolean)">
            <summary>
设置捕捉结束点
</summary>
            <param name="b">是否捕捉</param>
            <summary>
设置捕捉结束点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnappingEdge(System.Boolean)">
            <summary>
设置捕捉边缘点
</summary>
            <param name="b">是否捕捉</param>
            <summary>
设置捕捉边缘点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnappingVertex(System.Boolean)">
            <summary>
设置捕捉节点
</summary>
            <param name="b">是否捕捉</param>
            <summary>
设置捕捉节点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.Editor.DrawSnapping(PIE.Geometry.IPoint)">
            <summary>
DrawSnapping
</summary>
            <param name="point">点</param>
            <summary>
DrawSnapping
</summary>
            <param name="point">点</param>
        </member>
        <member name="M:PIE.Carto.Editor.SnapPoint(PIE.Geometry.IPoint,PIE.Geometry.IPoint@)">
            <summary>
获取捕捉点是否成功
</summary>
            <param name="inPoint">内点</param>
            <param name="OutPoint">外点</param>
            <returns>是否成功</returns>
            <summary>
获取捕捉点是否成功
</summary>
            <param name="inPoint">内点</param>
            <param name="OutPoint">外点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Carto.Editor.SnapTolerance">
            <summary>
获取或者设置捕捉容差
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.TraceSymbol">
            <summary>
获取或者设置追踪点符号
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.SetSnapTextSymbol(PIE.Display.ITextSymbol)">
            <summary>
设置捕捉文本符号
</summary>
            <param name="ptrSymbol">捕捉文本符号对象</param>
            <summary>
设置捕捉文本符号
</summary>
            <param name="ptrSymbol">捕捉文本符号对象</param>
        </member>
        <member name="M:PIE.Carto.Editor.GetSnapTextSymbol(System.String)">
            <summary>
获取捕捉文本符号
</summary>
            <param name="str">捕捉文本</param>
            <returns>捕捉文本符号</returns>
            <summary>
获取捕捉文本符号
</summary>
            <param name="str">捕捉文本</param>
            <returns>捕捉文本符号</returns>
        </member>
        <member name="P:PIE.Carto.Editor.SnapSymbol">
            <summary>
获取或者设置捕捉点符号
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.SketchVertexSymbol">
            <summary>
获取或者设置草图节点符号
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.SketchSymbol">
            <summary>
获取或者设置草图符号
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.SelectedVertexSymbol">
            <summary>
获取或者设置已选择节点符号
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.CurrentLayer">
            <summary>
获取或者设置当前图层
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.Map">
            <summary>
获取或者设置当前地图
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.GetEditState">
            <summary>
获取编辑状态
</summary>
            <returns>Editor编辑状态</returns>
            <summary>
获取编辑状态
</summary>
            <returns>Editor编辑状态</returns>
        </member>
        <member name="M:PIE.Carto.Editor.AbortEditOperation">
            <summary>
放弃编辑操作
</summary>
            <summary>
放弃编辑操作
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.StopEditOperation">
            <summary>
结束编辑操作
</summary>
            <summary>
结束编辑操作
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.StartEditOperation(System.String)">
            <summary>
开始编辑操作
</summary>
            <param name="strDescription">操作名称描述</param>
            <summary>
开始编辑操作
</summary>
            <param name="strDescription">操作名称描述</param>
        </member>
        <member name="M:PIE.Carto.Editor.HasEdits">
            <summary>
是否编辑过
</summary>
            <returns>是否编辑过</returns>
            <summary>
是否编辑过
</summary>
            <returns>是否编辑过</returns>
        </member>
        <member name="M:PIE.Carto.Editor.SaveEditing">
            <summary>
保存编辑
</summary>
            <summary>
保存编辑
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.StopEditing(System.Boolean)">
            <summary>
停止编辑
</summary>
            <param name="bSaveChanges">保存是否改变</param>
            <summary>
停止编辑
</summary>
            <param name="bSaveChanges">保存是否改变</param>
        </member>
        <member name="M:PIE.Carto.Editor.StartEditing">
            <summary>
开始编辑
</summary>
            <summary>
开始编辑
</summary>
        </member>
        <member name="P:PIE.Carto.Editor.Instance">
            <summary>
获得C++示例
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Editor.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.Editor">
            <summary>
Editor编辑类
</summary>
        </member>
        <member name="E:PIE.Carto.IEditEvents.OnAbortEditOperation">
            <summary>
放弃编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.IEditEvents.OnStopEditOperation">
            <summary>
结束编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.IEditEvents.OnStartEditOperation">
            <summary>
开始编辑操作事件
</summary>
        </member>
        <member name="E:PIE.Carto.IEditEvents.OnStopEditing">
            <summary>
结束编辑事件
</summary>
        </member>
        <member name="E:PIE.Carto.IEditEvents.OnStartEditing">
            <summary>
开始编辑事件
</summary>
        </member>
        <member name="T:PIE.Carto.IEditEvents">
            <summary>
IEditEvents图层事件接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnAbortEditOperationEventHandler">
            <summary>
放弃编辑操作事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnStopEditOperationEventHandler">
            <summary>
结束编辑操作事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnStartEditOperationEventHandler">
            <summary>
开始编辑操作事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnStopEditingEventHandler">
            <summary>
结束编辑事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnStartEditingEventHandler">
            <summary>
开始编辑事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.IEditTrace.Trace(PIE.Geometry.IPoint)">
            <summary>
实时追踪调用
</summary>
            <param name="pRealPoint">实时追踪地理点</param>
        </member>
        <member name="M:PIE.Carto.IEditTrace.SetTraceParameter(PIE.Geometry.IPoint,System.Collections.Generic.IList`1{PIE.Geometry.IPoint})">
            <summary>
设置追踪参数
</summary>
            <param name="pStartPoint">起始点</param>
            <param name="pLstTracePoint">追踪结果列表</param>
        </member>
        <member name="M:PIE.Carto.IEditTrace.SetTraced(System.Boolean)">
            <summary>
设置追踪状态
</summary>
            <param name="bIsTraced">是否追踪</param>
        </member>
        <member name="M:PIE.Carto.IEditTrace.IsTraced">
            <summary>
获取是否追踪
</summary>
            <returns>是否追踪</returns>
        </member>
        <member name="T:PIE.Carto.IEditTrace">
            <summary>
IEditTrace追踪接口
</summary>
        </member>
        <member name="P:PIE.Carto.IEditSketch.EditFeature">
            <summary>
获取或者设置编辑要素
</summary>
        </member>
        <member name="M:PIE.Carto.IEditSketch.RefreshSketch(System.Drawing.Graphics,PIE.Display.IDisplayTransformation)">
            <summary>
刷新草图
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="T:PIE.Carto.IEditSketch">
            <summary>
IEditSketch编辑草图接口
</summary>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.DrawSnapping(PIE.Geometry.IPoint)">
            <summary>
DrawSnapping
</summary>
            <param name="point">点</param>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SnapPoint(PIE.Geometry.IPoint,PIE.Geometry.IPoint@)">
            <summary>
获取捕捉点是否成功
</summary>
            <param name="inPoint">内点</param>
            <param name="OutPoint">外点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SetSnappingMidPoint(System.Boolean)">
            <summary>
设置捕捉中间点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SetSnappingPoint(System.Boolean)">
            <summary>
设置捕捉点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SetSnappingEnd(System.Boolean)">
            <summary>
设置捕捉结束点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SetSnappingEdge(System.Boolean)">
            <summary>
设置捕捉边缘点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="M:PIE.Carto.ISnapEnviroment.SetSnappingVertex(System.Boolean)">
            <summary>
设置捕捉节点
</summary>
            <param name="b">是否捕捉</param>
        </member>
        <member name="P:PIE.Carto.ISnapEnviroment.SnapTolerance">
            <summary>
获取或者设置捕捉容差
</summary>
        </member>
        <member name="T:PIE.Carto.ISnapEnviroment">
            <summary>
ISnapEnviroment捕捉环境设置接口
</summary>
        </member>
        <member name="P:PIE.Carto.IEditProperties.TraceSymbol">
            <summary>
获取或者设置追踪点符号
</summary>
        </member>
        <member name="M:PIE.Carto.IEditProperties.SetSnapTextSymbol(PIE.Display.ITextSymbol)">
            <summary>
设置捕捉文本符号
</summary>
            <param name="ptrSymbol">捕捉文本符号对象</param>
        </member>
        <member name="M:PIE.Carto.IEditProperties.GetSnapTextSymbol(System.String)">
            <summary>
获取捕捉文本符号
</summary>
            <param name="str">捕捉文本</param>
            <returns>捕捉文本符号</returns>
        </member>
        <member name="P:PIE.Carto.IEditProperties.SnapSymbol">
            <summary>
获取或者设置捕捉点符号
</summary>
        </member>
        <member name="P:PIE.Carto.IEditProperties.SketchVertexSymbol">
            <summary>
获取或者设置草图节点符号
</summary>
        </member>
        <member name="P:PIE.Carto.IEditProperties.SketchSymbol">
            <summary>
获取或者设置草图符号
</summary>
        </member>
        <member name="P:PIE.Carto.IEditProperties.SelectedVertexSymbol">
            <summary>
获取或者设置已选择节点符号
</summary>
        </member>
        <member name="T:PIE.Carto.IEditProperties">
            <summary>
IEditProperties编辑器属性接口
</summary>
        </member>
        <member name="P:PIE.Carto.IEditor.CurrentLayer">
            <summary>
获取或设置当前图层
</summary>
        </member>
        <member name="P:PIE.Carto.IEditor.Map">
            <summary>
获取或者设置当前地图
</summary>
        </member>
        <member name="M:PIE.Carto.IEditor.GetEditState">
            <summary>
获取编辑状态
</summary>
            <returns>Editor编辑状态</returns>
        </member>
        <member name="M:PIE.Carto.IEditor.AbortEditOperation">
            <summary>
放弃编辑操作
</summary>
        </member>
        <member name="M:PIE.Carto.IEditor.StopEditOperation">
            <summary>
结束编辑操作
</summary>
        </member>
        <member name="M:PIE.Carto.IEditor.StartEditOperation(System.String)">
            <summary>
开始编辑操作
</summary>
            <param name="strDescription">操作名称描述</param>
        </member>
        <member name="M:PIE.Carto.IEditor.HasEdits">
            <summary>
是否编辑过
</summary>
            <returns>是否编辑过</returns>
        </member>
        <member name="M:PIE.Carto.IEditor.SaveEditing">
            <summary>
保存编辑
</summary>
        </member>
        <member name="M:PIE.Carto.IEditor.StopEditing(System.Boolean)">
            <summary>
停止编辑
</summary>
            <param name="bSaveChanges">保存是否改变</param>
        </member>
        <member name="M:PIE.Carto.IEditor.StartEditing">
            <summary>
开始编辑
</summary>
        </member>
        <member name="T:PIE.Carto.IEditor">
            <summary>
IEditor编辑接口
</summary>
        </member>
        <member name="T:PIE.Carto.EditState">
            <summary>
EditState类型
</summary>
        </member>
        <member name="F:SysCarto.Editor.m_sEditor">
@brief  编辑指针

</member>
        <member name="F:SysCarto.Editor.m_ptrMap">
@brief  地图指针

</member>
        <member name="F:SysCarto.Editor.m_editState">
@brief  编辑状态

</member>
        <member name="M:SysCarto.Editor.DrawSnapping(SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  捕捉绘制
@param [in] point 点
@return void 

</member>
        <member name="M:SysCarto.Editor.SnapPoint(SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取捕捉点是否成功 
@param [in] inPoint 内点
@param [in] OutPoint 外点
@return bool  是否成功

</member>
        <member name="M:SysCarto.Editor.GetEditLayer">
@brief  获取当前要素图层
@return FeatureLayer* 要素图层

</member>
        <member name="M:SysCarto.Editor.SetMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置地图
@param [in] MapPtr 地图
@return void

</member>
        <member name="M:SysCarto.Editor.GetMap">
@brief  获取地图
@return MapPtr 地图

</member>
        <member name="M:SysCarto.Editor.GetEditState">
@brief  获取编辑状态
@return EditState 编辑状态

</member>
        <member name="M:SysCarto.Editor.AbortEditOperation">
@brief  中止编辑操作
@return bool  是否成功

</member>
        <member name="M:SysCarto.Editor.StopEditOperation">
@brief  停止编辑操作
@return bool  是否成功

</member>
        <member name="M:SysCarto.Editor.StartEditOperation(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  开始编辑操作
@param [in] strDescription 描述信息
@return bool  是否成功

</member>
        <member name="M:SysCarto.Editor.HasEdits">
@brief  是否已经编辑
@return bool 是 true, 否 false

</member>
        <member name="M:SysCarto.Editor.SaveEditing">
@brief  保存编辑
@return bool  是否成功

</member>
        <member name="M:SysCarto.Editor.StopEditing(System.Boolean)">
@brief  停止编辑
@param [in] bool bSaveChanges 是否保存变化
@return bool 是否成功

</member>
        <member name="M:SysCarto.Editor.StartEditing">
@brief  开始编辑
@return 是否成功

</member>
        <member name="M:SysCarto.Editor.Destroy">
@brief  销毁对象
@return void

</member>
        <member name="M:SysCarto.Editor.Instance">
@brief  获得单例
@return 编辑类对象

</member>
        <member name="M:SysCarto.Editor.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Editor.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.Editor">
@class Editor
@brief  编辑类

</member>
        <member name="T:SysCarto.EditState">
@class  EditState
@brief  编辑状态 枚举

</member>
        <member name="F:StateEditingUnfocused">
@brief 编辑状态 但地图在焦点外

</member>
        <member name="F:StateEditing">
@brief 编辑状态

</member>
        <member name="F:StateNotEditing">
@brief 未编辑状态

</member>
        <member name="F:SysCarto.IEditEvents.OnAbortEditOperation">
@brief  涓缂栬緫鎿嶄綔淇″彿

</member>
        <member name="F:SysCarto.IEditEvents.OnStopEditOperation">
@brief  鍋滄缂栬緫鎿嶄綔淇″彿

</member>
        <member name="F:SysCarto.IEditEvents.OnStartEditOperation">
@brief  寮€濮嬬紪杈戞搷浣滀俊鍙?

</member>
        <member name="F:SysCarto.IEditEvents.OnStopEditing">
@brief  鍋滄缂栬緫淇″彿

</member>
        <member name="F:SysCarto.IEditEvents.OnStartEditing">
@brief  寮€濮嬬紪杈戜俊鍙?

</member>
        <member name="T:SysCarto.IEditEvents">
@class IEditEvents
@brief 缂栬緫浜嬩欢

</member>
        <member name="F:SysCarto.IEditTrace.m_pLstTracePoint">
@brief 追踪点集合

</member>
        <member name="F:SysCarto.IEditTrace.m_pStartPoint">
@brief 开始点

</member>
        <member name="F:SysCarto.IEditTrace.m_bIsTraced">
@brief 是否追踪

</member>
        <member name="M:SysCarto.IEditTrace.GetSamePointCount(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算源几何节点集合和目的几何节点集合的相同点数量
@param [in] lstSrc        源几何节点集合
@param [in] ptrDstPoint   目标几何点
@return   int   点的数量

</member>
        <member name="M:SysCarto.IEditTrace.Difference(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算源几何节点集合和目的几何节点集合的差集
@param [in] src   源几何节点集合
@param [in] dst   目的几何节点集合
@return    void

</member>
        <member name="M:SysCarto.IEditTrace.Union(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算源几何节点集合和目的几何节点集合的并集
@param [in] src   源几何节点集合
@param [in] dst   目的几何节点集合
@return   void

</member>
        <member name="M:SysCarto.IEditTrace.Contains(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 源几何节点集合包含目的点的数量
@param [in] lstSrc        源几何节点集合
@param [in] ptrDstPoint   目标几何点
@return   int   点的数量

</member>
        <member name="M:SysCarto.IEditTrace.Contains(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含两节点之间的节点集合
@param [in] src   源几何节点集合
@param [in] dst   目的几何节点集合
@return   bool    是否包含

</member>
        <member name="M:SysCarto.IEditTrace.IsArrived(SysCarto.GeometryNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.GeometryNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  两节点是否可直接到达， 到达条件：1、两个Geometry相邻，2、两节点距离小于最大间隔距离
@param [in] src   源几何节点
@param [in] dst   目的几何节点
@return  bool   是否可以直接到达

</member>
        <member name="M:SysCarto.IEditTrace.GetGeometryNodeByPoint(SysGeometry.Point*)">
@brief   根据地图点获取节点， 取距地图点最近的Geometry对应的最近节点，如存在多个Geometry，则取最上图层中对应的Geometry
@param [in] pPoint   几何点对象
@return  GeometryNode   几何节点

</member>
        <member name="M:SysCarto.IEditTrace.GetSearchRadius(SysGeometry.Point*)">
@brief   获取查询半径
@param [in] pPoint   几何点
@return  double  查询半径

</member>
        <member name="M:SysCarto.IEditTrace.GetMinPointes(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;,System.Int32,System.Int32)">
@brief   获取点集合两点间的最小点集
@param [in] lstPointes   最新的点集合
@param [in] ptrGeometry  几何对象
@param [in] nSrcIndex    源索引
@param [in] nDstIndex    目的索引
@return  void

</member>
        <member name="M:SysCarto.IEditTrace.GetEditLayer">
@brief 获取编辑图层
@return  FeatureLayer*  编辑图层

</member>
        <member name="M:SysCarto.IEditTrace.GetMap">
@brief 获取地图Map
@return SysCarto::MapPtr   地图Map

</member>
        <member name="M:SysCarto.IEditTrace.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IEditTrace.Trace(SysGeometry.Point*)">
@brief 实时追踪调用
@param [in] ptrRealPoint 实时追踪地理点
@return void

</member>
        <member name="M:SysCarto.IEditTrace.SetTraceParameter(SysGeometry.Point*,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*)">
@brief 设置追踪参数
@param [in] ptrStartPoint 起始点
@param [in] ptrStartPoint 追踪结果列表
@return  void

</member>
        <member name="M:SysCarto.IEditTrace.SetTraced(System.Boolean)">
@brief 设置追踪状态
@param [in] bIsTraced 是否开始追踪
@return void

</member>
        <member name="M:SysCarto.IEditTrace.IsTraced">
@brief  获取追踪状态
@return bool  是否追踪

</member>
        <member name="M:SysCarto.IEditTrace.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IEditTrace">
@class IEditTrace
@brief 编辑追踪接口

</member>
        <member name="M:SysCarto.GeometryNode.GetGeometry">
@brief  获取几何对象
@return  SysGeometry::GeometryPtr   几何对象

</member>
        <member name="M:SysCarto.GeometryNode.GetNodeIndex">
@brief  获取节点索引
@return  int   节点索引

</member>
        <member name="M:SysCarto.GeometryNode.GetGeometryIndex">
@brief  获取几何索引
@return  int   几何索引

</member>
        <member name="M:SysCarto.GeometryNode.GetFeature">
@brief  获取矢量要素
@return  SysCarto::FeaturePtr   矢量要素

</member>
        <member name="M:SysCarto.GeometryNode.GetFeatureLayer">
@brief  获取要素图层
@return  SysCarto::FeatureLayerPtr   要素图层

</member>
        <member name="M:SysCarto.GeometryNode.op_Equality(SysCarto.GeometryNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数 重载相等“==”操作符
@param  [in] node   几何节点
@return bool 是否相等

</member>
        <member name="M:SysCarto.GeometryNode.op_Assign(SysCarto.GeometryNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数 重载等号“=”操作符
@param [in] node   几何节点

</member>
        <member name="M:SysCarto.GeometryNode.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureLayer&gt;!System.Runtime.CompilerServices.IsConst,SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst,System.Int32,System.Int32)">
@brief  构造函数
@param [in] ptrFeatureLayer   要素图层
@param [in] ptrFeature        矢量要素
@param [in] nGeometryIndex    几何索引
@param [in] nNodeIndex        节点索引

</member>
        <member name="F:SysCarto.GeometryNode.m_nNodeIndex">
@brief  节点索引

</member>
        <member name="F:SysCarto.GeometryNode.m_nGeometryIndex">
@brief  几何索引

</member>
        <member name="F:SysCarto.GeometryNode.m_ptrFeature">
@brief  矢量要素

</member>
        <member name="F:SysCarto.GeometryNode.m_ptrFeatureLayer">
@brief  矢量要素图层

</member>
        <member name="T:SysCarto.GeometryNode">
@class GeometryNode
@brief 几何节点

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_SnapLayerName">
@brief 捕捉图层名称

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_isSnappingMidPoint">
@brief 中点

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_isSnappingPoint">
@brief 点

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_isSnappingEnd">
@brief 结尾点

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_isSnappingEdge">
@brief 边

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_isSnappingVertex">
@brief 端点

</member>
        <member name="F:SysCarto.ISnapEnviroment.m_dTolerance">
@brief 捕捉容差值

</member>
        <member name="M:SysCarto.ISnapEnviroment.FindPointInBoundary(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查找边界点
@param [in out] ptrQueryPoint   点对象
@param [in] ptrStartPoint   开始点
@param [in] ptrEndPoint     结束点
@param [in] OutPoint   输出点
@return    void

</member>
        <member name="M:SysCarto.ISnapEnviroment.CreateSnappInfo(SysGeometry.Point*,SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  创建捕捉信息
@param [in] point    几何点
@param [in] ptrMap   地图
@param [in] outPtrSnapGeo  捕捉几何
@param [in] outPtrTextGeo  文本几何
@return  bool  是否成功

</member>
        <member name="M:SysCarto.ISnapEnviroment.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnappingMidPoint(System.Boolean)">
@brief  设置捕捉中间点 
@param [in] b   是否捕捉
@return  void

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnappingPoint(System.Boolean)">
@brief  设置捕捉点
@param [in] b   是否捕捉
@return  void

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnappingEnd(System.Boolean)">
@brief  设置捕捉结束点 
@param [in] b   是否捕捉
@return  void

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnappingEdge(System.Boolean)">
@brief  设置捕捉边缘点 
@param [in] b   是否捕捉
@return  void

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnappingVertex(System.Boolean)">
@brief  设置捕捉节点
@param [in] b   是否捕捉
@return  void

</member>
        <member name="M:SysCarto.ISnapEnviroment.DrawSnapping(SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘图捕捉
@param [in] point   点
@return void  

</member>
        <member name="M:SysCarto.ISnapEnviroment.SnapPoint(SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取捕捉点是否成功 
@param [in] inPoint   内点
@param [in] OutPoint  外点
@return bool  是否成功

</member>
        <member name="M:SysCarto.ISnapEnviroment.SetSnapTolerance(System.Double)">
@brief 设置捕捉容差 
@param [in] dTolerance  捕捉容差值
@return void

</member>
        <member name="M:SysCarto.ISnapEnviroment.GetSnapTolerance">
@brief 获取捕捉容差 
@return double 容差值

</member>
        <member name="M:SysCarto.ISnapEnviroment.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.ISnapEnviroment">
@class  ISnapEnviroment
@brief  捕捉环境设置接口

</member>
        <member name="F:SysCarto.IEditSketch.m_ptrEditFeature">
@brief 编辑要素

</member>
        <member name="M:SysCarto.IEditSketch.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IEditSketch.GetEditFeature">
@brief 获取编辑要素
@return  SysDataSource::FeaturePtr  编辑要素

</member>
        <member name="M:SysCarto.IEditSketch.SetEditFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 设置编辑要素
@param [in] ptrEditFeature     编辑要素
@return  void

</member>
        <member name="M:SysCarto.IEditSketch.RefreshSketch(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新草图
@param [in] painter       绘图设备
@param [in] ptrTransform  显示转换
@return  void

</member>
        <member name="M:SysCarto.IEditSketch.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IEditSketch">
@class IEditSketch
@brief 编辑草图接口

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrTraceSymbol">
@brief  追踪点符号

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrSnapTextSymbol">
@brief  捕捉文本符号

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrSnapLineSymbol">
@brief  捕捉点符号

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrSketchVertexSymbol">
@brief  草图节点符号

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrSketchSymbol">
@brief  草图符号

</member>
        <member name="F:SysCarto.IEditProperties.m_ptrSelectedVertexSymbol">
@brief  已选择节点符号

</member>
        <member name="M:SysCarto.IEditProperties.SetTraceSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置追踪点符号
@param [in] ptrSymbol 追踪点符号对象
@return  void

</member>
        <member name="M:SysCarto.IEditProperties.GetTraceSymbol">
@brief 获取追踪点符号
@return  SysDisplay::MarkerSymbolPtr 追踪点符号对象

</member>
        <member name="M:SysCarto.IEditProperties.SetSnapTextSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置捕捉文本符号
@param [in] ptrSymbol 捕捉文本符号对象
@return void

</member>
        <member name="M:SysCarto.IEditProperties.GetSnapTextSymbol(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取捕捉文本符号
@return SysDisplay::TextSymbolPtr 捕捉文本符号对象

</member>
        <member name="M:SysCarto.IEditProperties.SetSnapSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置捕捉点符号
@param [in] ptrSymbol 捕捉点符号对象
@return void 

</member>
        <member name="M:SysCarto.IEditProperties.GetSnapSymbol">
@brief  获取捕捉点符号
@return SysDisplay::LineSymbolPtr  捕捉点符号对象

</member>
        <member name="M:SysCarto.IEditProperties.SetSketchVertexSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置草图节点符号
@param [in] ptrSymbol 草图节点符号对象
@return void 

</member>
        <member name="M:SysCarto.IEditProperties.GetSketchVertexSymbol">
@brief 获取草图节点符号
@return  SysDisplay::MarkerSymbolPtr  草图节点符号对象

</member>
        <member name="M:SysCarto.IEditProperties.SetSketchSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置草图符号
@param [in] ptrSymbol 草图符号对象
@return void 

</member>
        <member name="M:SysCarto.IEditProperties.GetSketchSymbol">
@brief 获取草图符号
@return  SysDisplay::LineSymbolPtr 草图符号对象

</member>
        <member name="M:SysCarto.IEditProperties.SetSelectedVertexSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置已选择节点符号
@param [in] ptrSymbol 已选择节点符号对象
@return void 

</member>
        <member name="M:SysCarto.IEditProperties.GetSelectedVertexSymbol">
@brief 获取已选择节点符号
@return  SysDisplay::MarkerSymbolPtr 已选择节点符号对象

</member>
        <member name="T:SysCarto.IEditProperties">
@class IEditProperties
@brief 编辑器属性接口

</member>
        <member name="F:SysCarto.IEditLayers.m_pEditLayer">
@brief 当前矢量要素图层

</member>
        <member name="M:SysCarto.IEditLayers.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IEditLayers.SetEditLayer(SysCarto.FeatureLayer*)">
@brief  设置编辑图层
@param [in] pLayer 要素图层
@return void

</member>
        <member name="M:SysCarto.IEditLayers.GetEditLayer">
@brief 获取编辑图层
@return FeatureLayer 要素图层

</member>
        <member name="M:SysCarto.IEditLayers.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IEditLayers">
@class IEditLayers
@brief 编辑图层接口

</member>
        <member name="D:SysUI.IOperationStackPtr">
@brief 操作堆栈类智能指针

</member>
        <member name="F:SysUI.IOperationStack.m_listOpts">
@brief 操作堆栈中操作对象栈

</member>
        <member name="F:SysUI.IOperationStack.m_nCurrIndex">
@brief 操作堆栈中当前操作对象索引

</member>
        <member name="M:SysUI.IOperationStack.Dispose">
@brief 虚析构函数
@return

</member>
        <member name="M:SysUI.IOperationStack.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysUI.IOperationStack.Reset">
@brief 重置
@return

</member>
        <member name="M:SysUI.IOperationStack.GetCount">
@brief 获取操作数量
@return  操作数量

</member>
        <member name="M:SysUI.IOperationStack.Undo">
@brief 回退
@return

</member>
        <member name="M:SysUI.IOperationStack.Redo">
@brief 重做
@return

</member>
        <member name="M:SysUI.IOperationStack.CanUndo">
@brief 是否可以回退
@return  成功 true,失败 false

</member>
        <member name="M:SysUI.IOperationStack.CanRedo">
@brief 是否可以重做
@return 成功 true,失败  false

</member>
        <member name="M:SysUI.IOperationStack.GetUndoOperation">
@brief 获取上一步操作对象
@return IOperationPtr 操作对象

</member>
        <member name="M:SysUI.IOperationStack.GetRedoOperation">
@brief 获取下一步操作对象
@return IOperationPtr 操作对象

</member>
        <member name="M:SysUI.IOperationStack.GetOperation(System.Int32)">
@brief 根据索引获取操作对象
@param [in] index 操作索引
@return IOperationPtr 操作对象

</member>
        <member name="M:SysUI.IOperationStack.RemoveOperation(SysUtility._ptr_t&lt;SysUI.IOperation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 移除操作
@param [in] ptrOpt 操作对象
@return

</member>
        <member name="M:SysUI.IOperationStack.AddOperation(SysUtility._ptr_t&lt;SysUI.IOperation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加操作
@param [in] ptrOpt 操作对象
@return

</member>
        <member name="T:SysUI.IOperationStack">
@class IOperationStack
	* @brief 操作堆栈类

</member>
        <member name="D:SysUI.IOperationPtr">
@brief 操作基类智能指针

</member>
        <member name="F:SysUI.IOperation.m_bDone">
@brief 是否已经执行

</member>
        <member name="F:SysUI.IOperation.m_strDescription">
@brief 描述信息

</member>
        <member name="M:SysUI.IOperation.Dispose">
@brief 虚析构函数
@return

</member>
        <member name="M:SysUI.IOperation.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysUI.IOperation.GetDescription">
@brief 获得描述信息
@return 描述信息

</member>
        <member name="M:SysUI.IOperation.Undo">
@brief 回退
@return

</member>
        <member name="M:SysUI.IOperation.Redo">
@brief 重做
@return

</member>
        <member name="M:SysUI.IOperation.Do">
@brief 执行
@return

</member>
        <member name="M:SysUI.IOperation.CanUndo">
@brief 是否可以回退
@return   是 true,否 false

</member>
        <member name="M:SysUI.IOperation.CanRedo">
@brief 是否可以重做
@return  是 true,否 false

</member>
        <member name="T:SysUI.IOperation">
@class IOperation
	* @brief  操作基类

</member>
        <member name="M:PIE.Carto.RasterLayer.set_Render(PIE.Carto.IRasterRender)">
            <summary>
获取或者设置栅格渲染
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.get_Render">
            <summary>
获取栅格渲染
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.set_Dataset(PIE.DataSource.IRasterDataset)">
            <summary>
设置数据集
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.get_Dataset">
            <summary>
获取数据集
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.set_Expanded(System.Boolean)">
            <summary>
设置是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.get_Expanded">
            <summary>
获取是否展开图层
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.get_LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="F:PIE.Carto.MapSurroundFrame.m_pSubCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.#ctor(SysUtility._ptr_t&lt;SysCarto.MapSurroundFrame&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.MapSurroundFrame.Shadow">
            <summary>
阴影
</summary>
        </member>
        <member name="P:PIE.Carto.MapSurroundFrame.Border">
            <summary>
边界
</summary>
        </member>
        <member name="P:PIE.Carto.MapSurroundFrame.Background">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.Clone">
            <summary>
克隆要素
</summary>
            <returns>Element对象</returns>
            <summary>
克隆要素
</summary>
            <returns>Element对象</returns>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">目标点</param>
            <param name="sx">x方向比例</param>
            <param name="sy">y方向比例</param>
            <returns>是否成功</returns>
            <summary>
缩放
</summary>
            <param name="originPoint">目标点</param>
            <param name="sx">x方向比例</param>
            <param name="sy">y方向比例</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
查询外接多边形
</summary>
            <param name="ptrTrasform">转换对象</param>
            <returns>多边形对象</returns>
            <summary>
查询外接多边形
</summary>
            <param name="ptrTrasform">转换对象</param>
            <returns>多边形对象</returns>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.SystemUI.ITrackerCancel!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
        </member>
        <member name="P:PIE.Carto.MapSurroundFrame.MapSurround">
            <summary>
获取或设置MapSurround
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurroundFrame.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MapSurroundFrame">
            <summary>
MapSurroundFrame类
</summary>
        </member>
        <member name="M:PIE.Carto.IMapSurroundFrame.Clone">
            <summary>
克隆要素
</summary>
            <returns>Element对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapSurroundFrame.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放</param>
            <param name="sy">y方向缩放</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IMapSurroundFrame.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
查询外接多边形
</summary>
            <param name="ptrTrasform">转换对象</param>
            <returns>多边形对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapSurroundFrame.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.SystemUI.ITrackerCancel!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
        </member>
        <member name="P:PIE.Carto.IMapSurroundFrame.MapSurround">
            <summary>
获取或设置MapSurround
</summary>
        </member>
        <member name="T:PIE.Carto.IMapSurroundFrame">
            <summary>
IMapSurroundFrame接口
</summary>
        </member>
        <member name="D:SysCarto.MapSurroundFramePtr">
@brief  地图围绕框架类 智能指针对象

</member>
        <member name="F:SysCarto.MapSurroundFrame.m_ptrMapSurround">
@brief 地图围绕框架对象指针

</member>
        <member name="M:SysCarto.MapSurroundFrame.CopyTo(SysCarto.MapSurroundFrame*)">
@brief 拷贝到MapSurroundFrame
@param [in] MapSurroundFrame* pMapSurroundFrame 地图围绕框架对象
return void

</member>
        <member name="M:SysCarto.MapSurroundFrame.Clone">
@brief 克隆
@return ElementPtr 元素对象

</member>
        <member name="M:SysCarto.MapSurroundFrame.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] originPoint 参照点 
@param [in] sx  x方向缩放 
@param [in] sy  y方向缩放 
@return bool  是否成功

</member>
        <member name="M:SysCarto.MapSurroundFrame.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形 
@param [in] ptrTrasform 显示转换对象
@return  SysGeometry::EnvelopePtr 外接多边形 

</member>
        <member name="M:SysCarto.MapSurroundFrame.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MapSurroundFrame.GetMapSurround">
@brief 获取地图围绕
@return  MapSurroundPtr  地图围绕

</member>
        <member name="M:SysCarto.MapSurroundFrame.SetMapSurround(SysUtility._ptr_t&lt;SysCarto.MapSurround&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地图围绕
@param [in] ptrMapSurround  地图围绕
@return  void

</member>
        <member name="M:SysCarto.MapSurroundFrame.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MapSurroundFrame.#ctor">
@brief 构造函数

</member>
        <member name="F:PIE.Carto.CustomerOnlineTiledLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.CustomerOnlineTiledLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.Initialize">
            <summary>
初始化
</summary>
            <summary>
初始化
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerOnlineTiledLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CustomerOnlineTiledLayer">
            <summary>
定制在线地图图层对象
</summary>
        </member>
        <member name="M:PIE.Carto.ICustomerOnlineTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="M:PIE.Carto.ICustomerOnlineTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
        </member>
        <member name="M:PIE.Carto.ICustomerOnlineTiledLayer.Initialize">
            <summary>
初始化
</summary>
        </member>
        <member name="T:PIE.Carto.ICustomerOnlineTiledLayer">
            <summary>
定制在线地图图层对象接口
</summary>
        </member>
        <member name="D:SysCarto.CustomerOnlineTiledLayerPtr">
@brief 线上用户瓦片图层 智能指针对象

</member>
        <member name="F:SysCarto.CustomerOnlineTiledLayer.m_hostList">
@brief  HostList集合

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象
@return void 

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.GetHostList">
@brief 获取HostList
@return hostList 集合

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.SetHostList(QList&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置HostList
@param [in] hostList 集合
@return  void 

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief 获取瓦片数据uri
@param [in] level 级别
@param [in] row 行
@param [in] col 列
@return QString   uri

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.Initialize">
@brief 初始化
@return void

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.CustomerOnlineTiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri  统一资源标识符

</member>
        <member name="T:SysCarto.CustomerOnlineTiledLayer">
@class CustomerOnlineTiledLayer
	* @brief  线上用户瓦片图层

</member>
        <member name="F:PIE.Carto.BingMapsTiledLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.BingMapsTiledLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.BingMapsTiledLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.BingMapsTiledLayer">
            <summary>
Bing路线图图层对象
</summary>
        </member>
        <member name="M:PIE.Carto.IBingMapsTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="T:PIE.Carto.IBingMapsTiledLayer">
            <summary>
Bing路线图对象接口
</summary>
        </member>
        <member name="D:SysCarto.BingMapsTiledLayerPtr">
@brief   必应瓦片地图图层  智能指针对象

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.TileXYToQuadKey(System.Int32,System.Int32,System.Int32)">
@brief 瓦片图层XY值转化为请求URL的键值
@param [in] tileX 瓦片地图X值
@param [in] tileY 瓦片地图X值
@param [in] levelOfDetail 细节级别
@return QString 获取的Url键值

</member>
        <member name="F:SysCarto.BingMapsTiledLayer.m_hostList">
@brief HostList对象集合

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief 获取Uri
@param [in] level 级别
@param [in] row 行索引
@param [in] col 列索引
@return QString 获取的Uri

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.Initialize">
@brief 初始化
@return void

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象
@return void 

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.GetHostList">
@brief 获取HostList
@return hostList对象集合

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.SetHostList(QList&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置HostList 
@param [in] hostList  hostList对象集合
@return void

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.BingMapsTiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri  统一资源标识符

</member>
        <member name="T:SysCarto.BingMapsTiledLayer">
@class BingMapsTiledLayer
	* @brief  必应瓦片地图图层

</member>
        <member name="F:PIE.Carto.ArcGISImageTiledLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageTiledLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.ArcGISImageTiledLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageTiledLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ArcGISImageTiledLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageTiledLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISImageTiledLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ArcGISImageTiledLayer">
            <summary>
ArcGIS服务图层对象
</summary>
        </member>
        <member name="T:PIE.Carto.IArcGISImageTiledLayer">
            <summary>
ArcGIS服务图层对象接口
</summary>
        </member>
        <member name="F:PIE.Carto.TDTTiledLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.TDTTiledLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.TDTTiledLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.TDTTiledLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.TDTTiledLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TDTTiledLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TDTTiledLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.TDTTiledLayer">
            <summary>
天地图图层对象
</summary>
        </member>
        <member name="P:PIE.Carto.ITDTTiledLayer.TType">
            <summary>
获取或设置数据类型
</summary>
        </member>
        <member name="T:PIE.Carto.ITDTTiledLayer">
            <summary>
天地图图层对象接口
</summary>
        </member>
        <member name="T:PIE.Carto.TileType">
            <summary>
瓦块数据类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TileCia">
            <summary>
天地图影像注记
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TileImg">
            <summary>
天地图影像底图
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TileCva">
            <summary>
天地图矢量注记
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TileVec">
            <summary>
天地图矢量底图
</summary>
        </member>
        <member name="D:SysCarto.TDTTiledLayerPtr">
@brief  天地图影像图层  智能指针

</member>
        <member name="F:SysCarto.TDTTiledLayer.m_TDTTiledType">
@brief  天地图影像类型

</member>
        <member name="M:SysCarto.TDTTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief 设置瓦片数据uri
@param [in] level 级别 
@param [in] row   行索引 
@param [in] col   列索引 
@return  QString  瓦片数据uri

</member>
        <member name="M:SysCarto.TDTTiledLayer.Initialize">
@brief 初始化
@return  void

</member>
        <member name="M:SysCarto.TDTTiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.TDTTiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.TDTTiledLayer.SetTDTTiledType(SysCarto.TDTTiledType)">
@brief 设置天地图影像类型
@param [in] tileType   天地图影像类型
@return  void

</member>
        <member name="M:SysCarto.TDTTiledLayer.GetTDTTiledType">
@brief 获取天地图影像类型
@return  TDTTiledType  天地图影像图层

</member>
        <member name="M:SysCarto.TDTTiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TDTTiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri  统一资源标识符

</member>
        <member name="T:SysCarto.TDTTiledLayer">
@class TDTTiledLayer
@brief 天地图影像图层

</member>
        <member name="T:SysCarto.TDTTiledType">
@class TDTTiledType
@brief 天地图影像类型 枚举

</member>
        <member name="F:TileCia">
@brief 天地图影像注记加载

</member>
        <member name="F:TileImg">
@brief 天地图影像底图加载

</member>
        <member name="F:TileCva">
@brief 天地图矢量注记加载

</member>
        <member name="F:TileVec">
@brief 天地图矢量底图加载

</member>
        <member name="F:PIE.Carto.ScrewElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.ScrewElement.#ctor(SysUtility._ptr_t&lt;SysCarto.ScrewElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ScrewElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.IsStandardScrew">
            <summary>
是否标准螺线
</summary>
            <returns>是否成功</returns>
            <summary>
是否标准螺线
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.ForceConstruct">
            <summary>
强制重新生成
</summary>
            <summary>
强制重新生成
</summary>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetRawPoints">
            <summary>
获取采集的点(地图坐标)
</summary>
            <returns>采集点集合</returns>
            <summary>
获取采集的点(地图坐标)
</summary>
            <returns>采集点集合</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetScrewAuxiliaryLineSum(System.Int32)">
            <summary>
设置辅助线条数
</summary>
            <param name="num">辅助线条数</param>
            <summary>
设置辅助线条数
</summary>
            <param name="num">辅助线条数</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewAuxiliaryLineSum">
            <summary>
获取辅助线条数
</summary>
            <returns>条数</returns>
            <summary>
获取辅助线条数
</summary>
            <returns>条数</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetScrewRotate(System.Double)">
            <summary>
设置旋转角度
</summary>
            <param name="angle">角度</param>
            <summary>
设置旋转角度
</summary>
            <param name="angle">角度</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewRotate">
            <summary>
获取旋转角度
</summary>
            <returns>角度</returns>
            <summary>
获取旋转角度
</summary>
            <returns>角度</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetScrewLeanAngel(System.Double)">
            <summary>
设置递倾斜度
</summary>
            <param name="angle">倾斜度</param>
            <summary>
设置递倾斜度
</summary>
            <param name="angle">倾斜度</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewLeanAngel">
            <summary>
获取倾斜度
</summary>
            <returns>倾斜度</returns>
            <summary>
获取倾斜度
</summary>
            <returns>倾斜度</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetScrewArc(System.Double)">
            <summary>
设置弧度
</summary>
            <param name="arc">弧度</param>
            <summary>
设置弧度
</summary>
            <param name="arc">弧度</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewArc">
            <summary>
获取弧度
</summary>
            <returns>弧度</returns>
            <summary>
获取弧度
</summary>
            <returns>弧度</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetScrewBeginRadius(System.Double)">
            <summary>
设置初始半径
</summary>
            <param name="radius">初始半径</param>
            <summary>
设置初始半径
</summary>
            <param name="radius">初始半径</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewBeginRadius">
            <summary>
获取初始半径
</summary>
            <returns>半径</returns>
            <summary>
获取初始半径
</summary>
            <returns>半径</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.SetCenterPoint(PIE.Geometry.IPoint)">
            <summary>
设置螺旋线在地图上中心点
</summary>
            <param name="point">中心点</param>
            <summary>
设置螺旋线在地图上中心点
</summary>
            <param name="point">中心点</param>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetCenterPoint">
            <summary>
获取螺旋线在地图上中心点
</summary>
            <returns>中心点</returns>
            <summary>
获取螺旋线在地图上中心点
</summary>
            <returns>中心点</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetAuxiliaryLineElement">
            <summary>
获取辅助线
</summary>
            <returns>辅助线</returns>
            <summary>
获取辅助线
</summary>
            <returns>辅助线</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GetScrewElement">
            <summary>
获取螺旋线
</summary>
            <returns>螺旋线</returns>
            <summary>
获取螺旋线
</summary>
            <returns>螺旋线</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.UpdateScrewElement(System.Double,System.Double,System.Double,System.Double,System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据参数更新图形
</summary>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">递增频率    0 ~ 1</param>
            <param name="rotateAngle">旋转角度  -360 ~ 360</param>
            <param name="arc">弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
            <summary>
根据参数更新图形
</summary>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">递增频率    0 ~ 1</param>
            <param name="rotateAngle">旋转角度  -360 ~ 360</param>
            <param name="arc">弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GenerateScrewElementByPoints(PIE.Display.IDisplayTransformation,System.Collections.Generic.IList`1{PIE.Geometry.IPoint},System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据点生成螺线(只支持逆时针采点)
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="points">地图输入点集合</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
            <summary>
根据点生成螺线(只支持逆时针采点)
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="points">地图输入点集合（count &gt; 2 第一个点为中心点）</param>
            <param name="invalidPtsIndx">无效点索引</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.GenerateScrewElementByParam(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double,System.Double,System.Double,System.Double,System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据参数生成螺旋线                                                           
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="centerPoint">中心点</param>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">螺线倾斜度  -60 ~ 60</param>
            <param name="rotateAngle">旋转角度    -360 ~ 360</param>
            <param name="arc"> 弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
            <summary>
根据参数生成螺旋线                                                           
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="centerPoint">中心点</param>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">螺线倾斜度  -60 ~ 60</param>
            <param name="rotateAngle">旋转角度    -360 ~ 360</param>
            <param name="arc"> 弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.ScrewElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ScrewElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ScrewElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ScrewElement">
            <summary>
ScrewElement文本元素类
</summary>
        </member>
        <member name="M:PIE.Carto.IScrewElement.IsStandardScrew">
            <summary>
是否标准螺线
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.ForceConstruct">
            <summary>
强制重新生成
</summary>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetRawPoints">
            <summary>
获取采集的点(地图坐标)
</summary>
            <returns>采集点集合</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetScrewAuxiliaryLineSum(System.Int32)">
            <summary>
设置辅助线条数
</summary>
            <param name="num">辅助线条数</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewAuxiliaryLineSum">
            <summary>
获取辅助线条数
</summary>
            <returns>条数</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetScrewRotate(System.Double)">
            <summary>
设置旋转角度
</summary>
            <param name="angle">角度</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewRotate">
            <summary>
获取旋转角度
</summary>
            <returns>角度</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetScrewLeanAngel(System.Double)">
            <summary>
设置递倾斜度
</summary>
            <param name="angle">倾斜度</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewLeanAngel">
            <summary>
获取倾斜度
</summary>
            <returns>倾斜度</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetScrewArc(System.Double)">
            <summary>
设置弧度
</summary>
            <param name="arc">弧度</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewArc">
            <summary>
获取弧度
</summary>
            <returns>弧度</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetScrewBeginRadius(System.Double)">
            <summary>
设置初始半径
</summary>
            <param name="radius">初始半径</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewBeginRadius">
            <summary>
获取初始半径
</summary>
            <returns>半径</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.SetCenterPoint(PIE.Geometry.IPoint)">
            <summary>
设置螺旋线在地图上中心点
</summary>
            <param name="point">中心点</param>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetCenterPoint">
            <summary>
获取螺旋线在地图上中心点
</summary>
            <returns>中心点</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetAuxiliaryLineElement">
            <summary>
获取辅助线
</summary>
            <returns>辅助线</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GetScrewElement">
            <summary>
获取螺旋线
</summary>
            <returns>螺旋线</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.UpdateScrewElement(System.Double,System.Double,System.Double,System.Double,System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据参数更新图形
</summary>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">递增频率    0 ~ 1</param>
            <param name="rotateAngle">旋转角度  -360 ~ 360</param>
            <param name="arc">弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GenerateScrewElementByPoints(PIE.Display.IDisplayTransformation,System.Collections.Generic.IList`1{PIE.Geometry.IPoint},System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据点生成螺线(只支持逆时针采点)
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="points">地图输入点集合</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IScrewElement.GenerateScrewElementByParam(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double,System.Double,System.Double,System.Double,System.Int32,PIE.Display.ILineSymbol,PIE.Display.ILineSymbol)">
            <summary>
根据参数生成螺旋线                                                           
</summary>
            <param name="dT">DisplayTransformation</param>
            <param name="centerPoint">中心点</param>
            <param name="beginRadius">螺线起始半径</param>
            <param name="leanAngel">螺线倾斜度  -60 ~ 60</param>
            <param name="rotateAngle">旋转角度    -360 ~ 360</param>
            <param name="arc"> 弧度         0 ~ 1000</param>
            <param name="AuxiliaryLineSum">辅助线条数(推荐2)  0~9</param>
            <param name="auxiLineSymbol">辅助线符号（可为null）</param>
            <param name="screwLineSymbol">螺旋线符号（可为null）</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Carto.IScrewElement">
            <summary>
IScrewElement文本元素接口
</summary>
        </member>
        <member name="D:SysCarto.ScrewElementPtr">
@brief   螺旋线元素  智能指针对象

</member>
        <member name="F:SysCarto.ScrewElement.m_listElems">
@brief  元素列表

</member>
        <member name="M:SysCarto.ScrewElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象
@return

</member>
        <member name="M:SysCarto.ScrewElement.SetElementRotate(System.Double)">
@brief 设置元素旋转角度
@return void

</member>
        <member name="M:SysCarto.ScrewElement.ClearElements">
@brief 清空元素
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetElementCount">
@brief 获取元素数量
@return int  元素数量

</member>
        <member name="M:SysCarto.ScrewElement.GetElement(System.Int32)">
@brief 获取元素
@param [in] index 索引
@return ElementPtr  元素对象

</member>
        <member name="M:SysCarto.ScrewElement.DeleteElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] ptrElem 元素
@return void

</member>
        <member name="M:SysCarto.ScrewElement.AddElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素
@param [in] ptrElem 元素
@return void

</member>
        <member name="M:SysCarto.ScrewElement.CreateScrewLine(SysUtility._ptr_t&lt;SysGeometry.Polyline&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建螺旋线线

</member>
        <member name="M:SysCarto.ScrewElement.CreateAuxiLine(SysUtility._ptr_t&lt;SysGeometry.MultiPolyline&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建辅助线

</member>
        <member name="M:SysCarto.ScrewElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.ScrewElement.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.ScrewElement.GetGeometry">
@brief 获取几何对象
@return SysGeometry::GeometryPtr 几何对象

</member>
        <member name="M:SysCarto.ScrewElement.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] originPoint    参照点
@param [in] sx x方向缩放
@param [in] sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysCarto.ScrewElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] originPoint    参照点
@param [in] rotationAngle  旋转角度
@return bool 是否成功

</member>
        <member name="M:SysCarto.ScrewElement.Move(System.Double,System.Double)">
@brief 移动
@param [in] dx   x方向的偏移
@param [in] dy   y方向的偏移
@return void

</member>
        <member name="M:SysCarto.ScrewElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询外接多边形
@param [in] ptrTrasform  显示转换
@return  SysGeometry::EnvelopePtr  包络范围

</member>
        <member name="M:SysCarto.ScrewElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置螺旋线符号
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewLineSymbol">
@brief 设置螺旋线符号
@return SysDisplay::LineSymbolPtr

</member>
        <member name="M:SysCarto.ScrewElement.SetAuxiLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置辅助线符号
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetAuxiLineSymbol">
@brief 获得辅助线符号
@return SysDisplay::LineSymbolPtr

</member>
        <member name="M:SysCarto.ScrewElement.SetRawPoints(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置采集点
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetRawPoints(QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取采集的点
@return void

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewAuxiliaryLineSum(System.Int32)">
@brief 设置辅助线条数
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewAuxiliaryLineSum">
@brief 获取辅助线条数
@return 条数

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewRotate(System.Double)">
@brief 设置旋转角度
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewRotate">
@brief 获取旋转角度
@return 角度

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewLeanAngel(System.Double)">
@brief 设置递倾斜度
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewLeanAngel">
@brief 获取倾斜度
@return 倾斜度

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewArc(System.Double)">
@brief 设置弧度
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewArc">
@brief 获取弧度
@return 弧度

</member>
        <member name="M:SysCarto.ScrewElement.SetScrewBeginRadius(System.Double)">
@brief 设置初始半径
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewBeginRadius">
@brief 获取初始半径
@return 半径

</member>
        <member name="M:SysCarto.ScrewElement.SetCenterPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置螺旋线在地图上中心点
@return void

</member>
        <member name="M:SysCarto.ScrewElement.GetCenterPoint">
@brief 获取螺旋线在地图上中心点
@return SysGeometry::PointPtr

</member>
        <member name="M:SysCarto.ScrewElement.GetAuxiliaryLineElement">
@brief 获取辅助线
@return ElementPtr

</member>
        <member name="M:SysCarto.ScrewElement.GetScrewElement">
@brief 获取螺旋线
@return ElementPtr

</member>
        <member name="M:SysCarto.ScrewElement.UpdateScrewElement(System.Double,System.Double,System.Double,System.Double,System.Int32,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;)">
@brief 根据参数更新图形
@param [in] beginRadius        螺线起始半径 &gt; 0
@param [in] leanAngel          螺线倾斜度  -60 ~ 60
@param [in] rotateAngle        旋转角度    -360 ~ 360
@param [in] arc                弧度         0 ~ 1000
@param [in] AuxiliaryLineSum   辅助线条数   0~9
@param [in] auxiLineSymbol     辅助线符号
@param [in] screwLineSymbol    螺旋线符号
@return ElementPtr

</member>
        <member name="M:SysCarto.ScrewElement.GenerateScrewElementByPoints(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Point&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;)">
@brief 根据点生成螺线
@param [in]  ptrTrasform        DisplayTransformationPtr
@param [in]  points             地图输入点集合（count &gt; 3）
@param [in] AuxiliaryLineSum    辅助线条数  0~9
@param [in] auxiLineSymbol      辅助线符号
@param [in] screwLineSymbol     螺旋线符号
@return ElementPtr

</member>
        <member name="M:SysCarto.ScrewElement.GenerateScrewElementByParam(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Double,System.Double,System.Int32,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;,SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;)">
@brief 根据参数更新生成螺线
@param [in] ptrTrasform        DisplayTransformationPtr
@param [in] centerPtr          图形在地图上的坐标中心点
@param [in] beginRadius        螺线起始半径 &gt; 0
@param [in] leanAngel          螺线倾斜度  -60 ~ 60
@param [in] rotateAngle        旋转角度    -360 ~ 360
@param [in] arc                弧度         0 ~ 1000
@param [in] AuxiliaryLineSum   辅助线条数   0 ~9
@param [in] auxiLineSymbol     辅助线符号
@param [in] screwLineSymbol    螺旋线符号
@return ElementPtr

</member>
        <member name="M:SysCarto.ScrewElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ScrewElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.ScrewElement">
@class ScrewElement
@brief  螺旋线元素

</member>
        <member name="F:PIE.Carto.MapFrameElement.m_pSubCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.#ctor(SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.Carto.MapFrameElement.m_Map">
            <summary>
地图
</summary>
        </member>
        <member name="P:PIE.Carto.MapFrameElement.Shadow">
            <summary>
阴影
</summary>
        </member>
        <member name="P:PIE.Carto.MapFrameElement.Border">
            <summary>
边界
</summary>
        </member>
        <member name="P:PIE.Carto.MapFrameElement.Background">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.Clone">
            <summary>
克隆
</summary>
            <returns>元素对象</returns>
            <summary>
克隆
</summary>
            <returns>元素对象</returns>
        </member>
        <member name="P:PIE.Carto.MapFrameElement.Map">
            <summary>
Map
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制MapFrameElement
</summary>
            <param name="graphic">制图对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="ptrTracker">TrackerCancel控制对象</param>
            <summary>
绘制MapFrameElement
</summary>
            <param name="graphic">制图对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="ptrTracker">TrackerCancel控制对象</param>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MapFrameElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MapFrameElement">
            <summary>
MapFrameElement类
</summary>
        </member>
        <member name="F:PIE.Carto.TextElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.TextElement.#ctor(SysUtility._ptr_t&lt;SysCarto.TextElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.TextElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.TextElement.Symbol">
            <summary>
获取或设置文本符号
</summary>
        </member>
        <member name="P:PIE.Carto.TextElement.Text">
            <summary>
获取或设置文字
</summary>
        </member>
        <member name="M:PIE.Carto.TextElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TextElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TextElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.TextElement">
            <summary>
TextElement文本元素类
</summary>
        </member>
        <member name="P:PIE.Carto.ITextElement.Symbol">
            <summary>
获取或设置文本符号
</summary>
        </member>
        <member name="P:PIE.Carto.ITextElement.Text">
            <summary>
获取或设置文字
</summary>
        </member>
        <member name="T:PIE.Carto.ITextElement">
            <summary>
ITextElement文本元素接口
</summary>
        </member>
        <member name="D:SysCarto.TextElementPtr">
@brief  文本元素  智能指针

</member>
        <member name="M:SysCarto.TextElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象
@return  void

</member>
        <member name="F:SysCarto.TextElement.m_ptrSymbol">
@brief 文本符号

</member>
        <member name="F:SysCarto.TextElement.m_strText">
@brief 文本

</member>
        <member name="M:SysCarto.TextElement.Clone">
@brief 克隆
@return ElementPtr 克隆元素对象

</member>
        <member name="M:SysCarto.TextElement.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放 
@param [in] originPoint    参照点
@param [in] sx          x方向缩放 
@param [in] sy          y方向缩放
@return  bool  是否成功

</member>
        <member name="M:SysCarto.TextElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转 
@param [in] originPoint    参照点 
@param [in] rotationAngle  旋转角度 
@return  bool  是否成功

</member>
        <member name="M:SysCarto.TextElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询边界
@param [in] ptrTransform  显示转换对象
@return  SysGeometry::EnvelopePtr   包络线范围对象

</member>
        <member name="M:SysCarto.TextElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol   符号
@return  void

</member>
        <member name="M:SysCarto.TextElement.GetSymbol">
@brief 获取符号
@return  SysDisplay::TextSymbolPtr  符号

</member>
        <member name="M:SysCarto.TextElement.SetText(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置文本
@param [in] strText   文本
@return  void

</member>
        <member name="M:SysCarto.TextElement.GetText">
@brief 获取文本
@return  QString  文本

</member>
        <member name="M:SysCarto.TextElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TextElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TextElement">
@class TextElement
@brief 文本元素

</member>
        <member name="F:PIE.Carto.CircleElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.CircleElement.#ctor(SysUtility._ptr_t&lt;SysCarto.CircleElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.CircleElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.CircleElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.CircleElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CircleElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CircleElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CircleElement">
            <summary>
CircleElement圆元素
</summary>
        </member>
        <member name="P:PIE.Carto.ICircleElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.ICircleElement">
            <summary>
ICircleElement圆元素接口
</summary>
        </member>
        <member name="D:SysCarto.CircleElementPtr">
@brief   圆元素  智能指针对象

</member>
        <member name="M:SysCarto.CircleElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.CircleElement.m_ptrSymbol">
@brief 符号

</member>
        <member name="M:SysCarto.CircleElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.CircleElement.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief  缩放 
@param [in] originPoint 参照点 
@param [in] sx x方向缩放(1表示大小不变，大于1放大，小于1缩小) 
@param [in] sy y方向缩放(1表示大小不变，大于1放大，小于1缩小) 
@return  bool  是否成功

</member>
        <member name="M:SysCarto.CircleElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.CircleElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol  填充符号
@return void

</member>
        <member name="M:SysCarto.CircleElement.GetSymbol">
@brief 获取符号
@return  填充符号

</member>
        <member name="M:SysCarto.CircleElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.CircleElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.CircleElement">
@class CircleElement
@brief 圆元素

</member>
        <member name="F:PIE.Carto.EllipseElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.EllipseElement.#ctor(SysUtility._ptr_t&lt;SysCarto.EllipseElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.EllipseElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.EllipseElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.EllipseElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.EllipseElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.EllipseElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.EllipseElement">
            <summary>
EllipseElement椭圆元素
</summary>
        </member>
        <member name="P:PIE.Carto.IEllipseElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.IEllipseElement">
            <summary>
IEllipseElement椭圆元素接口
</summary>
        </member>
        <member name="D:SysCarto.EllipseElementPtr">
@brief 椭圆元素 智能指针对象

</member>
        <member name="M:SysCarto.EllipseElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.EllipseElement.m_ptrSymbol">
@brief  填充符号

</member>
        <member name="M:SysCarto.EllipseElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.EllipseElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.EllipseElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief  旋转
@param  [in] originPoint   参照点 
@param  [in] rotationAngle 旋转角度 
@return bool  是否可以选装

</member>
        <member name="M:SysCarto.EllipseElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询边界
@param  [in] ptrTrasform 视图转换对象
@return SysGeometry::EnvelopePtr  包络线对象

</member>
        <member name="M:SysCarto.EllipseElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol 填充符号对象 
@return void

</member>
        <member name="M:SysCarto.EllipseElement.GetSymbol">
@brief 获取符号
@return SysDisplay::FillSymbolPtr  填充符号对象

</member>
        <member name="M:SysCarto.EllipseElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.EllipseElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.EllipseElement">
@class EllipseElement
@brief  椭圆元素

</member>
        <member name="F:PIE.Carto.PictureElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.#ctor(SysUtility._ptr_t&lt;SysCarto.PictureElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.PictureElement.SetImage(System.String)">
            <summary>
设置图片
</summary>
            <param name="strFile">图片路径</param>
            <summary>
设置图片
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.SetImage(System.Drawing.Image)">
            <summary>
设置图片
</summary>
            <param name="image">image对象</param>
            <summary>
设置图片
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.GetFilePath">
            <summary>
获取图片路径
</summary>
        </member>
        <member name="P:PIE.Carto.PictureElement.IsImageSaved">
            <summary>
获取或设置图片是否保存
</summary>
        </member>
        <member name="P:PIE.Carto.PictureElement.Image">
            <summary>
获取图片
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PictureElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.PictureElement">
            <summary>
PictureElement图片元素类
</summary>
        </member>
        <member name="M:PIE.Carto.IPictureElement.SetImage(System.String)">
            <summary>
设置图片
</summary>
            <param name="strFile">图片路径</param>
        </member>
        <member name="M:PIE.Carto.IPictureElement.SetImage(System.Drawing.Image)">
            <summary>
设置图片
</summary>
            <param name="image">image对象</param>
        </member>
        <member name="M:PIE.Carto.IPictureElement.GetFilePath">
            <summary>
获取图片路径
</summary>
        </member>
        <member name="P:PIE.Carto.IPictureElement.IsImageSaved">
            <summary>
获取或设置图片是否保存
</summary>
        </member>
        <member name="P:PIE.Carto.IPictureElement.Image">
            <summary>
获取图片
</summary>
        </member>
        <member name="T:PIE.Carto.IPictureElement">
            <summary>
IPictureElement图片元素接口
</summary>
        </member>
        <member name="D:SysCarto.PictureElementPtr">
@brief  图片元素  智能指针

</member>
        <member name="M:SysCarto.PictureElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param[in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.PictureElement.m_bImageSaved">
@brief 图片是否保存

</member>
        <member name="F:SysCarto.PictureElement.m_strFile">
@brief 文件

</member>
        <member name="F:SysCarto.PictureElement.m_image">
@brief 图片

</member>
        <member name="M:SysCarto.PictureElement.Clone">
@brief 克隆
@return ElementPtr 克隆元素对象

</member>
        <member name="M:SysCarto.PictureElement.GetFilePath">
@brief 获取文件路径
@return QString  文件路径

</member>
        <member name="M:SysCarto.PictureElement.SetImageSaved(System.Boolean)">
@brief 设置图片是否保存
@param [in] bSaved  是否保存
@return void

</member>
        <member name="M:SysCarto.PictureElement.IsImageSaved">
@brief 获取图片是否保存 
@return bool 是否保存 

</member>
        <member name="M:SysCarto.PictureElement.SetImage(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图片
@param [in] strFile  文件名称
@return void

</member>
        <member name="M:SysCarto.PictureElement.SetImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图片
@param [in] image  图片
@return void

</member>
        <member name="M:SysCarto.PictureElement.GetImage">
@brief 获取图片
@return QImage  图片

</member>
        <member name="M:SysCarto.PictureElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] originPoint 参照点 
@param [in] rotationAngle 旋转角度
@return bool  是否成功

</member>
        <member name="M:SysCarto.PictureElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.PictureElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询外接多边形
@param [in] ptrTrasform  显示转换对象
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.PictureElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.PictureElement.#ctor">
@brief  构造函数

</member>
        <member name="T:SysCarto.PictureElement">
@class PictureElement
@brief  图片元素

</member>
        <member name="F:PIE.Carto.PolygonElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.PolygonElement.#ctor(SysUtility._ptr_t&lt;SysCarto.PolygonElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.PolygonElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.PolygonElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.PolygonElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PolygonElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PolygonElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.PolygonElement">
            <summary>
PolygonElement面元素类
</summary>
        </member>
        <member name="F:PIE.Carto.CurveElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.CurveElement.#ctor(SysUtility._ptr_t&lt;SysCarto.CurveElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.CurveElement.Symbol">
            <summary>
获取或设置线符号LineSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.CurveElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.CurveElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CurveElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CurveElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CurveElement">
            <summary>
CurveElement曲线元素
</summary>
        </member>
        <member name="P:PIE.Carto.ICurveElement.Symbol">
            <summary>
获取或设置线符号LineSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.ICurveElement">
            <summary>
ICurveElement曲线元素接口
</summary>
        </member>
        <member name="D:SysCarto.CurveElementPtr">
@brief 曲线元素 智能指针对象

</member>
        <member name="M:SysCarto.CurveElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象
@return  void 

</member>
        <member name="F:SysCarto.CurveElement.m_ptrSymbol">
@brief 线符号标志

</member>
        <member name="M:SysCarto.CurveElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.CurveElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.CurveElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置符号标志
@param [in] ptrSymbol 线符号标志
@return void 

</member>
        <member name="M:SysCarto.CurveElement.GetSymbol">
@brief  获得符号标志
@return 线符号标志

</member>
        <member name="M:SysCarto.CurveElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.CurveElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.CurveElement">
@class CurveElement
	* @brief 曲线元素

</member>
        <member name="F:PIE.Carto.LineArrowElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.#ctor(SysUtility._ptr_t&lt;SysCarto.LineArrowElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.Clone">
            <summary>
克隆对象
</summary>
            <returns>返回Element对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="trasform">转换对象</param>
            <param name="tracker">TrackerCancel对象</param>
        </member>
        <member name="P:PIE.Carto.LineArrowElement.Width">
            <summary>
获取或设置箭头宽度
</summary>
        </member>
        <member name="P:PIE.Carto.LineArrowElement.Symbol">
            <summary>
获取或设置线符号ILineSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LineArrowElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.LineArrowElement">
            <summary>
线状箭头元素对象
</summary>
        </member>
        <member name="P:PIE.Carto.ILineArrowElement.Width">
            <summary>
获取或设置箭头宽度
</summary>
        </member>
        <member name="P:PIE.Carto.ILineArrowElement.Symbol">
            <summary>
获取或设置线符号ILineSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.ILineArrowElement">
            <summary>
ILineArrowElement箭头元素接口
</summary>
        </member>
        <member name="D:SysCarto.LineArrowElementPtr">
@brief  线状箭头元素 智能指针对象

</member>
        <member name="M:SysCarto.LineArrowElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element元素对象

</member>
        <member name="F:SysCarto.LineArrowElement.m_dWidth">
@brief  宽度

</member>
        <member name="F:SysCarto.LineArrowElement.m_ptrSymbol">
@brief  线状符号

</member>
        <member name="M:SysCarto.LineArrowElement.SetWidth(System.Double)">
@brief 设置宽度
@param [in] dWidth 宽度
@return  void

</member>
        <member name="M:SysCarto.LineArrowElement.GetWidth">
@brief   获取宽度
@return  double  宽度

</member>
        <member name="M:SysCarto.LineArrowElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.LineArrowElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter 绘图设备对象
@param [in] ptrTransform 显示转换对象
@param [in] ptrTrackerCancel  取消轨迹
@return  void

</member>
        <member name="M:SysCarto.LineArrowElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   设置线状符号
@param [in]  ptrSymbol   线状符号
@return  void

</member>
        <member name="M:SysCarto.LineArrowElement.GetSymbol">
@brief   获取线状符号
@return  SysDisplay::LineSymbolPtr 线状符号

</member>
        <member name="M:SysCarto.LineArrowElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.LineArrowElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.LineArrowElement">
@class LineArrowElement
@brief  线状箭头元素

</member>
        <member name="F:PIE.Carto.MarkerElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerElement.#ctor(SysUtility._ptr_t&lt;SysCarto.MarkerElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.MarkerElement.Symbol">
            <summary>
获取或设置点符号MarkerSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MarkerElement">
            <summary>
MarkerElement点元素类
</summary>
        </member>
        <member name="P:PIE.Carto.IMarkerElement.Symbol">
            <summary>
获取或设置点符号MarkerSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.IMarkerElement">
            <summary>
IMarkerElement点元素接口
</summary>
        </member>
        <member name="D:SysCarto.MarkerElementPtr">
@brief  标记元素 智能指针对象

</member>
        <member name="M:SysCarto.MarkerElement.CopyTo(SysCarto.Element*)">
@brief  拷贝到Element
@param [in] Element* ptrElement Element对象
@return  void 

</member>
        <member name="F:SysCarto.MarkerElement.m_ptrSymbol">
@brief  标记符号

</member>
        <member name="M:SysCarto.MarkerElement.Clone">
@brief  克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.MarkerElement.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] originPoint 参照点
@param [in] sx  x方向缩放
@param [in] sy  y方向缩放
@return bool  是否成功

</member>
        <member name="M:SysCarto.MarkerElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MarkerElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] originPoint    参照点
@param [in] rotationAngle  旋转角度 
@return  bool 是否成功

</member>
        <member name="M:SysCarto.MarkerElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrTrasform 显示转换对象
@return  SysGeometry::EnvelopePtr 外接多边形

</member>
        <member name="M:SysCarto.MarkerElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标记符号
@param [in] ptrSymbol 标记符号
@return void

</member>
        <member name="M:SysCarto.MarkerElement.GetSymbol">
@brief 获取标记符号
@return  SysDisplay::MarkerSymbolPtr 标记符号对象

</member>
        <member name="M:SysCarto.MarkerElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MarkerElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MarkerElement">
@class MarkerElement
@brief  标记元素

</member>
        <member name="F:PIE.Carto.RasterUniqueValueRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterUniqueValueRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.GetBandIndex">
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.SetBandIndex(System.Int32)">
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.DefaultColor">
            <summary>
获取或者设置默认颜色
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.SetLabel(System.Object,System.String)">
            <summary>
设置标签
</summary>
            <param name="value">Object值</param>
            <param name="strLabel">标签值</param>
            <summary>
设置标签
</summary>
            <param name="value">Object值</param>
            <param name="strLabel">标签值</param>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.GetLabel(System.Object)">
            <summary>
获取标签
</summary>
            <param name="value">Object值</param>
            <returns>Label值</returns>
            <summary>
获取标签
</summary>
            <param name="value">Object值</param>
            <returns>Label值</returns>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.DefaultLabel">
            <summary>
获取或者设置默认标签
</summary>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.LabelMap">
            <summary>
获取或者设置Label地图
</summary>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.UniqueValues">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.RasterUniqueValueRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterUniqueValueRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterUniqueValueRender">
            <summary>
栅格RasterUniqueValueRender渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterUniqueValueRender.GetBandIndex">
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
        </member>
        <member name="M:PIE.Carto.IRasterUniqueValueRender.SetBandIndex(System.Int32)">
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.DefaultColor">
            <summary>
获取或者设置默认颜色
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterUniqueValueRender.SetLabel(System.Object,System.String)">
            <summary>
设置标签
</summary>
            <param name="value">Object值</param>
            <param name="strLabel">标签值</param>
        </member>
        <member name="M:PIE.Carto.IRasterUniqueValueRender.GetLabel(System.Object)">
            <summary>
获取标签
</summary>
            <param name="value">Object值</param>
            <returns>Label值</returns>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.DefaultLabel">
            <summary>
获取或者设置默认标签
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.LabelMap">
            <summary>
获取或者设置Label地图
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.UniqueValues">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterUniqueValueRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterUniqueValueRender">
            <summary>
IRasterUniqueValueRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterUniqueValueRenderPtr">
@brief  栅格唯一值渲染   智能指针

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_colorDefault">
@brief  默认颜色

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_strDefaultLabel">
@brief  默认标签

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_mapLabel">
@brief  标签集合

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_ptrUniqueValues">
@brief  唯一值

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_vecColor">
@brief  颜色集合

</member>
        <member name="F:SysCarto.RasterUniqueValueRender.m_nBandIndex">
@brief  波段索引

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in] ptrDataset 栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.GetBandIndex">
@brief  获取波段索引
@return  int   波段索引

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetBandIndex(System.Int32)">
@brief  设置波段索引
@param  [in]  nBandIndex   波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.GetDefaultColor">
@brief 获取默认颜色
@return  QColor    颜色

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetDefaultColor(QColor)">
@brief 设置默认颜色
@param [in] color   颜色
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.GetLabel(QVariant)">
@brief 获取标签
@param [in] value   指定值
@return  QString    标签

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetLabel(QVariant,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标签
@param [in] value   指定值
@param [in] strLabel  标签
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.GetDefaultLabel">
@brief 获取默认标签
@return  QString  默认标签

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetDefaultLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认标签
@param [in] strLabel  标签
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetLabelMap(QMap&lt;QString,QVariant&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标签集合
@param [in] mapLabel  标签集合
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetUniqueValues(SysUtility._ptr_t&lt;SysCarto.UniqueValues&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置唯一值   
@param [in] values  唯一值
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.SetClassColors(QVector&lt;QColor&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置分类颜色
@param [in] vecColor 颜色集合
@return  void

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.GetColorRamp">
@brief 获取颜色带
@return   SysDisplay::IColorRampPtr  颜色带

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterUniqueValueRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterUniqueValueRender">
@class RasterUniqueValueRender
@brief 栅格唯一值渲染

</member>
        <member name="F:PIE.Carto.RasterClassifyColorRampRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterClassifyColorRampRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.GetBandIndex">
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.SetBandIndex(System.Int32)">
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.SetLabel(System.Int32,System.String)">
            <summary>
设置Label
</summary>
            <param name="index">索引</param>
            <param name="label">标签</param>
            <summary>
设置Label
</summary>
            <param name="index">索引</param>
            <param name="label">标签</param>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.GetLabel(System.Int32)">
            <summary>
获取标注信息
</summary>
            <param name="index">索引</param>
            <returns>标签纸</returns>
            <summary>
获取标注信息
</summary>
            <param name="index">索引</param>
            <returns>标签纸</returns>
        </member>
        <member name="P:PIE.Carto.RasterClassifyColorRampRender.Labels">
            <summary>
获取或者设置标注信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterClassifyColorRampRender.UniqueValues">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="P:PIE.Carto.RasterClassifyColorRampRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.RasterClassifyColorRampRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterClassifyColorRampRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterClassifyColorRampRender">
            <summary>
栅格ClassifyColorRamp渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterClassifyColorRampRender.GetBandIndex">
            <summary>
获取波段索引
</summary>
            <returns>波段索引值</returns>
        </member>
        <member name="M:PIE.Carto.IRasterClassifyColorRampRender.SetBandIndex(System.Int32)">
            <summary>
设置波段索引
</summary>
            <param name="nBandIndex">波段索引值</param>
        </member>
        <member name="M:PIE.Carto.IRasterClassifyColorRampRender.SetLabel(System.Int32,System.String)">
            <summary>
设置Label
</summary>
            <param name="index">索引</param>
            <param name="label">标签</param>
        </member>
        <member name="M:PIE.Carto.IRasterClassifyColorRampRender.GetLabel(System.Int32)">
            <summary>
获取标注信息
</summary>
            <param name="index">索引</param>
            <returns>标签纸</returns>
        </member>
        <member name="P:PIE.Carto.IRasterClassifyColorRampRender.Labels">
            <summary>
获取或者设置标注信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterClassifyColorRampRender.UniqueValues">
            <summary>
获取或者设置UniqueValues
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterClassifyColorRampRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterClassifyColorRampRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterClassifyColorRampRender">
            <summary>
IRasterClassifyColorRampRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterClassifyColorRampRenderPtr">
@brief 栅格分类颜色带渲染 智能指针

</member>
        <member name="F:SysCarto.RasterClassifyColorRampRender.m_ptrColorRamp">
@brief 颜色带。辅助数据，用于界面上显示当前的颜色带。

</member>
        <member name="F:SysCarto.RasterClassifyColorRampRender.m_vecColor">
@brief 颜色集合。所有绘制以m_vecColor为最终的绘制颜色

</member>
        <member name="F:SysCarto.RasterClassifyColorRampRender.m_ptrUniqueValues">
@brief 唯一值

</member>
        <member name="F:SysCarto.RasterClassifyColorRampRender.m_vecLabel">
@brief 颜色带

@brief 标签集合

</member>
        <member name="F:SysCarto.RasterClassifyColorRampRender.m_nBandIndex">
@brief 波段索引

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in]  ptrDataset   栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.GetBandIndex">
@brief 获取波段索引
@return  int 波段索引

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.SetBandIndex(System.Int32)">
@brief 设置波段索引
@param [in]  nBandIndex   波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.GetLabel(System.Int32)">
@brief 获取标签
@param [in]  nIndex   索引
@return   QString     标签

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.SetLabel(System.Int32,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标签
@param [in]  nIndex   索引
@param [in]  strLabel 标签
@return void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.SetLabels(QVector&lt;QString&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标签集
@param [in]  vecLabel 标签集合
@return void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.SetUniqueValues(SysUtility._ptr_t&lt;SysCarto.UniqueValues&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置唯一值
@param [in]  values 唯一值
@return void

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.GetDisplayColorRamp">
@brief 获取颜色带。用于界面上显示当前颜色带。
@return SysDisplay::IColorRampPtr 颜色带

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.SetDisplayColorRamp(SysUtility._ptr_t&lt;SysDisplay.IColorRamp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色带。只用于界面上显示当前颜色带。内部不会更新实际颜色。
@param [in] ptrColorRamp 
@return 

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.GetColorRamp">
@brief 获取颜色带
@return SysDisplay::IColorRampPtr 颜色带

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆对象

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterClassifyColorRampRender.#ctor">
@brief  构造函数

</member>
        <member name="T:SysCarto.RasterRenderSerializer">
@brief  声明栅格渲染序列化类为当前类的友元类


@brief 声明栅格渲染序列化类 为当前类的友元类

</member>
        <member name="T:SysCarto.RasterClassifyColorRampRender">
@class  RasterClassifyColorRampRender
@brief  栅格分类颜色带渲染

</member>
        <member name="F:PIE.Carto.RasterDiscreteColorRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterDiscreteColorRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.RasterDiscreteColorRender.ColorMap">
            <summary>
获取或者设置ColorMap信息
</summary>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterDiscreteColorRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterDiscreteColorRender">
            <summary>
栅格离散颜色渲染类
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDiscreteColorRender.ColorMap">
            <summary>
获取或者设置ColorMap信息
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterDiscreteColorRender">
            <summary>
IRasterDiscreteColorRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterDiscreteColorRenderPtr">
@brief 栅格离散颜色渲染类  智能指针对象

</member>
        <member name="F:SysCarto.RasterDiscreteColorRender.m_colorMap">
@brief   颜色集合

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.Draw(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] ptrDataset 栅格数据集
@param [in] paiter 绘图面板
@param [in] ptrTrans 显示转换对象
@param [in] dpType 绘制图层相应的类型
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.SetColorMap(QColormap*)">
@brief 设置ColorMap信息 
@param [in]  colorMap  ColorMap信息    
@return  void

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.GetColorMap">
@brief 获取ColorMap信息 
@return  QColormap*  返回ColorMap信息 

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterDiscreteColorRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterDiscreteColorRender">
@class RasterDiscreteColorRender
@brief 栅格离散颜色渲染类 

</member>
        <member name="T:SysCarto.CacheBlock">
@brief 类的前置声明

</member>
        <member name="F:PIE.Carto.CustomerPreRasterFilter.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.#ctor(SysUtility._ptr_t&lt;PIE.Carto.CustomPreRasterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.SetPreFilterFun(PIE.Carto.PreFilterFunCallback)">
            <summary>
设置前置过滤算法
</summary>
            <param name="fun">算法</param>
            <summary>
设置前置过滤算法
</summary>
            <param name="fun">算法</param>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.FilterExtent(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32)">
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
        </member>
        <member name="P:PIE.Carto.CustomerPreRasterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.CustomerPreRasterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.CustomerPreRasterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.CustomerPreRasterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerPreRasterFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CustomerPreRasterFilter">
            <summary>
自定义前置渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.ICustomerPreRasterFilter.SetPreFilterFun(PIE.Carto.PreFilterFunCallback)">
            <summary>
设置前置过滤算法
</summary>
            <param name="fun">算法</param>
        </member>
        <member name="T:PIE.Carto.ICustomerPreRasterFilter">
            <summary>
ICustomerPreRasterFilter接口
</summary>
        </member>
        <member name="T:PIE.Carto.PreFilterFunCallback">
            <summary>
进度条回调函数
</summary>
        </member>
        <member name="D:PIE.Carto.CustomPreRasterFilterPtr">
@brief  透明度前置过滤器 智能指针对象

</member>
        <member name="F:PIE.Carto.CustomPreRasterFilter.m_PreFilterFun">
@brief 前置过滤算法

</member>
        <member name="M:PIE.Carto.CustomPreRasterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤器
@param [in] memData      像素缓冲元数据
@param [in] pDataMask    数据模型
@param [in] ptrEnvelope  包络线范围
@return  void


@brief 过滤器
@param [in] memData      像素缓冲元数据
@param [in] pDataMask    数据模型
@param [in] ptrEnvelope  包络线范围
@return  void

</member>
        <member name="M:PIE.Carto.CustomPreRasterFilter.FilterExtent(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
@brief 过滤器扩展
@param [in] ptrDataset   栅格数据集
@param [in] ptrEnvelope  包络线范围
@param [in] nWidth       宽度
@param [in] nHeight      高度
@return  void


@brief 过滤器扩展
@param [in] ptrDataset   栅格数据集
@param [in] ptrEnvelope  包络线范围
@param [in] nWidth       宽度
@param [in] nHeight      高度
@return  void

</member>
        <member name="M:PIE.Carto.CustomPreRasterFilter.SetFilterFun(=FUNC:System.Boolean(System.Void*,System.Void*))">
@brief 设置前置过滤算法
@param [in] fun   前置过滤算法
@return 


@brief 设置前置过滤算法
@param [in] fun   前置过滤算法
@return

</member>
        <member name="M:PIE.Carto.CustomPreRasterFilter.Dispose">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomPreRasterFilter.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CustomPreRasterFilter">
            <summary>
自定义前置渲染器
</summary>
        </member>
        <member name="D:PIE.Carto.PreFilterFun">
@brief 设置前置过滤算法

</member>
        <member name="F:PIE.Carto.LutAfterFilter.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.#ctor(SysUtility._ptr_t&lt;SysCarto.LutAfterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="pRenderData">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="P:PIE.Carto.LutAfterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.LutAfterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.LutAfterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.LutAfterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.SetLut(System.Int32,System.Byte[])">
            <summary>
设置对照表
</summary>
            <summary>
设置对照表
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.GetLut(System.Int32)">
            <summary>
获取对照表
</summary>
            <summary>
获取对照表
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LutAfterFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ILutAfterFilter.SetLut(System.Int32,System.Byte[])">
            <summary>
设置对照表
</summary>
        </member>
        <member name="M:PIE.Carto.ILutAfterFilter.GetLut(System.Int32)">
            <summary>
获取对照表
</summary>
        </member>
        <member name="T:PIE.Carto.ILutAfterFilter">
            <summary>
ILutAfterFilter接口
</summary>
        </member>
        <member name="F:PIE.Carto.TransparentAfterFilter.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.#ctor(SysUtility._ptr_t&lt;SysCarto.TransparentAfterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="pRenderData">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="P:PIE.Carto.TransparentAfterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentAfterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentAfterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentAfterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentAfterFilter.FilterValue">
            <summary>
获取或设置过滤的颜色
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentAfterFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.ITransparentAfterFilter.FilterValue">
            <summary>
获取或设置过滤的颜色
</summary>
        </member>
        <member name="T:PIE.Carto.ITransparentAfterFilter">
            <summary>
ITransparentAfterFilter接口
</summary>
        </member>
        <member name="F:PIE.Carto.TransparentPreFilter.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.#ctor(SysUtility._ptr_t&lt;SysCarto.TransparentPreFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Carto.TransparentPreFilter.FilterValues">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.FilterExtent(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32)">
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
        </member>
        <member name="P:PIE.Carto.TransparentPreFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentPreFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentPreFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.TransparentPreFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.TransparentPreFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.TransparentPreFilter">
            <summary>
栅格渲染类
</summary>
        </member>
        <member name="P:PIE.Carto.ITransparentPreFilter.FilterValues">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="T:PIE.Carto.ITransparentPreFilter">
            <summary>
ITransParentPreFilter接口
</summary>
        </member>
        <member name="F:PIE.Carto.FilterValue.MaxValue">
            <summary>
最大值
</summary>
        </member>
        <member name="F:PIE.Carto.FilterValue.MinValue">
            <summary>
最小值
</summary>
        </member>
        <member name="T:PIE.Carto.FilterValue">
            <summary>
过滤值
</summary>
        </member>
        <member name="F:PIE.Carto.FeatureClassBreaksRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureClassBreaksRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.Clone">
            <summary>
克隆
</summary>
            <returns>IFeatureRender</returns>
            <summary>
克隆
</summary>
            <returns>IFeatureRender</returns>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
通过要素获取符号
</summary>
            <param name="ptrFeature">需要获取符号的要素</param>
            <returns>返回符号</returns>
            <summary>
通过要素获取符号
</summary>
            <param name="ptrFeature">需要获取符号的要素</param>
            <returns>返回符号</returns>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.SetSymbol(System.Int32,PIE.Display.ISymbol!System.Runtime.CompilerServices.IsConst)">
            <summary>
设置指定分级的符号
</summary>
            <param name="index">分级渲染的级别</param>
            <param name="ptrSymbol">指定分级的符号</param>
            <summary>
设置指定分级的符号
</summary>
            <param name="index">分级渲染的级别</param>
            <param name="ptrSymbol">指定分级的符号</param>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.GetSymbol(System.Int32)">
            <summary>
获取指定分级的符号
</summary>
            <param name="index">指定分级</param>
            <returns>返回符号</returns>
            <summary>
获取指定分级的符号
</summary>
            <param name="index">指定分级</param>
            <returns>返回符号</returns>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.SetLabel(System.Int32,System.String)">
            <summary>
设置指定级别的标签
</summary>
            <param name="index">指定分级</param>
            <param name="strLabel">标签</param>
            <summary>
设置指定级别的标签
</summary>
            <param name="index">指定分级</param>
            <param name="strLabel">标签</param>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.GetLabel(System.Int32)">
            <summary>
获取指定分级的标签
</summary>
            <param name="index">指定分级</param>
            <returns>返回标签</returns>
            <summary>
获取指定分级的标签
</summary>
            <param name="index">指定分级</param>
            <returns>返回标签</returns>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.SetDescription(System.Int32,System.String)">
            <summary>
设置指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <param name="strDesc">设置描述信息</param>
            <summary>
设置指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <param name="strDesc">设置描述信息</param>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.GetDescription(System.Int32)">
            <summary>
返回指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <returns>返回描述信息</returns>
            <summary>
返回指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <returns>返回描述信息</returns>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.SetBreak(System.Int32,System.Double)">
            <summary>
设置分级
</summary>
            <param name="index">设置分级级别</param>
            <param name="dValue">设置指定级别的值</param>
            <summary>
设置分级
</summary>
            <param name="index">设置分级级别</param>
            <param name="dValue">设置指定级别的值</param>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.GetBreak(System.Int32)">
            <summary>
返回指定级别的分级值
</summary>
            <param name="index">指定级别</param>
            <returns>返回分级值</returns>
            <summary>
返回指定级别的分级值
</summary>
            <param name="index">指定级别</param>
            <returns>返回分级值</returns>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.SortClassesAscending">
            <summary>
获取或设置分级是否升序排列
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.NormField">
            <summary>
获取或设置归一化字段
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.MinimumBreak">
            <summary>
获取或设置最小分级值
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.Field">
            <summary>
获取或设置分级字段
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.ClassCount">
            <summary>
获取或设置分级数量
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureClassBreaksRender.BackgroundSymbol">
            <summary>
获取或设置背景符号
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureClassBreaksRender.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureClassBreaksRender">
            <summary>
 矢量分级渲染器接口
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.Clone">
            <summary>
克隆
</summary>
            <returns>IFeatureRender</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
通过要素获取符号
</summary>
            <param name="ptrFeature">需要获取符号的要素</param>
            <returns>返回符号</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.SetSymbol(System.Int32,PIE.Display.ISymbol!System.Runtime.CompilerServices.IsConst)">
            <summary>
设置指定分级的符号
</summary>
            <param name="index">分级渲染的级别</param>
            <param name="ptrSymbol">指定分级的符号</param>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.GetSymbol(System.Int32)">
            <summary>
获取指定分级的符号
</summary>
            <param name="index">指定分级</param>
            <returns>返回符号</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.SetLabel(System.Int32,System.String)">
            <summary>
设置指定级别的标签
</summary>
            <param name="index">指定分级</param>
            <param name="strLabel">标签</param>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.GetLabel(System.Int32)">
            <summary>
获取指定分级的标签
</summary>
            <param name="index">指定分级</param>
            <returns>返回标签</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.SetDescription(System.Int32,System.String)">
            <summary>
设置指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <param name="strDesc">设置描述信息</param>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.GetDescription(System.Int32)">
            <summary>
返回指定分级的描述信息
</summary>
            <param name="index">指定分级</param>
            <returns>返回描述信息</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.SetBreak(System.Int32,System.Double)">
            <summary>
设置分级
</summary>
            <param name="index">设置分级级别</param>
            <param name="dValue">设置指定级别的值</param>
        </member>
        <member name="M:PIE.Carto.IFeatureClassBreaksRender.GetBreak(System.Int32)">
            <summary>
返回指定级别的分级值
</summary>
            <param name="index">指定级别</param>
            <returns>返回分级值</returns>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.SortClassesAscending">
            <summary>
获取或设置分级是否升序排列
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.NormField">
            <summary>
获取或设置归一化字段
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.MinimumBreak">
            <summary>
获取或设置最小分级值
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.Field">
            <summary>
获取或设置分级字段
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.ClassCount">
            <summary>
获取或设置分级数量
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureClassBreaksRender.BackgroundSymbol">
            <summary>
获取或设置背景符号
</summary>
        </member>
        <member name="T:PIE.Carto.IFeatureClassBreaksRender">
            <summary>
 矢量分级渲染器接口
</summary>
        </member>
        <member name="D:SysCarto.FeatureClassBreaksRenderPtr">
@brief 矢量分类渲染器智能指针

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_vecSymbol">
@brief  符号集合

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_bSortClassesAscending">
@brief  分级是否升序排列变量

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_strNormField">
@brief  归一化字段

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_dMinimumBreak">
@brief  最小分级值 

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_vecLabel">
@brief  指定分级的标签集合

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_strField">
@brief  渲染字段

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_vecDesc">
@brief  描述集合

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_vecBreak">
@brief  分级集合

</member>
        <member name="F:SysCarto.FeatureClassBreaksRender.m_ptrBackgroundSymbol">
@brief  背景符号样式

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.Clone">
@brief 克隆
@return 矢量渲染器对象

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  通过要素获取符号
@param [in] ptrFeature 要素
@return SysDisplay::SymbolPtr 符号

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetSymbol(System.Int32,SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置符号
@param [in] index  索引
@param [in] ptrSymbol 符号
@return void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetSymbol(System.Int32)">
@brief  获取符号
@param [in] index 索引
@return SysDisplay::SymbolPtr 符号

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetSortClassesAscending(System.Boolean)">
@brief  设置分级是否升序排列
@param [in] bAsc  是否升序排列
@return void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetSortClassesAscending">
@brief  获取分级是否升序排列
@return bool 是否升序排列

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetNormField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置归一化字段
@param [in] strFieldName  字段名称
@return void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetNormField">
@brief  获取归一化字段
@return QString 归一化字段

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetMinimumBreak(System.Double)">
@brief  设置最小分级值 
@param [in] minimumBreak  最小分级值
@return void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetMinimumBreak">
@brief  获取最小分级值 
@return double 最小分级值

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetLabel(System.Int32,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置指定分级的标签
@param [in] index  指定分级索引
@param [in] strLabel 标签
@return void 

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetLabel(System.Int32)">
@brief  获取指定分级的标签 
@param [in] index  指定分级索引
@return QString 标签 

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染字段
@param [in] strFieldName 渲染字段名称
@return  void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetField">
@brief  获取渲染字段
@return QString 渲染字段

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetDescription(System.Int32,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置描述
@param [in] index 索引
@param [in] strDesc 描述信息
@return  void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetDescription(System.Int32)">
@brief  获取描述
@param [in] index 索引
@return QString 描述

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetBreak(System.Int32,System.Double)">
@brief 设置分级
@param [in] index 索引
@param [in] dValue 值
@return  void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetBreak(System.Int32)">
@brief  获取分级
@param [in] index 索引
@return double 分级

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetClassCount(System.Int32)">
@brief 设置类数量
@param [in] count 类数量
@return  void

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.GetClassCount">
@brief  获取类数量
@return int 类数量

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.SetBackgroundSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置背景符号
@param [in] ptrSymbol 符号
@return  void 

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureClassBreaksRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.FeatureClassBreaksRender">
@class  FeatureClassBreaksRender
@brief  矢量分类渲染器

</member>
        <member name="F:PIE.Carto.FeatureUniqueValueRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureUniqueValueRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.RemoveAllValues">
            <summary>
移除所有值
</summary>
            <summary>
移除所有值
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetUseDefaultSymbol(System.Boolean)">
            <summary>
设置默认渲染
</summary>
            <param name="bIsUse">是否使用默认渲染</param>
            <summary>
设置默认渲染
</summary>
            <param name="bIsUse">是否使用默认渲染</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.IsUseDefaultSymbol">
            <summary>
是否使用默认渲染
</summary>
            <returns>是否成功</returns>
            <summary>
是否使用默认渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetSymbol(System.String,PIE.Display.ISymbol)">
            <summary>
设置渲染符号
</summary>
            <param name="value">值</param>
            <param name="symbol">渲染符号</param>
            <summary>
设置渲染符号
</summary>
            <param name="value">值</param>
            <param name="symbol">渲染符号</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetSymbolMap">
            <summary>
获得SymbolMap
</summary>
            <returns>渲染图</returns>
            <summary>
获得SymbolMap
</summary>
            <returns>渲染图</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetSymbol(System.String)">
            <summary>
获取渲染符号
</summary>
            <param name="value">渲染值</param>
            <returns>渲染</returns>
            <summary>
获取渲染符号
</summary>
            <param name="value">渲染值</param>
            <returns>渲染</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.RemoveValue(System.String)">
            <summary>
移除值
</summary>
            <param name="value">值</param>
            <summary>
移除值
</summary>
            <param name="value">值</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetLabel(System.String,System.String)">
            <summary>
设置字段显示值
</summary>
            <param name="value">字段值</param>
            <param name="strLabel">字段显示值</param>
            <summary>
设置字段显示值
</summary>
            <param name="value">字段值</param>
            <param name="strLabel">字段显示值</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetLabel(System.String)">
            <summary>
获取字段显示值
</summary>
            <param name="value">字段显示值</param>
            <returns>字段显示值</returns>
            <summary>
获取字段显示值
</summary>
            <param name="value">字段显示值</param>
            <returns>字段显示值</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetHeading(System.String,System.String)">
            <summary>
Heading信息
</summary>
            <param name="value">渲染值</param>
            <param name="strHeading">Heading信息</param>
            <summary>
Heading信息
</summary>
            <param name="value">渲染值</param>
            <param name="strHeading">Heading信息</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetHeading(System.String@)">
            <summary>
获取Heading信息
</summary>
            <param name="value">Heading信息</param>
            <returns>Heading信息</returns>
            <summary>
获取Heading信息
</summary>
            <param name="value">Heading信息</param>
            <returns>Heading信息</returns>
        </member>
        <member name="P:PIE.Carto.FeatureUniqueValueRender.FieldDelimiter">
            <summary>
获取或者设置渲染FieldDelimiter信息
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetFieldCount">
            <summary>
获取渲染字段个数
</summary>
            <returns>渲染字段个数</returns>
            <summary>
获取渲染字段个数
</summary>
            <returns>渲染字段个数</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetFields(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置渲染字段
</summary>
            <param name="fields">渲染字段</param>
            <summary>
设置渲染字段
</summary>
            <param name="fields">渲染字段</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetField(System.Int32)">
            <summary>
获取渲染字段
</summary>
            <param name="index">索引编号</param>
            <returns>渲染字段</returns>
            <summary>
获取渲染字段
</summary>
            <param name="index">索引编号</param>
            <returns>渲染字段</returns>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.SetDescription(System.String,System.String)">
            <summary>
设置渲染描述信息
</summary>
            <param name="strValue">值</param>
            <param name="strDesc">渲染描述值</param>
            <summary>
设置渲染描述信息
</summary>
            <param name="strValue">值</param>
            <param name="strDesc">渲染描述值</param>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.GetDescription(System.String@)">
            <summary>
获取渲染描述信息
</summary>
            <param name="strValue">渲染描述值</param>
            <returns>渲染描述值</returns>
            <summary>
获取渲染描述信息
</summary>
            <param name="strValue">渲染描述值</param>
            <returns>渲染描述值</returns>
        </member>
        <member name="P:PIE.Carto.FeatureUniqueValueRender.DefaultSymbol">
            <summary>
获取或者设置默认渲染符号
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureUniqueValueRender.DefaultLabel">
            <summary>
获取或者设置默认渲染标注信息
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureUniqueValueRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureUniqueValueRender">
            <summary>
矢量唯一值渲染器类
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.RemoveAllValues">
            <summary>
移除所有值
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetUseDefaultSymbol(System.Boolean)">
            <summary>
设置默认渲染
</summary>
            <param name="bIsUse">是否使用默认渲染</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.IsUseDefaultSymbol">
            <summary>
是否使用默认渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetSymbol(System.String,PIE.Display.ISymbol)">
            <summary>
设置渲染符号
</summary>
            <param name="value">值</param>
            <param name="symbol">渲染符号</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetSymbolMap">
            <summary>
获得SymbolMap
</summary>
            <returns>渲染图</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetSymbol(System.String)">
            <summary>
获取渲染符号
</summary>
            <param name="value">渲染值</param>
            <returns>渲染</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.RemoveValue(System.String)">
            <summary>
移除值
</summary>
            <param name="value">值</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetLabel(System.String,System.String)">
            <summary>
设置字段显示值
</summary>
            <param name="value">字段值</param>
            <param name="strLabel">字段显示值</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetLabel(System.String)">
            <summary>
获取字段显示值
</summary>
            <param name="value">字段显示值</param>
            <returns>字段显示值</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetHeading(System.String,System.String)">
            <summary>
Heading信息
</summary>
            <param name="value">渲染值</param>
            <param name="strHeading">Heading信息</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetHeading(System.String@)">
            <summary>
获取Heading信息
</summary>
            <param name="value">Heading信息</param>
            <returns>Heading信息</returns>
        </member>
        <member name="P:PIE.Carto.IFeatureUniqueValueRender.FieldDelimiter">
            <summary>
获取或者设置渲染FieldDelimiter信息
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetFieldCount">
            <summary>
获取渲染字段个数
</summary>
            <returns>渲染字段个数</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetFields(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置渲染字段
</summary>
            <param name="fields">渲染字段</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetField(System.Int32)">
            <summary>
获取渲染字段
</summary>
            <param name="index">索引编号</param>
            <returns>渲染字段</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.SetDescription(System.String,System.String)">
            <summary>
设置渲染描述信息
</summary>
            <param name="strValue">值</param>
            <param name="strDesc">渲染描述值</param>
        </member>
        <member name="M:PIE.Carto.IFeatureUniqueValueRender.GetDescription(System.String@)">
            <summary>
获取渲染描述信息
</summary>
            <param name="strValue">渲染描述值</param>
            <returns>渲染描述值</returns>
        </member>
        <member name="P:PIE.Carto.IFeatureUniqueValueRender.DefaultSymbol">
            <summary>
获取或者设置默认渲染符号
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureUniqueValueRender.DefaultLabel">
            <summary>
获取或者设置默认渲染标注信息
</summary>
        </member>
        <member name="T:PIE.Carto.IFeatureUniqueValueRender">
            <summary>
 矢量唯一值渲染器接口
</summary>
        </member>
        <member name="D:SysCarto.FeatureUniqueValueRenderPtr">
@brief 矢量唯一值渲染器智能指针

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_bIsUseDefaultSymbol">
@brief 是否是默认的符号渲染

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_mapSymbol">
@brief 地图符号集合

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_mapLabel">
@brief 地图标注集合

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_mapHeading">
@brief 地图标题集合

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_strFieldDelimiter">
@brief 渲染字段定界符

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_vecField">
@brief 渲染字段集合

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_mapDesc">
@brief 地图描述集合

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_ptrDefaultSymbol">
@brief 默认符号渲染

</member>
        <member name="F:SysCarto.FeatureUniqueValueRender.m_strDefaultLabel">
@brief 默认标注渲染

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.Clone">
@brief 克隆
@return 矢量渲染器对象

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return  SysDisplay::SymbolPtr 符号对象

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.RemoveAllValues">
@brief 移除所有值 
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetUseDefaultSymbol(System.Boolean)">
@brief 设置使用默认的符号渲染
@param [in] bIsUse 是否使用
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.IsUseDefaultSymbol">
@brief 是否使用默认的符号渲染
@return  bool 是 true，否 false

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetSymbol(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] value 指定值
@param [in] ptrSymbol 符号
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetSymbolMap">
@brief 获取符号集合
@return  符号集合

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetSymbol(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取符号
@param [in] value 指定值
@return  SysDisplay::SymbolPtr  符号

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.RemoveValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 移除指定值
@param [in] value 指定值
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置指定值的标签
@param [in] value 指定值
@param [in] strLabel 标签
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取指定值的标签 
@param [in] value 指定值
@return  QString 指定值的标签 

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetHeading(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标题
@param [in] value 值
@param [in] strHeading 标题
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetHeading(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取标题
@return  QString  标题

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetFieldDelimiter(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染字段定界符
@param [in] strFieldDelimiter 渲染字段定界符
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetFieldDelimiter">
@brief  获取渲染字段定界符
@return  QString  渲染字段定界符

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetFieldCount">
@brief  获取渲染字段数量
@return  int  渲染字段数量

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetFields(QVector&lt;QString&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染字段
@param [in] vecFileds 渲染字段集合
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetField(System.Int32)">
@brief  获取渲染字段
@param [in] index 索引值
@return  QString 渲染字段

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置描述信息
@param [in] strValue 值
@param [in] strDesc 描述信息
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取描述信息
@param [in] strValue 值
@return  QString 描述信息

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetDefaultSymbol(SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认符号渲染
@param [in] strLabel 默认符号渲染
@return  void

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetDefaultSymbol">
@brief  获取默认符号渲染
@return QString 默认符号渲染

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.SetDefaultLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认标注渲染
@param [in] strLabel 默认标注渲染
@return  void 

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.GetDefaultLabel">
@brief  获取默认标注渲染
@return QString 默认标注渲染

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureUniqueValueRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.FeatureUniqueValueRender">
@class FeatureUniqueValueRender
@brief  矢量唯一值渲染器

</member>
        <member name="F:PIE.Carto.FeatureSimpleSymbolRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureSimpleSymbolRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="P:PIE.Carto.FeatureSimpleSymbolRender.Symbol">
            <summary>
获取或者设置渲染符号
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureSimpleSymbolRender.Label">
            <summary>
获取或者设置渲染标注信息
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureSimpleSymbolRender.Description">
            <summary>
获取或者设置渲染描述信息
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureSimpleSymbolRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureSimpleSymbolRender">
            <summary>
矢量简单符号渲染器类
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureSimpleSymbolRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureSimpleSymbolRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="P:PIE.Carto.IFeatureSimpleSymbolRender.Symbol">
            <summary>
获取或者设置渲染符号
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureSimpleSymbolRender.Label">
            <summary>
获取或者设置渲染标注信息
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureSimpleSymbolRender.Description">
            <summary>
获取或者设置渲染描述信息
</summary>
        </member>
        <member name="T:PIE.Carto.IFeatureSimpleSymbolRender">
            <summary>
 矢量简单符号渲染器接口
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureCommonRender.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureCommonRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.FeatureCommonRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureCommonRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureCommonRender">
            <summary>
矢量通用渲染器类
</summary>
        </member>
        <member name="F:PIE.Carto.AnimationLayer.m_Layers">
            <summary>
图层集合
</summary>
        </member>
        <member name="F:PIE.Carto.AnimationLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.AnimationLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Resume">
            <summary>
继续
</summary>
            <returns>是否成功</returns>
            <summary>
继续
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Pause">
            <summary>
暂停
</summary>
            <returns>是否成功</returns>
            <summary>
暂停
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Stop">
            <summary>
结束播放
</summary>
            <returns>是否成功</returns>
            <summary>
结束播放
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Start">
            <summary>
开始播放
</summary>
            <returns>是否成功</returns>
            <summary>
开始播放
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.SetInterval(System.Int32)">
            <summary>
设置间隔
</summary>
            <param name="msec">间隔毫秒</param>
            <summary>
设置间隔
</summary>
            <param name="msec">间隔毫秒</param>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetInterval">
            <summary>
获得间隔
</summary>
            <returns>间隔毫秒</returns>
            <summary>
获得间隔
</summary>
            <returns>间隔毫秒</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetNextFrameIndex">
            <summary>
获得下一帧
</summary>
            <returns>下一帧</returns>
            <summary>
获得下一帧
</summary>
            <returns>下一帧</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetPreFrameIndex">
            <summary>
获得上一帧
</summary>
            <returns>上一帧</returns>
            <summary>
获得上一帧
</summary>
            <returns>上一帧</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.SetCurrentFrameIndex(System.Int32)">
            <summary>
设置当前帧
</summary>
            <param name="index">帧编号</param>
            <summary>
设置当前帧
</summary>
            <param name="index">帧编号</param>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetCurrentFrameIndex">
            <summary>
获得当前帧
</summary>
            <returns>当前帧</returns>
            <summary>
获得当前帧
</summary>
            <returns>当前帧</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetAnimationState">
            <summary>
获取当前状态
</summary>
            <returns>0表示未启动，1表示正在播放动画，2表示暂停</returns>
            <summary>
获取当前状态
</summary>
            <returns>0表示未启动，1表示正在播放动画，2表示暂停</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Clear">
            <summary>
清除图层
</summary>
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.AnimationLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.AnimationLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnimationLayer.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.AnimationLayer">
            <summary>
图层组类
</summary>
        </member>
        <member name="T:PIE.Carto.ViewState">
            <summary>
View状态
</summary>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Resume">
            <summary>
继续
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Pause">
            <summary>
暂停
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Stop">
            <summary>
结束播放
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Start">
            <summary>
开始播放
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.SetInterval(System.Int32)">
            <summary>
设置间隔
</summary>
            <param name="msec">间隔毫秒</param>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetInterval">
            <summary>
获得间隔
</summary>
            <returns>间隔毫秒</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetNextFrameIndex">
            <summary>
获得下一帧
</summary>
            <returns>下一帧</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetPreFrameIndex">
            <summary>
获得上一帧
</summary>
            <returns>上一帧</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.SetCurrentFrameIndex(System.Int32)">
            <summary>
设置当前帧
</summary>
            <param name="index">帧编号</param>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetCurrentFrameIndex">
            <summary>
获得当前帧
</summary>
            <returns>当前帧</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetAnimationState">
            <summary>
获取当前状态
</summary>
            <returns>0表示未启动，1表示正在播放动画，2表示暂停</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Clear">
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IAnimationLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.IAnimationLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.IAnimationLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="T:PIE.Carto.IAnimationLayer">
            <summary>
图层组接口
</summary>
        </member>
        <member name="D:SysCarto.AnimationLayerPtr">
@brief   动画图层  智能指针对象

</member>
        <member name="F:SysCarto.AnimationLayer.m_vecLayers">
@brief 图层集合

</member>
        <member name="M:SysCarto.AnimationLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.AnimationLayer.GetAnimationState">
@brief 获取当前状态
@return int 0表示未启动，1表示正在播放动画，2表示暂停

</member>
        <member name="M:SysCarto.AnimationLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.AnimationLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType    类型
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.Clear">
@brief  清空
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.GetLayer(System.Int32)">
@brief  获取图层
@param  [in] toIndex   图层索引
@return LayerPtr  图层

</member>
        <member name="M:SysCarto.AnimationLayer.GetLayerCount">
@brief  获取图层数量
@return int 图层数量

</member>
        <member name="M:SysCarto.AnimationLayer.MoveLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  移动图层
@param  [in] ptrLayer  图层对象
@param  [in] toIndex   图层索引
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.Delete(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层
@param [in] ptrLayer  图层对象
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.DeleteLayer(System.Int32)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@param [in] index     索引编号
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@param [in] index     索引编号
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@return void

</member>
        <member name="M:SysCarto.AnimationLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.AnimationLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.AnimationLayer.#ctor">
@brief 构造函数

</member>
        <member name="F:PIE.Carto.GroupLayer.m_Layers">
            <summary>
图层集合
</summary>
        </member>
        <member name="F:PIE.Carto.GroupLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.GroupLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.Clear">
            <summary>
清除图层
</summary>
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.GroupLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.GroupLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.GroupLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.GroupLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.GroupLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.GroupLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.GroupLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupLayer.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.GroupLayer">
            <summary>
图层组类
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementsSelectionChangedEvent">
            <summary>
选择要素变化事件
</summary>
            <return />
            <summary>
选择要素变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementsReorderedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素排序事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素排序事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseAllElementsDeletedEvent">
            <summary>
触发全部要素删除事件
</summary>
            <return />
            <summary>
触发多要素删除事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementsDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素删除事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素删除事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementsAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素添加事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素添加事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementUpdatedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素更新事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素更新事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素删除事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素删除事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseElementAddedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素添加事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素添加事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseMapPreLoadFinishedEvent">
            <summary>
触发地图预加载完成事件
</summary>
            <return />
            <summary>
触发地图预加载完成事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseCurrentLayerChangedEvent">
            <summary>
触发当前图层变化事件
</summary>
            <return />
            <summary>
触发当前图层变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeforeCurrentLayerChangingEvent">
            <summary>
触发当前图层变化前事件
</summary>
            <return />
            <summary>
触发当前图层变化前事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseAfterDrawEvent">
            <summary>
触发绘图后事件
</summary>
            <return />
            <summary>
触发绘图后事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeginDrawEvent">
            <summary>
 触发绘图前事件
</summary>
            <return />
            <summary>
 触发绘图前事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseViewRefreshedEvent">
            <summary>
视图刷新事件句柄
</summary>
            <return />
            <summary>
视图刷新事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseSpatialReferenceChangedEvent">
            <summary>
空间参考信息变化事件句柄
</summary>
            <return />
            <summary>
空间参考信息变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseFeaturesSelectionChangedEvent">
            <summary>
要素选择变化事件句柄
</summary>
            <return />
            <summary>
要素选择变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseContentsClearedEvent">
            <summary>
图层内容清除事件句柄
</summary>
            <return />
            <summary>
图层内容清除事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseContentsChangedEvent">
            <summary>
图层内容变化事件句柄
</summary>
            <return />
            <summary>
图层内容变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseFocusMapChangedEvent">
            <summary>
 触发图层变化事件
</summary>
            <return />
            <summary>
 触发图层变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseLayersDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层移除事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层移除事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseLayersAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层添加事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层添加事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseLayerReorderedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
触发图层排序事件
</summary>
            <param name="pLayer">图层对象</param>
            <param name="index">图层索引</param>
            <return />
            <summary>
触发图层排序事件
</summary>
            <param name="pLayer">图层对象</param>
            <param name="index">图层索引</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseLayerDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层移除事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层移除事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseLayerAddedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeforeLayersDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层移除前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层移除前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeforeLayersAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层添加前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层添加前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeforeLayerDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层移除前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层移除前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.PageLayout.RaiseBeforeLayerAddedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层添加前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnMapPreLoadFinishedEventHandler">
            <summary>
当前地图预加载完成EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementsSelectionChangedEventHandler">
            <summary>
选择要素变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementsReorderedEventHandler">
            <summary>
多要素排序EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnAllElementsDeletedEventHandler">
            <summary>
所有要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementsDeletedEventHandler">
            <summary>
多要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementsAddedEventHandler">
            <summary>
多要素更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementUpdatedEventHandler">
            <summary>
要素更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementDeletedEventHandler">
            <summary>
要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnElementAddedEventHandler">
            <summary>
要素添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnCurrentLayerChangedEventHandler">
            <summary>
当前图层变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeforeCurrentLayerChangingEventHandler">
            <summary>
当前图层变化前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnAfterDrawEventHandler">
            <summary>
绘图后EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeginDrawEventHandler">
            <summary>
绘图前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnViewRefreshedEventHandler">
            <summary>
视图范围更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnSpatialReferenceChangedEventHandler">
            <summary>
空间参考信息变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnFeaturesSelectionChangedEventHandler">
            <summary>
要素选择变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnContentsClearedEventHandler">
            <summary>
图层内容清除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnContentsChangedEventHandler">
            <summary>
图层内容变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnFocusMapChangedEventHandler">
            <summary>
图层变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnLayersDeletedEventHandler">
            <summary>
多图层移除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnLayersAddedEventHandler">
            <summary>
多图层添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnLayerReorderedEventHandler">
            <summary>
图层排序EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnLayerDeletedEventHandler">
            <summary>
图层移除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnLayerAddedEventHandler">
            <summary>
图层添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeforeLayersDeletedEventHandler">
            <summary>
多图层移除前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeforeLayersAddedEventHandler">
            <summary>
多图层添加前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeforeLayerDeletedEventHandler">
            <summary>
图层移除前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_OnBeforeLayerAddedEventHandler">
            <summary>
图层添加前EventHandler
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetLayer(SysCarto.Layer*)">
            <summary>
获得.Net图层
</summary>
            <param name="pLayer">C++图层指针</param>
            <returns>.Net图层</returns>
            <summary>
获得.Net图层
</summary>
            <param name="pLayer">C++图层指针</param>
            <returns>.Net图层</returns>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.#ctor(SysUtility._ptr_t&lt;SysCarto.PageLayout&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ConstructCElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ConstructCLRElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ConstructCElement(PIE.Carto.IElement)">
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ConstructCLRElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_MapFrameElementsList">
            <summary>
MapFrameElements列表
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_DisplayTransformation">
            <summary>
DisplayTransformation
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_ContentImage">
            <summary>
ContentImage
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_CurrentLayer">
            <summary>
当前图层
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_TrackerCancel">
            <summary>
TrackerCancel
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_Layers">
            <summary>
图层集合
</summary>
        </member>
        <member name="F:PIE.Carto.PageLayout.m_NeedUpdataContentImage">
            <summary>
是否需要更新ContentImage
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementsSelectionChanged">
            <summary>
选择要素变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementsReordered">
            <summary>
多要素排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnAllElementsDeleted">
            <summary>
所有要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementsDeleted">
            <summary>
多要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementsAdded">
            <summary>
多要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementUpdated">
            <summary>
要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementDeleted">
            <summary>
要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnElementAdded">
            <summary>
要素添加事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制元素
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
            <summary>
绘制元素
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SendToBack(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SendBackward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.BringToFront(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.BringForward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="P:PIE.Carto.PageLayout.NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.UpdateElement(System.String,PIE.Carto.IElement)">
            <summary>
更新Element
</summary>
            <param name="element">element</param>
            <summary>
更新Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.UnSelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.UnSelectElement(PIE.Carto.IElement)">
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.UnSelectAllElements">
            <summary>
取消所有Element的选择
</summary>
            <summary>
取消所有Element的选择
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetSelectionBounds">
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetSelectedElements">
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.SelectedElement(System.Int32)">
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.SelectElementsByGeometry(PIE.Geometry.IGeometry,System.Boolean)">
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SelectElement(PIE.Carto.IElement)">
            <summary>
选择Element
</summary>
            <param name="element">element</param>
            <summary>
选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SelectAllElements">
            <summary>
选择所有的Element
</summary>
            <summary>
选择所有的Element
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.IsElementSelected(PIE.Carto.IElement)">
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.QueryElementsByPoint(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double)">
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.FindElementByName(System.String)">
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.FindElementByID(System.String)">
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">ID</param>
            <returns>Element</returns>
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">ID</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.QueryElements(PIE.Geometry.IGeometry)">
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.DeleteAllElements">
            <summary>
删除Element集合
</summary>
            <summary>
删除Element集合
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除Element
</summary>
            <param name="element">Element元素</param>
            <summary>
删除Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetAllElements">
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.AddElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.AddElement(PIE.Carto.IElement)">
            <summary>
添加
</summary>
            <param name="element">元素</param>
            <summary>
添加
</summary>
            <param name="element">对参数进行描述说明</param>
        </member>
        <member name="P:PIE.Carto.PageLayout.ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnMapPreLoadFinished">
            <summary>
地图预加载完成事件
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnCurrentLayerChanged">
            <summary>
当前图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeforeCurrentLayerChanging">
            <summary>
当前图层变化前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnAfterDraw">
            <summary>
绘图后事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeginDraw">
            <summary>
绘图前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnViewRefreshed">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnSpatialReferenceChanged">
            <summary>
空间参考信息变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnFeaturesSelectionChanged">
            <summary>
要素选择变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnContentsCleared">
            <summary>
图层内容清除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnContentsChanged">
            <summary>
图层内容变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnFocusMapChanged">
            <summary>
图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnLayersDeleted">
            <summary>
多图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnLayersAdded">
            <summary>
多图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnLayerReordered">
            <summary>
图层排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnLayerDeleted">
            <summary>
图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnLayerAdded">
            <summary>
图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeforeLayersDeleted">
            <summary>
多图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeforeLayersAdded">
            <summary>
多图层添加前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeforeLayerDeleted">
            <summary>
图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.PageLayout.OnBeforeLayerAdded">
            <summary>
图层添加事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.Output(PIE.Carto.IExport,System.Int32,System.Drawing.RectangleF,PIE.Geometry.IEnvelope,PIE.SystemUI.ITrackerCancel)">
            <summary>
导出地图
</summary>
            <param name="IExport">IExport对象</param>
            <param name="RectangleF">导出设备范围</param>
            <param name="IEnvelope">导出地图范围</param>
            <param name="ITrackerCancel">ITrackerCancel对象</param>
            <summary>
导出地图
</summary>
            <param name="IExport">IExport对象</param>
            <param name="RectangleF">导出设备范围</param>
            <param name="IEnvelope">导出地图范围</param>
            <param name="ITrackerCancel">ITrackerCancel对象</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.PanTo(PIE.Geometry.IPoint!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图平移到以几何对象中心为中心
</summary>
            <param name="point">几何对象</param>
            <summary>
视图平移到以几何对象中心为中心
</summary>
            <param name="point">几何对象</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomTo(PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图缩放到几何对象
</summary>
            <param name="geometry">几何对象</param>
            <summary>
视图缩放到几何对象
</summary>
            <param name="geometry">几何对象</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.FromMapPoint(PIE.Geometry.IPoint!System.Runtime.CompilerServices.IsConst)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <returns>设备点</returns>
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ToMapPoint(System.Drawing.Point)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <returns>地图点</returns>
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.StopRender">
            <summary>
停止渲染
</summary>
            <summary>
停止渲染
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.DrawElement(PIE.Carto.IElement)">
            <summary>
绘制Element
</summary>
            <param name="element">Element</param>
            <summary>
绘制Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.DrawGeometry(PIE.Display.ISymbol!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制Geometry
</summary>
            <param name="symbol">符号样式</param>
            <param name="geometry">Geometry</param>
            <summary>
绘制Geometry
</summary>
            <param name="symbol">符号样式</param>
            <param name="geometry">Geometry</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomAction(System.Drawing.Point,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="centerPos">中心点-屏幕点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
            <summary>
缩放
</summary>
            <param name="centerPos">中心点-屏幕点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.PanAction(System.Double,System.Double)">
            <summary>
平移
</summary>
            <param name="deltaX">X方向的距离</param>
            <param name="deltaY">Y方向的距离</param>
            <summary>
平移
</summary>
            <param name="deltaX">X方向的距离</param>
            <param name="deltaY">Y方向的距离</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.FinishDrawing">
            <summary>
结束绘制
</summary>
            <summary>
结束绘制
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.StartDrawing">
            <summary>
开始绘制
</summary>
            <summary>
开始绘制
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomByFactor(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
以某点为中心缩放
</summary>
            <param name="ptrCenter">中心点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
            <summary>
以某点为中心缩放
</summary>
            <param name="ptrCenter">中心点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.Refresh">
            <summary>
地图刷新
</summary>
            <summary>
地图刷新
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.PartialRefresh(&lt;unknown type&gt;,System.Boolean)">
            <summary>
地图刷新(是否清除缓存）
</summary>
            <param name="dpType">刷新方式</param>
            <summary>
地图刷新(是否清除缓存）
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.PartialRefresh(&lt;unknown type&gt;)">
            <summary>
地图刷新
</summary>
            <param name="dpType">刷新方式</param>
            <summary>
地图刷新
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.HitTestMap(PIE.Geometry.IPoint)">
            <summary>
HitTestMap
</summary>
            <param name="point">点</param>
            <returns>地图对象</returns>
            <summary>
HitTestMap
</summary>
            <param name="point">点</param>
            <returns>地图对象</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.Draw(System.Drawing.Graphics,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="graphics">graphics对象</param>
            <param name="tracker">tracker取消</param>
            <summary>
绘制
</summary>
            <param name="graphics">graphics对象</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.SetContentImage(System.Drawing.Image)">
            <summary>
设置显示Image
</summary>
            <param name="img">Image</param>
            <summary>
设置显示Image
</summary>
            <param name="img">Image</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetContentImage">
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
        </member>
        <member name="P:PIE.Carto.PageLayout.TrackerCancel">
            <summary>
获得TrackerCancel对象
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.IsShowSelection">
            <summary>
是否显示选择
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.ExportFrame">
            <summary>
获取输出图框
</summary>
            <returns>输出图框</returns>
        </member>
        <member name="P:PIE.Carto.PageLayout.ExtentStack">
            <summary>
获得范围栈
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.FullExtent">
            <summary>
地图全图范围
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.Extent">
            <summary>
地图视图范围
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.IsActived">
            <summary>
是否激活状体
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.FocusMap">
            <summary>
地图对象
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.DisplayTransformation">
            <summary>
获取DisplayTransformation
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.GraphicsContainer">
            <summary>
获取标绘图层-默认
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.DefaultTempLayer">
            <summary>
获取临时图层
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.CurrentLayer">
            <summary>
获取或设置当前地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.DeActivate">
            <summary>
反激活
</summary>
            <summary>
反激活
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.Activate(System.Int32)">
            <summary>
激活
</summary>
            <param name="handle">显示窗体句柄</param>
            <summary>
激活
</summary>
            <param name="handle">显示窗体句柄</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.OutputJPG(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出JPG
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.OutputPNG(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出PNG
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.OutputTIF(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出TIF
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.QueryOutputSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
获取打印输出地图大小
</summary>
            <param name="nOutputDPI">？？</param>
            <param name="nWid">返回宽度</param>
            <param name="nHei">返回高度</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetMaps(System.Collections.Generic.IList`1{PIE.Carto.IMap}@)">
            <summary>
获得Maps
</summary>
            <param name="listMap">Map列表</param>
            <summary>
获得Maps
</summary>
            <param name="listMap">Map列表</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetFocusMapFrameElement">
            <summary>
获取焦点地图框要素
</summary>
            <returns>焦点地图的地图框要素</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetDefaultScaleBarEnvelope">
            <summary>
获取比例尺外接多边形
</summary>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetDefaultDataFrameEnvelope">
            <summary>
获取数据框默认外接多边形
</summary>
            <returns>外边框</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.RenderGraphicsContainerSelections(System.Drawing.Graphics)">
            <summary>
？？？
</summary>
            <param name="painter">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
对函数进行描述说明
</summary>
            <param name="ptrPoint">对参数进行描述说明</param>
            <returns>返回值说明</returns>
            <summary>
对函数进行描述说明
</summary>
            <param name="ptrPoint">对参数进行描述说明</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.FromMapPoint(PIE.Carto.IMap,PIE.Geometry.IPoint)">
            <summary>
从指定地图坐标点转化为页面坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="ptrPoint">地图点</param>
            <returns>页面点</returns>
            <summary>
从指定地图坐标点转化为页面坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="ptrPoint">地图点</param>
            <returns>页面点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ToMapPoint(PIE.Carto.IMap,System.Drawing.Point)">
            <summary>
从页面坐标点转化为指定地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="point">页面点</param>
            <returns>地图点</returns>
            <summary>
从页面坐标点转化为指定地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="point">页面点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.MapToPagePoint(PIE.Carto.IMap,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
从地图坐标点转化为页面点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">地图点X</param>
            <param name="dPageY">地图点Y</param>
            <param name="dMapX">返回页面点X</param>
            <param name="dMapY">返回页面点Y</param>
            <summary>
从地图坐标点转化为页面点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">地图点X</param>
            <param name="dPageY">地图点Y</param>
            <param name="dMapX">返回页面点X</param>
            <param name="dMapY">返回页面点Y</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.PageToMapPoint(PIE.Carto.IMap,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
从页面点转化为地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">页面点X</param>
            <param name="dPageY">页面点Y</param>
            <param name="dMapX">返回地图点X</param>
            <param name="dMapY">返回地图点Y</param>
            <summary>
从页面点转化为地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">页面点X</param>
            <param name="dPageY">页面点Y</param>
            <param name="dMapX">返回地图点X</param>
            <param name="dMapY">返回地图点Y</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.FromPagePoint(PIE.Geometry.IPoint)">
            <summary>
从页面点转化为设备点
</summary>
            <param name="ptrPoint">页面点</param>
            <returns>设备点</returns>
            <summary>
从页面点转化为设备点
</summary>
            <param name="ptrPoint">页面点</param>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ToPagePoint(System.Drawing.Point)">
            <summary>
从设备点转化为页面点
</summary>
            <param name="point">设备点</param>
            <returns>页面点</returns>
            <summary>
从设备点转化为页面点
</summary>
            <param name="point">设备点</param>
            <returns>页面点</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.SetShowRulers(System.Boolean)">
            <summary>
设置是否显示标尺
</summary>
            <param name="bShow">是否显示标尺</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.IsShowRulers">
            <summary>
获取是否显示标尺
</summary>
            <returns>是否显示标尺</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomToWidth">
            <summary>
缩放到页宽
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomToWhole">
            <summary>
整个页面显示
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomToPercent(System.Double)">
            <summary>
缩放到百分比
</summary>
            <param name="percent">百分比</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.ZoomPercent">
            <summary>
获得制图比例（百分比）
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.FocusPreviousMapFrame">
            <summary>
把上一个地图设置为激活MapFrame
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.FocusNextMapFrame">
            <summary>
把下一个地图设置为激活MapFrame
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.ReplaceMaps(System.Collections.Generic.IList`1{PIE.Carto.IMap})">
            <summary>
替换地图
</summary>
            <param name="listMap">地图集合</param>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetRulerSettings">
            <summary>
获取标尺对象
</summary>
            <returns>IRulerSettings对象</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.Printer">
            <summary>
获取打印对象
</summary>
            <returns>IPrinter对象</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.GetPage">
            <summary>
获取打印页面
</summary>
            <returns>IPage对象</returns>
        </member>
        <member name="M:PIE.Carto.PageLayout.ClearContent">
            <summary>
清空内容
</summary>
        </member>
        <member name="P:PIE.Carto.PageLayout.GraphicContainer">
            <summary>
获取或设置GraphicsContainer
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.PageLayout.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.PageLayout">
            <summary>
PageLayout对象
</summary>
        </member>
        <member name="F:SysCarto.PageLayout.m_mutex">
@brief 互斥锁

</member>
        <member name="F:SysCarto.PageLayout.m_RenderTimer">
@brief 渲染计时器

</member>
        <member name="F:SysCarto.PageLayout.m_bRefreshFlag">
@brief 地图是否需要刷新

</member>
        <member name="F:SysCarto.PageLayout.m_bShowRulers">
@brief 是否显示标尺对象

</member>
        <member name="F:SysCarto.PageLayout.m_pRulerSettings">
@brief 标尺对象

</member>
        <member name="F:SysCarto.PageLayout.m_pPrinter">
@brief 打印对象

</member>
        <member name="F:SysCarto.PageLayout.m_pPage">
@brief 页面

</member>
        <member name="F:SysCarto.PageLayout.m_pSnapGuidesV">
@brief 捕捉网格垂直线

</member>
        <member name="F:SysCarto.PageLayout.m_pSnapGuidesH">
@brief 捕捉网格水平线

</member>
        <member name="F:SysCarto.PageLayout.m_pSnapGrid">
@brief 捕捉网格

</member>
        <member name="F:SysCarto.PageLayout.m_ptrFocusMapFrameElement">
@brief 焦点地图框元素

</member>
        <member name="F:SysCarto.PageLayout.m_bAlignToMargins">
@brief 是否匹配到边缘

</member>
        <member name="M:SysCarto.PageLayout.StopMapsRender">
@brief 停止地图集渲染
@return  void

</member>
        <member name="M:SysCarto.PageLayout.StartMapsRender">
@brief 开始地图集渲染
@return  void

</member>
        <member name="M:SysCarto.PageLayout.InitliazeMapViews">
@brief 初始化地图视图
@return  void

</member>
        <member name="M:SysCarto.PageLayout.RefreshGraphics">
@brief 刷新制图
@return  void

</member>
        <member name="M:SysCarto.PageLayout.OnNotifyUpdate">
@brief 通知更新槽函数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.OnRenderCompleted">
@brief 重置完成槽函数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.OnRenderBegin">
@brief 渲染开始槽函数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.ResetContentImage">
@brief 重置包含图片
@return  void

</member>
        <member name="M:SysCarto.PageLayout.UnregisterEvents">
@brief 取消注册事件
@return  void

</member>
        <member name="M:SysCarto.PageLayout.RegisterEvents">
@brief 注册事件
@return  void

</member>
        <member name="M:SysCarto.PageLayout.MapFrameElementOutput(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst,SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 地图框元素输出
@param [in] painter 绘图对象
@param [in] recMapBlockDevice  地图块设备
@param [in] ptrMapBlockEnv     地图块范围
@param [in] ptrMapFrameElement 地图框元素
@param [in out] ptrPageLayoutTrans  页面布局显示转换对象
@param [in] ptrTracker 取消追踪对象
@return  void

</member>
        <member name="M:SysCarto.PageLayout.ClearAnnotationElement(QVector&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVector&lt;QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 清空注释元素
@param [in] vecMap 地图集合
@param [in] veclistAnnoElements  注释元素集合
@return  void

</member>
        <member name="M:SysCarto.PageLayout.CreateAnnotationElement(QVector&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVector&lt;QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建注释元素
@param [in] vecMap 地图集合
@param [in] veclistAnnoElements  注释元素集合
@param [in out] ptrOutputTrans  显示转换大小
@return  void

</member>
        <member name="M:SysCarto.PageLayout.CreateMapSurroundFrameElement(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建地图包围框元素
@param [in out] ptrOutputTrans 显示转换大小 
@return  void 

</member>
        <member name="M:SysCarto.PageLayout.FindMapFrameByMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过地图查找地图框
@param [in] ptrMap  地图
@return  MapFrameElementPtr  地图框元素

</member>
        <member name="M:SysCarto.PageLayout.CopyTo(SysCarto.PageLayout*)">
@brief 拷贝到PageLayout
@param[in] PageLayout* PageLayout对象

</member>
        <member name="M:SysCarto.PageLayout.Clone">
@brief 克隆
@return PageLayoutPtr 当前PageLayout的克隆对象

</member>
        <member name="M:SysCarto.PageLayout.OutputJPG(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 获取输出JPG格式文件
@param [in] strPath  文件路径
@param [in] nDPI     像素点数
@param [in] ptrTracker 取消追踪对象
@param [in] pProgressFunc  回调函数指针
@param [in] pArg  回调函数参数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.OutputPNG(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 获取输出PNG格式文件
@param [in] strPath  文件路径
@param [in] nDPI     像素点数
@param [in] ptrTracker 取消追踪对象
@param [in] pProgressFunc  回调函数指针
@param [in] pArg  回调函数参数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.OutputTIF(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 获取输出TIF格式文件
@param [in] strPath  文件路径
@param [in] nDPI     像素点数
@param [in] ptrTracker 取消追踪对象
@param [in] pProgressFunc  回调函数指针
@param [in] pArg  回调函数参数
@return  void

</member>
        <member name="M:SysCarto.PageLayout.QueryOutputSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取输出大小
@param [in] nOutputDPI 每英寸点数
@param [in out] nWid 宽度
@param [in out] nHei 高度
@return  void

</member>
        <member name="M:SysCarto.PageLayout.GetMaps(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取地图集合
@param [in] listMap 地图集合
@return  void

</member>
        <member name="M:SysCarto.PageLayout.GetFocusMapFrameElement">
@brief 获取焦点地图框元素
@return  SysCarto::MapFrameElementPtr  外接多边形

</member>
        <member name="M:SysCarto.PageLayout.GetDefaultScaleTextEnvelope">
@brief 获取默认比例文本外接多边形
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.PageLayout.GetDefaultLegendEnvelope">
@brief 获取默认图例外接多边形
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.PageLayout.GetDefaultNorthArrowEnvelope">
@brief 获取默认指北针外接多边形
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.PageLayout.GetDefaultScaleBarEnvelope">
@brief 获取比例尺外接多边形 
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.PageLayout.GetDefaultDataFrameEnvelope">
@brief 获取数据框默认外接多边形 
@return  SysGeometry::EnvelopePtr  外接多边形 

</member>
        <member name="M:SysCarto.PageLayout.RenderGraphicsContainerSelections(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 渲染选中的制图内容
@param [in] paiter 绘制对象
@return void

</member>
        <member name="M:SysCarto.PageLayout.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘制对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.PageLayout.WaitForRenderFinished">
@brief 等待渲染完成
@return void

</member>
        <member name="M:SysCarto.PageLayout.StopRender">
@brief 停止渲染
@return void

</member>
        <member name="M:SysCarto.PageLayout.PanRefresh(System.Boolean)">
@brief 漫游刷新
@param [in] bForceActive 是否强制刷新
@return void

</member>
        <member name="M:SysCarto.PageLayout.Refresh(System.Boolean,System.Boolean)">
@brief 刷新
@param [in] bClearCache  是否清空缓存
@param [in] bFroceRefresh  是否强制刷新
@return  void

</member>
        <member name="M:SysCarto.PageLayout.PartialRefresh(SysCarto.ViewDrawPhaseType,System.Boolean)">
@brief 部分刷新
@param [in] dpType 视图绘制相应类型
@param [in] bForce 是否强制刷新
@return void

</member>
        <member name="M:SysCarto.PageLayout.GetContentImage">
@brief 获取内含图片
@return QImage  图片

</member>
        <member name="M:SysCarto.PageLayout.SetFullExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全局范围
@param [in] ptrEnv 包络线范围
@return void

</member>
        <member name="M:SysCarto.PageLayout.GetFullExtent">
@brief 获取全局范围
@return SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.PageLayout.SetExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置范围
@param [in] ptrEnv 包络线范围
@return void

</member>
        <member name="M:SysCarto.PageLayout.GetExtent">
@brief 获取范围 
@return SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.PageLayout.HitTestMap(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点击测试地图
@param [in] point 地图点
@return void

</member>
        <member name="M:SysCarto.PageLayout.SetFocusMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置焦点地图
@param [in] ptrMap 地图
@return void

</member>
        <member name="M:SysCarto.PageLayout.GetFocusMap">
@brief 获取焦点地图
@return MapPtr 焦点地图

</member>
        <member name="M:SysCarto.PageLayout.Activate(QPaintDevice*)">
@brief 激活视图
@param [in] pDevice 视图绘制设备对象
@return void

</member>
        <member name="M:SysCarto.PageLayout.DeleteAllElements">
@brief 删除所有元素
@return void

</member>
        <member name="M:SysCarto.PageLayout.DeleteElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] ptrElement 元素
@return void

</member>
        <member name="M:SysCarto.PageLayout.AddElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素集
@param [in] vecElems 元素集合
@return void

</member>
        <member name="M:SysCarto.PageLayout.AddElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素
@param [in] ptrElement 元素
@return void

</member>
        <member name="M:SysCarto.PageLayout.InsertElement(System.Int32,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入元素到容器
@param [in] ptrElement 元素对象
@return void

</member>
        <member name="M:SysCarto.PageLayout.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从指定地图坐标点转化为页面坐标点
@param [in] ptrPoint 地图点
@return QPoint 页面点

</member>
        <member name="M:SysCarto.PageLayout.FromMapPoint(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从指定地图坐标点转化为页面坐标点
@param [in] ptrMap 指定地图对象
@param [in] ptrPoint 地图点
@return QPoint 页面点

</member>
        <member name="M:SysCarto.PageLayout.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从页面坐标点转化为指定地图坐标点
@param [in] point  页面点
@return  SysGeometry::PointPtr 地图点

</member>
        <member name="M:SysCarto.PageLayout.ToMapPoint(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从页面坐标点转化为指定地图坐标点
@param [in] ptrMap 指定地图对象
@param [in] point  页面点
@return  SysGeometry::PointPtr 地图点

</member>
        <member name="M:SysCarto.PageLayout.MapToPagePoint(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图坐标点转化为页面点 
@param [in] ptrMap  地图
@param [in] dMapX   地图X轴坐标点
@param [in] dMapY   地图Y轴坐标点
@param [in] dPageX  页面X轴横坐标点
@param [in] dPageY  页面Y轴纵坐标点
@return   void

</member>
        <member name="M:SysCarto.PageLayout.PageToMapPoint(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从页面点转化为地图坐标点 
@param [in] ptrMap  地图
@param [in] dPageX  页面X轴横坐标点
@param [in] dPageY  页面Y轴纵坐标点
@param [in] dMapX   地图X轴坐标点
@param [in] dMapY   地图Y轴坐标点
@return   void

</member>
        <member name="M:SysCarto.PageLayout.FromPagePoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从页面点转化为设备点
@param [in] SysGeometry::PointPtr ptrPoint 页面点
@return QPoint 设备点

</member>
        <member name="M:SysCarto.PageLayout.ToPagePoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 开始绘制
@return   void

@brief 从设备点转化为页面点
@param [in] QPoint point 设备点
@return PointPtr 页面点

</member>
        <member name="M:SysCarto.PageLayout.SetShowRulers(System.Boolean)">
@brief 设置是否显示标尺
@param [in] bShow  是否显示标尺
@return   void

</member>
        <member name="M:SysCarto.PageLayout.IsShowRulers">
@brief 获取是否显示标尺 
@return   bool 是否显示标尺

</member>
        <member name="M:SysCarto.PageLayout.ZoomToWidth">
@brief 缩放到页宽 
@return   void

</member>
        <member name="M:SysCarto.PageLayout.ZoomToWhole">
@brief 缩放到整个页面
@return   void

</member>
        <member name="M:SysCarto.PageLayout.ZoomToPercent(System.Double)">
@brief 缩放到百分比 
@param [in] percent  百分比
@return   void

</member>
        <member name="M:SysCarto.PageLayout.ZoomPercent">
@brief 获得制图比例（百分比）
@return   double 制图比例（百分比）

</member>
        <member name="M:SysCarto.PageLayout.FocusPreviousMapFrame">
@brief 把上一个地图设置为激活MapFrame 
@return   void

</member>
        <member name="M:SysCarto.PageLayout.FocusNextMapFrame">
@brief 把下一个地图设置为激活MapFrame 
@return   void

</member>
        <member name="M:SysCarto.PageLayout.ReplaceMaps(QList&lt;SysUtility._ptr_t&lt;SysCarto.Map&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 替换地图 
@param [in] listMap  地图集合
@return   void

</member>
        <member name="M:SysCarto.PageLayout.GetRulerSettings">
@brief 获取标尺对象 
@return   RulerSettings*  标尺对象 

</member>
        <member name="M:SysCarto.PageLayout.Printer">
@brief 获取打印对象
@return  IPrinter*  打印对象

</member>
        <member name="M:SysCarto.PageLayout.GetPage">
@brief 获取获取页面
@return  Page*   页面

</member>
        <member name="M:SysCarto.PageLayout.VerticalSnapGuides">
@brief 获取垂直捕捉参考线
@return  SnapGuides* 垂直捕捉参考线

</member>
        <member name="M:SysCarto.PageLayout.HorizontalSnapGuides">
@brief 获取水平捕捉参考线
@return  SnapGuides* 水平捕捉参考线

</member>
        <member name="M:SysCarto.PageLayout.GetSnapGrid">
@brief 获取捕捉网格
@return  SnapGrid*  捕捉网格

</member>
        <member name="M:SysCarto.PageLayout.ClearContent">
@brief 清空内容
@return  void

</member>
        <member name="M:SysCarto.PageLayout.GetAlignToMargins">
@brief 获取是否匹配到边缘
@return  bool 是 true,否 false

</member>
        <member name="M:SysCarto.PageLayout.SetAlignToMargins(System.Boolean)">
@brief 设置匹配到边缘
@param [in] bValue 是否设置
@return  void

</member>
        <member name="M:SysCarto.PageLayout.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.PageLayout.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.PageLayout">
@brief  类的前置声明和智能指针定义


@class PageLayout
@brief  页面布局


@brief  类的前置声明和智能指针定义

</member>
        <member name="D:SysCarto.MapFrameElementPtr">
@brief  地图框架元素类  智能指针

</member>
        <member name="M:SysCarto.MapFrameElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.MapFrameElement.m_ptrMap">
@brief 地图对象

</member>
        <member name="F:SysCarto.MapFrameElement.m_vecMapGrid">
@brief 地图网格集合

</member>
        <member name="M:SysCarto.MapFrameElement.GetMap">
@brief 获取地图
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.SetMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地图
@param [in] ptrMap  地图
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.PageToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从页面坐标点转化为地图点
@param [in] dPageX 页面点X
@param [in] dPageY 页面点Y
@param [in] dMapX  地图点X
@param [in] dMapY  地图点Y
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.MapToPagePoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图坐标点转化为页面点 
@param [in] dMapX  地图点X 
@param [in] dMapY  地图点Y
@param [in] dPageX 页面点X
@param [in] dPageY 页面点Y
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.GetMapGridCount">
@brief 获取地图网格数量
@return  int 地图网格数量

</member>
        <member name="M:SysCarto.MapFrameElement.GetMapGrid(System.Int32)">
@brief 获取地图网格
@param [in] nIndex  索引
@return  IMapGridPtr  地图网格

</member>
        <member name="M:SysCarto.MapFrameElement.SetMapGrid(System.Int32,SysUtility._ptr_t&lt;SysCarto.IMapGrid&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地图网格
@param [in] ptrMapGrid  地图网格对象
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.DeleteMapGrid(SysUtility._ptr_t&lt;SysCarto.IMapGrid&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除地图网格
@param [in] ptrMapGrid  地图网格对象
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.ClearMapGrids">
@brief 清空地图网格
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.AddMapGrid(SysUtility._ptr_t&lt;SysCarto.IMapGrid&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加地图网格
@param [in] ptrMapGrid  地图网格对象
@return  void

</member>
        <member name="M:SysCarto.MapFrameElement.Clone">
@brief 克隆
@return ElementPtr  元素克隆对象

</member>
        <member name="M:SysCarto.MapFrameElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrTrasform 显示转换对象
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.MapFrameElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MapFrameElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MapFrameElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MapFrameElement">
@class MapFrameElement
@brief 地图框架元素类

</member>
        <member name="F:SysCarto.IMapGrid.m_bOutSideSubTick">
@brief 是否为数据框外部子刻度
true-外部，false-内部

</member>
        <member name="F:SysCarto.IMapGrid.m_bOutSideTick">
@brief 是否为数据框外部刻度
true-外部，false-内部

</member>
        <member name="F:SysCarto.IMapGrid.m_dTickLength">
@brief 标记长度

</member>
        <member name="F:SysCarto.IMapGrid.m_dSubTickLength">
@brief 子标记长度

</member>
        <member name="F:SysCarto.IMapGrid.m_nSubTickCount">
@brief 子标记数量

</member>
        <member name="F:SysCarto.IMapGrid.m_tickVisibility">
@brief 标记可视化数组 

</member>
        <member name="F:SysCarto.IMapGrid.m_subTickVisibility">
@brief 子标记可视化数组 

</member>
        <member name="F:SysCarto.IMapGrid.m_labelVisibility">
@brief 标签可视化数组 （0 left 1 top 2 right 3 bottom）

</member>
        <member name="F:SysCarto.IMapGrid.m_strName">
@brief 名字

</member>
        <member name="F:SysCarto.IMapGrid.m_ptrTickMarkSymbol">
@brief 标记点符号

</member>
        <member name="F:SysCarto.IMapGrid.m_ptrTickLineSymbol">
@brief 标记线符号

</member>
        <member name="F:SysCarto.IMapGrid.m_ptrSubTickLineSymbol">
@brief 子标记线符号

</member>
        <member name="F:SysCarto.IMapGrid.m_ptrLineSymbol">
@brief 线符号

</member>
        <member name="F:SysCarto.IMapGrid.m_ptrGridLabel">
@brief 网格标签

</member>
        <member name="F:SysCarto.IMapGrid.m_bVisible">
@brief 是否可视化

</member>
        <member name="M:SysCarto.IMapGrid.DrawTickAndLabel(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.MultiPolyline&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制标记和标签
@param [in] painter   绘图设备
@param [in] ptrTracker   取消转换
@param [in] ptrTrans  显示转换对象
@param [in] ptrMapFrame  地图框架对象
@param [in] ptrGeometry   多线对象
@return void

</member>
        <member name="M:SysCarto.IMapGrid.CreateGridLine(SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建网格线
@param [in] ptrMapFrameElement     地图框架元素
@return SysGeometry::MultiPolylinePtr  多线对象

</member>
        <member name="M:SysCarto.IMapGrid.CopyTo(SysCarto.IMapGrid*)">
@brief 拷贝到IMapGrid
@param [in] IMapGrid* pMapGrid  地图网格
return void

</member>
        <member name="M:SysCarto.IMapGrid.Clone">
@brief 克隆
@return  IMapGridPtr  地图框架

</member>
        <member name="M:SysCarto.IMapGrid.SetDefaultInterval(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认间距
@param [in] ptrTrans     显示转换
@param [in] ptrMapFrame  地图框架
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetOutSideSubTick">
@brief 获取是否为数据框外部子刻度
@return bool  是否为数据框外部子刻度

</member>
        <member name="M:SysCarto.IMapGrid.SetOutSideSubTick(System.Boolean)">
@brief 设置是否为数据框外部子刻度
@param [in] bValue   是否为数据框外部子刻度
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetOutSideTick">
@brief 获取是否为数据框外部刻度
@return bool  否为数据框外部刻度

</member>
        <member name="M:SysCarto.IMapGrid.SetOutSideTick(System.Boolean)">
@brief 设置是否为数据框外部刻度
@param [in] bValue   否为数据框外部刻度
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetVisible">
@brief 获取可视化
@return bool  是否可视化

</member>
        <member name="M:SysCarto.IMapGrid.SetVisible(System.Boolean)">
@brief 设置可视化
@param [in] bValue   是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetTickMarkSymbol">
@brief 获取标记点符号
@return SysDisplay::MarkerSymbolPtr   点符号

</member>
        <member name="M:SysCarto.IMapGrid.SetTickMarkSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标记点符号
@param [in] ptrMarkerSymbol    点符号
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetTickLineSymbol">
@brief 获取标记线符号
@return SysDisplay::LineSymbolPtr   线符号

</member>
        <member name="M:SysCarto.IMapGrid.SetTickLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标记线符号
@param [in] ptrLineSymbol    线符号
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetTickLength">
@brief 获取标记长度
@return double  子标记长度

</member>
        <member name="M:SysCarto.IMapGrid.SetTickLength(System.Double)">
@brief 设置标记长度
@param [in] nValue    长度
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetSubTickLineSymbol">
@brief 获取子标记线符号
@return SysDisplay::LineSymbolPtr   线符号

</member>
        <member name="M:SysCarto.IMapGrid.SetSubTickLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置子标记线符号
@param [in] ptrLineSymbol    线符号
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetSubTickLength">
@brief 获取子标记长度
@return double  子标记长度

</member>
        <member name="M:SysCarto.IMapGrid.SetSubTickLength(System.Double)">
@brief 设置子标记长度
@param [in] nValue    长度
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetSubTickCount">
@brief 获取子标记数量
@return int  子标记数量

</member>
        <member name="M:SysCarto.IMapGrid.SetSubTickCount(System.Int32)">
@brief 设置子标记数量
@param [in] nValue    子标记数量
@return void

</member>
        <member name="M:SysCarto.IMapGrid.SetTickVisibility(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
@brief 设置全部标记可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.SetSubTickVisibility(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
@brief 设置子标记可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.SetLabelVisibility(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
@brief 设置标签可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.SetDefaults(SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置默认属性值
@param [in] ptrMapFrame   地图框架对象
@return void

</member>
        <member name="M:SysCarto.IMapGrid.QueryTickVisibility(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取全部标记可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.QuerySubTickVisibility(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取子标记可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.QueryLabelVisibility(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取标签可视化
@param [in] leftVis    左侧是否可视化
@param [in] topVis     顶部是否可视化
@param [in] rightVis   右侧是否可视化
@param [in] bottomVis  底部是否可视化
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetName">
@brief  获取名字
@return QString  名字

</member>
        <member name="M:SysCarto.IMapGrid.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名字
@param [in] strName 名字
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetLineSymbol">
@brief  获取线样式
@return SysDisplay::LineSymbolPtr  线样式

</member>
        <member name="M:SysCarto.IMapGrid.SetLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置线样式
@param [in] ptrLineSymbol 线样式
@return void

</member>
        <member name="M:SysCarto.IMapGrid.GetLabelFormat">
@brief  获取标签格式
@return IGridLabelPtr  标签格式

</member>
        <member name="M:SysCarto.IMapGrid.SetLabelFormat(SysUtility._ptr_t&lt;SysCarto.IGridLabel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标签格式
@param [in] ptrGridLabel 网格标签
@return void

</member>
        <member name="M:SysCarto.IMapGrid.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.MapFrameElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter      绘图设备
@param [in] ptrTracker   取消转换
@param [in] ptrTrans     显示转换对象
@param [in] ptrMapFrame  地图框架指针
@return void

</member>
        <member name="M:SysCarto.IMapGrid.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IMapGrid.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MapGridSerializer">
@brief  声明矢量要素序列化渲染类为当前类的友元类

</member>
        <member name="T:SysCarto.IMapGrid">
@brief   类的前置声明和智能指针定义


@class IMapGrid
@brief  地图网格

</member>
        <member name="D:SysGeometry.MultiPolylinePtr">
@brief  多线对象 智能指针对象

</member>
        <member name="M:SysGeometry.MultiPolyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.MultiPolyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance 距离
@return PointPtr 点对象指针

</member>
        <member name="M:SysGeometry.MultiPolyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.MultiPolyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.MultiPolyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.MultiPolyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.MultiPolyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.MultiPolyline.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolyline.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.MultiPolyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.MultiPolyline">
@class MultiPolyline
	* @brief 多线对象

</member>
        <member name="D:SysGeometry.GeometryCollectionPtr">
@brief 图形集合 智能指针对象

</member>
        <member name="F:SysGeometry.GeometryCollection.m_QVectorGeometry">
@brief Geometry集合对象

</member>
        <member name="M:SysGeometry.GeometryCollection.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Centroid">
@brief 获得质点
@return GeometryPtr 质点指针

</member>
        <member name="M:SysGeometry.GeometryCollection.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围对象指针

</member>
        <member name="M:SysGeometry.GeometryCollection.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.GeometryCollection.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.GeometryCollection.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.GeometryCollection.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.GeometryCollection.ClearGeometries">
@brief 清除Geometry
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.GetGeometry(System.Int32)">
@brief 获得Geometry对象
@param[in] int index 移除的编号
@return GeometryPtr Geometry指针

</member>
        <member name="M:SysGeometry.GeometryCollection.RemoveGeometry(System.Int32)">
@brief 移除Geometry对象
@param[in] int index 移除的编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.GetGeometryCount">
@brief 获得Geometry的总个数
@return int 图形Geometry的总个数

</member>
        <member name="M:SysGeometry.GeometryCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.GeometryCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.GeometryCollection">
@class GeometryCollection
	* @brief 图形集合

</member>
        <member name="F:SysCarto.IGridLabel.m_LabelAlignment">
@brief 标签准线数组

</member>
        <member name="F:SysCarto.IGridLabel.m_dLabelOffset">
@brief 标签偏移量  (单位：厘米)

</member>
        <member name="F:SysCarto.IGridLabel.m_ptrTextSymbol">
@brief 文本符号

</member>
        <member name="M:SysCarto.IGridLabel.GetValueDescription(System.Double,System.Boolean)">
@brief 获取值描述
@param [in] dLabelValue  标签值
@param [in] isLat  是否为纬度
@return QString 值描述

</member>
        <member name="M:SysCarto.IGridLabel.CopyTo(SysCarto.IGridLabel*)">
@brief 拷贝到IGridLabel
@param [in] IGridLabel* pGridLabel  网格标签对象
@return void

</member>
        <member name="M:SysCarto.IGridLabel.GetTextSymbol">
@brief 获取文本符号
@return 	SysDisplay::TextSymbolPtr 文本符号

</member>
        <member name="M:SysCarto.IGridLabel.SetTextSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置文本符号
@param [in] ptrTextSymbol  文本符号
@return void

</member>
        <member name="M:SysCarto.IGridLabel.Clone">
@brief 克隆
@return  IGridLabelPtr  网格标签对象

</member>
        <member name="M:SysCarto.IGridLabel.GetLabelOffset">
@brief 获取标签偏移
@return double 标签偏移

</member>
        <member name="M:SysCarto.IGridLabel.SetLabelOffset(System.Double)">
@brief 设置标签偏移 （The offset of the grid label from the border in points.）
@param [in] dOffset  偏移量
@return void

</member>
        <member name="M:SysCarto.IGridLabel.GetLabelAlignment(SysCarto.pieGridAxisEnum)">
@brief 获取标签准线  
@param [in] enumAxis  网格轴心枚举量
@return bool 是否成功

</member>
        <member name="M:SysCarto.IGridLabel.SetLabelAlignment(SysCarto.pieGridAxisEnum,System.Boolean)">
@brief 设置标签准线  （Indicates if the grid label is horizontal (true) or vertical (false) on the specified axis. ）
@param [in] enumAxis  网格轴心枚举量
@param [in] bHorizontal  是否水平
@return void

</member>
        <member name="M:SysCarto.IGridLabel.GetFont">
@brief 获取字体
@return QFont 字体

</member>
        <member name="M:SysCarto.IGridLabel.SetFont(QFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字体  （The font used by the grid label.）
@param [in] font 字体
@return void

</member>
        <member name="M:SysCarto.IGridLabel.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst,SysCarto.pieGridAxisEnum,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
@brief  绘制
@param [in] painter     绘图设备
@param [in] dLabelValue 标签值
@param [in] ptrPoint    点对象
@param [in] enumAxis    pie网格轴心枚举量
@param [in] ptrTrans    显示转换对象
@param [in] isLat       是否为纬度
@return    void

</member>
        <member name="M:SysCarto.IGridLabel.GetColor">
@brief 获取颜色 
@return QColor 颜色

</member>
        <member name="M:SysCarto.IGridLabel.SetColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色 （//The color of the grid label.）
@param [in] color 颜色
@return void

</member>
        <member name="M:SysCarto.IGridLabel.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IGridLabel.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.GridlabelSerializer">
@brief 声明网格标签序列化类为当前类的友元类

</member>
        <member name="T:SysCarto.IGridLabel">
@brief 类的前置声明和智能指针定义


@class IGridLabel
@brief 网格标签

</member>
        <member name="T:SysCarto.pieGridAxisEnum">
@class pieGridAxisEnum
@brief pie网格轴心枚举

</member>
        <member name="F:pieGridAxisRight">
@brief 右侧轴心

</member>
        <member name="F:pieGridAxisLeft">
@brief 左侧轴心

</member>
        <member name="F:pieGridAxisBottom">
@brief 底部轴心

</member>
        <member name="F:pieGridAxisTop">
@brief 无轴心

@brief 顶部轴心

</member>
        <member name="D:SysCarto.FrameElementBasePtr">
@brief 框架元素基类  智能指针对象

</member>
        <member name="M:SysCarto.FrameElementBase.CopyTo(SysCarto.FrameElementBase*)">
@brief 拷贝到pFrameElementBase
@param [in] FrameElementBase* pFrameElementBase 框架元素基类对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.DrawShadow(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制阴影
@param [in] painter 绘图面板
@param [in] ptrTrasform 显示转换对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.DrawBackground(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制打印页面背景 
@param [in] painter 绘图面板
@param [in] ptrTrasform 显示转换对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.DrawBorder(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制页面边框 
@param [in] painter 绘图面板
@param [in] ptrTrasform 显示转换对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.DrawFrame(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制Frame
@param [in] painter 绘图面板
@param [in] ptrTrasform 显示转换对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.QueryFrameBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取框架边界
@param [in] ptrTrasform 显示转换对象
@return SysGeometry::EnvelopePtr   包络线范围对象

</member>
        <member name="M:SysCarto.FrameElementBase.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.FrameElementBase.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FrameElementBase.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.FrameElementBase">
@class FrameElementBase
@brief  框架元素基类

</member>
        <member name="F:SysCarto.SnapGrid.m_bVisible">
@brief 是否可视化

</member>
        <member name="F:SysCarto.SnapGrid.m_dSpacingV">
@brief 垂直间隔

</member>
        <member name="F:SysCarto.SnapGrid.m_dSpacingH">
@brief 水平间隔

</member>
        <member name="M:SysCarto.SnapGrid.SetVisility(System.Boolean)">
@brief 设置可视化
@param [in] visble 可视化
@return  void

</member>
        <member name="M:SysCarto.SnapGrid.IsVisible">
@brief 是否可视化
@return  bool  是否可视化

</member>
        <member name="M:SysCarto.SnapGrid.SetVerticalSpacing(System.Double)">
@brief 设置垂直间隔
@param [in] space 间隔
@return  void

</member>
        <member name="M:SysCarto.SnapGrid.GetVerticalSpacing">
@brief 获取垂直间隔
@return  double  垂直间隔

</member>
        <member name="M:SysCarto.SnapGrid.SetHorizontalSpacing(System.Double)">
@brief 设置水平间隔
@param[in] space 间隔
@return  void

</member>
        <member name="M:SysCarto.SnapGrid.GetHorizontalSpacing">
@brief 获取水平间隔
@return  double  水平间隔

</member>
        <member name="M:SysCarto.SnapGrid.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SnapGrid.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.SnapGrid">
@class SnapGrid
@brief 捕捉网格线

</member>
        <member name="M:SysCarto.SnapGuides.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SnapGuides.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.SnapGuides">
@class SnapGuides
@brief 捕捉参考线

</member>
        <member name="D:SysDisplay.SimpleLineSymbolPtr">
@brief 简单线符号类 智能指针对象

</member>
        <member name="F:SysDisplay.SimpleLineSymbol.m_Style">
@brief 线样式

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.SetStyle(SysDisplay.SimpleLineStyle)">
@brief 设置简单线样式
@param[in] SimpleLineStyle style 简单线样式
@return void

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.GetStyle">
@brief 获得简单线样式
@return SimpleLineStyle 简单线样式

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.SimpleLineSymbol">
@class SimpleLineSymbol
	* @brief 简单线符号类 

</member>
        <member name="M:PIE.Carto.Map.RaiseElementsSelectionChangedEvent">
            <summary>
选择要素变化事件
</summary>
            <return />
            <summary>
选择要素变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementsReorderedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素排序事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素排序事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseAllElementsDeletedEvent">
            <summary>
触发全部要素删除事件
</summary>
            <return />
            <summary>
触发多要素删除事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementsDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素删除事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素删除事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementsAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发多要素添加事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
            <summary>
触发多要素添加事件
</summary>
            <param name="ptrElements">元素指针集合</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementUpdatedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素更新事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素更新事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素删除事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素删除事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseElementAddedEvent(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发要素添加事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
            <summary>
触发要素添加事件
</summary>
            <param name="ptrElement">元素指针</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseMapPreLoadFinishedEvent">
            <summary>
触发地图预加载完成事件
</summary>
            <return />
            <summary>
触发地图预加载完成事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseCurrentLayerChangedEvent">
            <summary>
触发当前图层变化事件
</summary>
            <return />
            <summary>
触发当前图层变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeforeCurrentLayerChangingEvent">
            <summary>
触发当前图层变化前事件
</summary>
            <return />
            <summary>
触发当前图层变化前事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseAfterDrawEvent">
            <summary>
触发绘图后事件
</summary>
            <return />
            <summary>
触发绘图后事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeginDrawEvent">
            <summary>
 触发绘图前事件
</summary>
            <return />
            <summary>
 触发绘图前事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseViewRefreshedEvent">
            <summary>
视图刷新事件句柄
</summary>
            <param name="ptrActiveView">视图对象</param>
            <param name="dpType">LayerDrawPhaseType类型</param>
            <param name="data">IntPtr指针</param>
            <param name="ptrEnvelope">范围</param>
            <return />
            <summary>
视图刷新事件句柄
</summary>
            <param name="ptrActiveView">视图对象</param>
            <param name="dpType">ViewDrawPhaseType类型</param>
            <param name="data">IntPtr指针</param>
            <param name="ptrEnvelope">范围</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseSpatialReferenceChangedEvent">
            <summary>
空间参考信息变化事件句柄
</summary>
            <return />
            <summary>
空间参考信息变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseFeaturesSelectionChangedEvent">
            <summary>
要素选择变化事件句柄
</summary>
            <return />
            <summary>
要素选择变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseContentsClearedEvent">
            <summary>
图层内容清除事件句柄
</summary>
            <return />
            <summary>
图层内容清除事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseContentsChangedEvent">
            <summary>
图层内容变化事件句柄
</summary>
            <return />
            <summary>
图层内容变化事件句柄
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseFocusMapChangedEvent">
            <summary>
 触发图层变化事件
</summary>
            <return />
            <summary>
 触发图层变化事件
</summary>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseLayersDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层移除事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层移除事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseLayersAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层添加事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层添加事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseLayerReorderedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
触发图层排序事件
</summary>
            <param name="pLayer">图层对象</param>
            <param name="index">图层索引</param>
            <return />
            <summary>
触发图层排序事件
</summary>
            <param name="pLayer">图层对象</param>
            <param name="index">图层索引</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseLayerDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层移除前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层移除事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseLayerAddedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeforeLayersDeletedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层移除前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层移除前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeforeLayersAddedEvent(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层多图层添加前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
            <summary>
触发图层多图层添加前事件
</summary>
            <param name="pLayers">多图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeforeLayerDeletedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层移除前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层移除前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="M:PIE.Carto.Map.RaiseBeforeLayerAddedEvent(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
触发图层添加事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
            <summary>
触发图层添加前事件
</summary>
            <param name="pLayer">图层对象</param>
            <return />
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementsSelectionChangedEventHandler">
            <summary>
选择要素变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementsReorderedEventHandler">
            <summary>
多要素排序EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnAllElementsDeletedEventHandler">
            <summary>
所有要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementsDeletedEventHandler">
            <summary>
多要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementsAddedEventHandler">
            <summary>
多要素更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementUpdatedEventHandler">
            <summary>
要素更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementDeletedEventHandler">
            <summary>
要素删除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnElementAddedEventHandler">
            <summary>
要素添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnMapPreLoadFinishedEventHandler">
            <summary>
当前地图预加载完成EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnCurrentLayerChangedEventHandler">
            <summary>
当前图层变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeforeCurrentLayerChangingEventHandler">
            <summary>
当前图层变化前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnAfterDrawEventHandler">
            <summary>
绘图后EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeginDrawEventHandler">
            <summary>
绘图前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnViewRefreshedEventHandler">
            <summary>
视图范围更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnSpatialReferenceChangedEventHandler">
            <summary>
空间参考信息变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnFeaturesSelectionChangedEventHandler">
            <summary>
要素选择变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnContentsClearedEventHandler">
            <summary>
图层内容清除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnContentsChangedEventHandler">
            <summary>
图层内容变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnFocusMapChangedEventHandler">
            <summary>
图层变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnLayersDeletedEventHandler">
            <summary>
多图层移除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnLayersAddedEventHandler">
            <summary>
多图层添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnLayerReorderedEventHandler">
            <summary>
图层排序EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnLayerDeletedEventHandler">
            <summary>
图层移除EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnLayerAddedEventHandler">
            <summary>
图层添加EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeforeLayersDeletedEventHandler">
            <summary>
多图层移除前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeforeLayersAddedEventHandler">
            <summary>
多图层添加前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeforeLayerDeletedEventHandler">
            <summary>
图层移除前EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_OnBeforeLayerAddedEventHandler">
            <summary>
图层添加前EventHandler
</summary>
        </member>
        <member name="M:PIE.Carto.Map.GetLayer(SysCarto.Layer*)">
            <summary>
获得.Net图层
</summary>
            <param name="pLayer">C++图层指针</param>
            <returns>.Net图层</returns>
            <summary>
获得.Net图层
</summary>
            <param name="pLayer">C++图层指针</param>
            <returns>.Net图层</returns>
        </member>
        <member name="M:PIE.Carto.Map.ConstructCElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
        </member>
        <member name="M:PIE.Carto.Map.ConstructCLRElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
        </member>
        <member name="M:PIE.Carto.Map.ConstructCElement(PIE.Carto.IElement)">
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.Map.ConstructCLRElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
        </member>
        <member name="M:PIE.Carto.Map.FindLayerByIDFromLayer(PIE.Carto.ILayer,System.String)">
            <summary>
查找图层组下的图层
</summary>
            <param name="layer">要查找的图层</param>
            <param name="layerID">子图层ID</param>
            <summary>
查找图层组下的图层
</summary>
            <param name="layer">要查找的图层</param>
            <param name="layerID">子图层ID</param>
        </member>
        <member name="F:PIE.Carto.Map.m_CurrentLayer">
            <summary>
当前图层
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_DisplayTransformation">
            <summary>
DisplayTransformation
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_ContentImage">
            <summary>
ContentImage
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_TrackerCancel">
            <summary>
TrackerCancel
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_Layers">
            <summary>
图层集合
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_NeedUpdataContentImage">
            <summary>
是否需要更新ContentImage
</summary>
        </member>
        <member name="F:PIE.Carto.Map.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.Map.#ctor(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Carto.Map.OnElementsSelectionChanged">
            <summary>
选择要素变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementsReordered">
            <summary>
多要素排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnAllElementsDeleted">
            <summary>
所有要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementsDeleted">
            <summary>
多要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementsAdded">
            <summary>
多要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementUpdated">
            <summary>
要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementDeleted">
            <summary>
要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnElementAdded">
            <summary>
要素添加事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.Map.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制元素
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
            <summary>
绘制元素
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.Map.SendToBack(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.Map.SendBackward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.Map.BringToFront(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.Map.BringForward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="P:PIE.Carto.Map.NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.Map.UpdateElement(System.String,PIE.Carto.IElement)">
            <summary>
更新Element
</summary>
            <param name="element">element</param>
            <summary>
更新Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectElement(PIE.Carto.IElement)">
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectAllElements">
            <summary>
取消所有Element的选择
</summary>
            <summary>
取消所有Element的选择
</summary>
        </member>
        <member name="M:PIE.Carto.Map.GetSelectionBounds">
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetSelectedElements">
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
        </member>
        <member name="M:PIE.Carto.Map.SelectedElement(System.Int32)">
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
        </member>
        <member name="M:PIE.Carto.Map.SelectElementsByGeometry(PIE.Geometry.IGeometry,System.Boolean)">
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectElement(PIE.Carto.IElement)">
            <summary>
选择Element
</summary>
            <param name="element">element</param>
            <summary>
选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectAllElements">
            <summary>
选择所有的Element
</summary>
            <summary>
选择所有的Element
</summary>
        </member>
        <member name="M:PIE.Carto.Map.IsElementSelected(PIE.Carto.IElement)">
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
        </member>
        <member name="M:PIE.Carto.Map.QueryElementsByPoint(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double)">
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.Map.FindElementByName(System.String)">
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.Map.FindElementByID(System.String)">
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">ID</param>
            <returns>Element</returns>
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">ID</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.Map.QueryElements(PIE.Geometry.IGeometry)">
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
        </member>
        <member name="M:PIE.Carto.Map.DeleteAllElements">
            <summary>
删除Element集合
</summary>
            <summary>
删除Element集合
</summary>
        </member>
        <member name="M:PIE.Carto.Map.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除Element
</summary>
            <param name="element">Element元素</param>
            <summary>
删除Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.Map.GetAllElements">
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
        </member>
        <member name="M:PIE.Carto.Map.AddElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.Map.AddElement(PIE.Carto.IElement)">
            <summary>
添加
</summary>
            <param name="element">元素</param>
            <summary>
添加
</summary>
            <param name="element">对参数进行描述说明</param>
        </member>
        <member name="P:PIE.Carto.Map.ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
        </member>
        <member name="P:PIE.Carto.Map.ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnMapPreLoadFinished">
            <summary>
地图预加载完成事件
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnCurrentLayerChanged">
            <summary>
当前图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeforeCurrentLayerChanging">
            <summary>
当前图层变化前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnAfterDraw">
            <summary>
绘图后事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeginDraw">
            <summary>
绘图前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnViewRefreshed">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnSpatialReferenceChanged">
            <summary>
空间参考信息变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnFeaturesSelectionChanged">
            <summary>
要素选择变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnContentsCleared">
            <summary>
图层内容清除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnContentsChanged">
            <summary>
图层内容变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnFocusMapChanged">
            <summary>
图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnLayersDeleted">
            <summary>
多图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnLayersAdded">
            <summary>
多图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnLayerReordered">
            <summary>
图层排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnLayerDeleted">
            <summary>
图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnLayerAdded">
            <summary>
图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeforeLayersDeleted">
            <summary>
多图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeforeLayersAdded">
            <summary>
多图层添加前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeforeLayerDeleted">
            <summary>
图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.Map.OnBeforeLayerAdded">
            <summary>
图层添加事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.Map.Output(PIE.Carto.IExport,System.Int32,System.Drawing.RectangleF,PIE.Geometry.IEnvelope,PIE.SystemUI.ITrackerCancel)">
            <summary>
导出地图
</summary>
            <param name="IExport">IExport对象</param>
            <param name="RectangleF">导出设备范围</param>
            <param name="IEnvelope">导出地图范围</param>
            <param name="ITrackerCancel">ITrackerCancel对象</param>
            <summary>
导出地图
</summary>
            <param name="IExport">IExport对象</param>
            <param name="RectangleF">导出设备范围</param>
            <param name="IEnvelope">导出地图范围</param>
            <param name="ITrackerCancel">ITrackerCancel对象</param>
        </member>
        <member name="M:PIE.Carto.Map.PanTo(PIE.Geometry.IPoint!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图平移到以几何对象中心为中心
</summary>
            <param name="point">几何对象</param>
            <summary>
视图平移到以几何对象中心为中心
</summary>
            <param name="point">几何对象</param>
        </member>
        <member name="M:PIE.Carto.Map.ZoomTo(PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图缩放到几何对象
</summary>
            <param name="geometry">几何对象</param>
            <summary>
视图缩放到几何对象
</summary>
            <param name="geometry">几何对象</param>
        </member>
        <member name="M:PIE.Carto.Map.StopRender">
            <summary>
停止渲染
</summary>
            <summary>
停止渲染
</summary>
        </member>
        <member name="M:PIE.Carto.Map.DrawElement(PIE.Carto.IElement)">
            <summary>
绘制Element
</summary>
            <param name="element">Element</param>
            <summary>
绘制Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.Map.DrawGeometry(PIE.Display.ISymbol!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制Geometry
</summary>
            <param name="symbol">符号样式</param>
            <param name="geometry">Geometry</param>
            <summary>
绘制Geometry
</summary>
            <param name="symbol">符号样式</param>
            <param name="geometry">Geometry</param>
        </member>
        <member name="M:PIE.Carto.Map.ZoomAction(System.Drawing.Point,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="centerPos">中心点-屏幕点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
            <summary>
缩放
</summary>
            <param name="centerPos">中心点-屏幕点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.Map.PanAction(System.Double,System.Double)">
            <summary>
平移
</summary>
            <param name="deltaX">X方向的距离</param>
            <param name="deltaY">Y方向的距离</param>
            <summary>
平移
</summary>
            <param name="deltaX">X方向的距离</param>
            <param name="deltaY">Y方向的距离</param>
        </member>
        <member name="M:PIE.Carto.Map.FinishDrawing">
            <summary>
结束绘制
</summary>
            <summary>
结束绘制
</summary>
        </member>
        <member name="M:PIE.Carto.Map.StartDrawing">
            <summary>
开始绘制
</summary>
            <summary>
开始绘制
</summary>
        </member>
        <member name="M:PIE.Carto.Map.ZoomByFactor(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
以某点为中心缩放
</summary>
            <param name="ptrCenter">中心点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
            <summary>
以某点为中心缩放
</summary>
            <param name="ptrCenter">中心点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.Map.Refresh">
            <summary>
地图刷新
</summary>
            <summary>
地图刷新
</summary>
        </member>
        <member name="M:PIE.Carto.Map.PartialRefresh(&lt;unknown type&gt;,System.Boolean)">
            <summary>
地图刷新(是否清除缓存）
</summary>
            <param name="dpType">刷新方式</param>
            <summary>
地图刷新(是否清除缓存）
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.Map.PartialRefresh(&lt;unknown type&gt;)">
            <summary>
地图刷新
</summary>
            <param name="dpType">刷新方式</param>
            <summary>
地图刷新
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.Map.HitTestMap(PIE.Geometry.IPoint)">
            <summary>
HitTestMap
</summary>
            <param name="point">点</param>
            <returns>地图对象</returns>
            <summary>
HitTestMap
</summary>
            <param name="point">点</param>
            <returns>地图对象</returns>
        </member>
        <member name="M:PIE.Carto.Map.Draw(System.Drawing.Graphics,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="graphics">graphics对象</param>
            <param name="tracker">tracker取消</param>
            <summary>
绘制
</summary>
            <param name="graphics">graphics对象</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.Map.SetContentImage(System.Drawing.Image)">
            <summary>
设置显示Image
</summary>
            <param name="img">Image</param>
            <summary>
设置显示Image
</summary>
            <param name="img">Image</param>
        </member>
        <member name="P:PIE.Carto.Map.TrackerCancel">
            <summary>
获得TrackerCancel对象
</summary>
        </member>
        <member name="P:PIE.Carto.Map.IsShowSelection">
            <summary>
是否显示选择
</summary>
        </member>
        <member name="P:PIE.Carto.Map.ExportFrame">
            <summary>
获取输出图框
</summary>
            <returns>输出图框</returns>
        </member>
        <member name="P:PIE.Carto.Map.ExtentStack">
            <summary>
获得范围栈
</summary>
        </member>
        <member name="P:PIE.Carto.Map.FullExtent">
            <summary>
地图全图范围
</summary>
        </member>
        <member name="P:PIE.Carto.Map.Extent">
            <summary>
地图视图范围
</summary>
        </member>
        <member name="P:PIE.Carto.Map.IsActived">
            <summary>
是否激活状体
</summary>
        </member>
        <member name="P:PIE.Carto.Map.FocusMap">
            <summary>
地图对象
</summary>
        </member>
        <member name="P:PIE.Carto.Map.DisplayTransformation">
            <summary>
获取DisplayTransformation
</summary>
        </member>
        <member name="P:PIE.Carto.Map.GraphicsContainer">
            <summary>
获取标绘图层-默认
</summary>
        </member>
        <member name="P:PIE.Carto.Map.DefaultTempLayer">
            <summary>
获取临时图层
</summary>
        </member>
        <member name="P:PIE.Carto.Map.CurrentLayer">
            <summary>
获取或设置当前地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.Map.DeActivate">
            <summary>
反激活
</summary>
            <summary>
反激活
</summary>
        </member>
        <member name="M:PIE.Carto.Map.Activate(System.Int32)">
            <summary>
激活
</summary>
            <param name="handle">显示窗体句柄</param>
            <summary>
激活
</summary>
            <param name="handle">显示窗体句柄</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectFeatures(System.String,System.Collections.Generic.IList`1{System.Int64})">
            <summary>
取消选择集
</summary>
            <param name="layerID">图层ID</param>
            <param name="lstFIDs">要素ID集</param>
            <summary>
取消选择集
</summary>
            <param name="layerID">图层ID</param>
            <param name="lstFIDs">要素ID集</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectFeature(System.String,System.Int64)">
            <summary>
取消选择
</summary>
            <param name="layerID">图层编号</param>
            <param name="fid">要素ID</param>
            <summary>
取消选择
</summary>
            <param name="layerID">图层编号</param>
            <param name="fid">要素ID</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSelectFeatures(PIE.Carto.ILayer,System.Collections.Generic.IList`1{PIE.DataSource.IFeature})">
            <summary>
取消选择集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
            <summary>
取消选择集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
        </member>
        <member name="M:PIE.Carto.Map.UnSlectFeature(PIE.Carto.ILayer,PIE.DataSource.IFeature)">
            <summary>
取消选择
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
            <summary>
取消选择
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
        </member>
        <member name="M:PIE.Carto.Map.ClearSelectionFeatures">
            <summary>
清除选择
</summary>
            <summary>
清除选择
</summary>
        </member>
        <member name="P:PIE.Carto.Map.SelectionFeatureCount">
            <summary>
选中要素个数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.GetLayerSelectionFeatures(PIE.Carto.ILayer)">
            <summary>
得到某个图层下要素的选择集合
</summary>
            <param name="layer">图层</param>
            <returns>选择集合</returns>
            <summary>
得到某个图层下要素的选择集合
</summary>
            <param name="layer">图层</param>
            <returns>选择集合</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetSelectionFeatures">
            <summary>
获得选中要素
</summary>
            <returns>选中要素集合</returns>
            <summary>
获得选中要素
</summary>
            <returns>选中要素集合</returns>
        </member>
        <member name="M:PIE.Carto.Map.SelectFeatures(System.String,System.Collections.Generic.IList`1{System.Int64})">
            <summary>
选择要素集
</summary>
            <param name="layerID">图层Id</param>
            <param name="lstFIDs">要素集的ID集</param>
            <summary>
选择要素集
</summary>
            <param name="layerID">图层Id</param>
            <param name="lstFIDs">要素集的ID集</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectFeatures(PIE.Carto.ILayer,System.Collections.Generic.IList`1{PIE.DataSource.IFeature})">
            <summary>
选择要素集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
            <summary>
选择要素集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectFeature(System.String,System.Int64)">
            <summary>
选择要素
</summary>
            <param name="layerID">图层</param>
            <param name="fid">要素编号</param>
            <summary>
选择要素
</summary>
            <param name="layerID">图层</param>
            <param name="fid">要素编号</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectFeature(PIE.Carto.ILayer,PIE.DataSource.IFeature)">
            <summary>
选择要素
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
            <summary>
选择要素
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
        </member>
        <member name="M:PIE.Carto.Map.SelectFeatureByShape(PIE.Geometry.IGeometry,System.Collections.Generic.IList`1{PIE.Carto.ILayer},System.Boolean,System.Boolean)">
            <summary>
选择要素
</summary>
            <param name="geometry">范围</param>
            <param name="queryLayers">图层集</param>
            <param name="clearBefore">是否清除之前选择集</param>
            <param name="justOne">是否只选择一个</param>
            <summary>
选择要素
</summary>
            <param name="geometry">范围</param>
            <param name="queryLayers">图层集</param>
            <param name="clearBefore">是否清除之前选择集</param>
            <param name="justOne">是否只选择一个</param>
        </member>
        <member name="M:PIE.Carto.Map.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <returns>设备点</returns>
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.Map.ToMapPoint(System.Drawing.Point)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <returns>地图点</returns>
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.Map.InvalidLayerCache(PIE.Carto.ILayer)">
            <summary>
清除无效图层缓存
</summary>
            <param name="layer">选中的图层</param>
            <summary>
清除无效图层缓存
</summary>
            <param name="layer">选中的图层</param>
        </member>
        <member name="M:PIE.Carto.Map.IsRendering">
            <summary>
是否在渲染
</summary>
            <returns>是或否</returns>
            <summary>
是否在渲染
</summary>
            <returns>是或否</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetContentImage">
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.Map.SwipeLayer(PIE.Carto.ILayer!System.Runtime.CompilerServices.IsConst,System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
调整顺序
</summary>
            <param name="layer">选中的图层</param>
            <param name="startPos">起始点</param>
            <param name="currPoint">当前点</param>
            <param name="direction">方向</param>
            <summary>
卷帘
</summary>
            <param name="layer">选中的图层</param>
            <param name="startPos">起始点</param>
            <param name="currPoint">当前点</param>
            <param name="direction">方向</param>
        </member>
        <member name="M:PIE.Carto.Map.FindLayerByID(System.String)">
            <summary>
通过编号获得图层
</summary>
            <param name="layerID">图层ID</param>
            <returns>图层</returns>
            <summary>
通过编号获得图层
</summary>
            <param name="layerID">图层ID</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetSubLayers(PIE.Carto.ILayer)">
            <summary>
获得Layer下所有的Layers
</summary>
            <param name="layer">图层组</param>
            <returns>Layers</returns>
            <summary>
获得Layer下所有的Layers
</summary>
            <param name="layer">图层组</param>
            <returns>Layers</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetAllLayer">
            <summary>
获得所有图层
</summary>
            <returns>所有图层</returns>
            <summary>
获得所有图层
</summary>
            <returns>所有图层</returns>
        </member>
        <member name="M:PIE.Carto.Map.GetLayer(System.Int32)">
            <summary>
获得图层
</summary>
            <param name="index">图层编号</param>
            <returns>图层</returns>
            <summary>
获得图层
</summary>
            <param name="index">图层编号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.Map.MoveLayerEx(PIE.Carto.IGroupLayer,PIE.Carto.IGroupLayer,PIE.Carto.ILayer,System.Int32)">
            <summary>
移动图层
</summary>
            <param name="fromGLayer">来源图层组</param>
            <param name="toGLayer">目标图层组</param>
            <param name="layer">图层</param>
            <param name="position">移动的位置</param>
            <summary>
移动图层
</summary>
            <param name="fromGLayer">来源图层组</param>
            <param name="toGLayer">目标图层组</param>
            <param name="layer">图层</param>
            <param name="position">移动的位置</param>
        </member>
        <member name="M:PIE.Carto.Map.MoveLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
移动图层
</summary>
            <param name="layer">图层</param>
            <param name="toIndex">移动的位置</param>
            <summary>
移动图层
</summary>
            <param name="layer">图层</param>
            <param name="toIndex">移动的位置</param>
        </member>
        <member name="M:PIE.Carto.Map.Contains(PIE.Carto.ILayer)">
            <summary>
地图是否包含图层
</summary>
            <param name="layer">图层</param>
            <returns>是否包含</returns>
            <summary>
地图是否包含图层
</summary>
            <param name="layer">图层</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:PIE.Carto.Map.ClearLayers">
            <summary>
清除图层
</summary>
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.Map.DeleteLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer})">
            <summary>
删除图层组
</summary>
            <param name="layers">图层组</param>
            <summary>
删除图层组
</summary>
            <param name="layers">图层组</param>
        </member>
        <member name="M:PIE.Carto.Map.DeleteLayer(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="M:PIE.Carto.Map.DeleteLayer(System.Int32)">
            <summary>
删除图层
</summary>
            <param name="index">图层位置</param>
            <summary>
删除图层
</summary>
            <param name="index">图层位置</param>
        </member>
        <member name="M:PIE.Carto.Map.AddLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer},System.Int32)">
            <summary>
添加图层组到指定位置
</summary>
            <param name="layers">图层组</param>
            <param name="index">指定位置</param>
            <summary>
添加图层组到指定位置
</summary>
            <param name="layers">图层组</param>
            <param name="index">指定位置</param>
        </member>
        <member name="M:PIE.Carto.Map.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
添加图层到指定位置
</summary>
            <param name="layer">图层</param>
            <param name="index">指定位置</param>
            <summary>
添加图层到指定位置
</summary>
            <param name="layer">图层</param>
            <param name="index">指定位置</param>
        </member>
        <member name="M:PIE.Carto.Map.AddLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer})">
            <summary>
添加图层组
</summary>
            <param name="layers">图层组</param>
            <summary>
添加图层组
</summary>
            <param name="layers">图层组</param>
        </member>
        <member name="M:PIE.Carto.Map.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="M:PIE.Carto.Map.Clone">
            <summary>
克隆
</summary>
            <returns>Map克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>Map克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.Map.LayerCount">
            <summary>
获取地图图层数目
</summary>
        </member>
        <member name="P:PIE.Carto.Map.ClipGeometry">
            <summary>
获取或设置地图ClipGeometry
</summary>
        </member>
        <member name="P:PIE.Carto.Map.ReferenceScale">
            <summary>
获取或设置地图ReferenceScale
</summary>
        </member>
        <member name="P:PIE.Carto.Map.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.Map.MapUnits">
            <summary>
获取或设置地图单位
</summary>
        </member>
        <member name="P:PIE.Carto.Map.SpatialReference">
            <summary>
获取或设置坐标参考
</summary>
        </member>
        <member name="P:PIE.Carto.Map.Name">
            <summary>
获取或设置地图名称
</summary>
        </member>
        <member name="P:PIE.Carto.Map.ID">
            <summary>
获取地图ID
</summary>
        </member>
        <member name="M:PIE.Carto.Map.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Map.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.Map">
            <summary>
Map对象类
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnMapPreLoadFinished">
            <summary>
地图预加载完成事件
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnCurrentLayerChanged">
            <summary>
当前图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeforeCurrentLayerChanging">
            <summary>
当前图层变化前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnAfterDraw">
            <summary>
绘图后事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeginDraw">
            <summary>
绘图前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnViewRefreshed">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnSpatialReferenceChanged">
            <summary>
空间参考信息变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnFeaturesSelectionChanged">
            <summary>
要素选择变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnContentsCleared">
            <summary>
图层内容清除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnContentsChanged">
            <summary>
图层内容变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnFocusMapChanged">
            <summary>
图层变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnLayersDeleted">
            <summary>
多图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnLayersAdded">
            <summary>
多图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnLayerReordered">
            <summary>
图层排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnLayerDeleted">
            <summary>
图层移除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnLayerAdded">
            <summary>
图层添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeforeLayersDeleted">
            <summary>
多图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeforeLayersAdded">
            <summary>
多图层添加前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeforeLayerDeleted">
            <summary>
图层移除前事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IActiveViewEvents.OnBeforeLayerAdded">
            <summary>
图层添加前事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.IActiveViewEvents">
            <summary>
IActiveViewEvents接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnMapPreLoadFinishedEventHandler">
            <summary>
当前图层变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnCurrentLayerChangedEventHandler">
            <summary>
当前图层变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnBeforeCurrentLayerChangingEventHandler">
            <summary>
当前图层变化前事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnAfterDrawEventHandler">
            <summary>
绘图后事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnBeginDrawEventHandler">
            <summary>
绘图前事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnViewRefreshedEventHandler">
            <summary>
视图刷新事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnSpatialReferenceChangedEventHandler">
            <summary>
空间参考信息变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnFeaturesSelectionChangedEventHandler">
            <summary>
要素选择变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnContentsClearedEventHandler">
            <summary>
图层内容清除事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnContentsChangedEventHandler">
            <summary>
图层内容变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnFocusMapChangedEventHandler">
            <summary>
图层变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnLayersDeletedEventHandler">
            <summary>
多图层移除事件句柄
</summary>
            <param name="layers">Layers对象</param>
        </member>
        <member name="T:PIE.Carto.OnBeforeLayersDeletedEventHandler">
            <summary>
多图层移除前事件句柄
</summary>
            <param name="layers">Layers对象</param>
        </member>
        <member name="T:PIE.Carto.OnLayersAddedEventHandler">
            <summary>
多图层添加事件句柄
</summary>
            <param name="layers">Layers对象</param>
        </member>
        <member name="T:PIE.Carto.OnBeforeLayersAddedEventHandler">
            <summary>
多图层添加前事件句柄
</summary>
            <param name="layers">Layers对象</param>
        </member>
        <member name="T:PIE.Carto.OnLayerReorderedEventHandler">
            <summary>
图层排序事件句柄
</summary>
            <param name="layer">Layer对象</param>
            <param name="index">索引编号</param>
        </member>
        <member name="T:PIE.Carto.OnLayerDeletedEventHandler">
            <summary>
图层移除事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="T:PIE.Carto.OnBeforeLayerDeletedEventHandler">
            <summary>
图层移除前事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="T:PIE.Carto.OnLayerAddedEventHandler">
            <summary>
图层添加事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="T:PIE.Carto.OnBeforeLayerAddedEventHandler">
            <summary>
图层添加前事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="D:SysCarto.TransparentAfterFilterPtr">
@brief  透明度后置过滤器 智能指针对象

</member>
        <member name="F:SysCarto.TransparentAfterFilter.m_colorValue">
@brief 颜色值

</member>
        <member name="M:SysCarto.TransparentAfterFilter.GetFilterValue">
@brief 获取过滤值
@return  QColor  颜色值

</member>
        <member name="M:SysCarto.TransparentAfterFilter.SetFilterValue(QColor)">
@brief 设置过滤值
@param [in] color    颜色值
@return  void

</member>
        <member name="M:SysCarto.TransparentAfterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤器
@param [in] memData      像素缓冲数据
@param [in] pRenderData  渲染数据
@param [in] ptrEnvelope  包络线范围
@return  void

</member>
        <member name="M:SysCarto.TransparentAfterFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TransparentAfterFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TransparentAfterFilter">
@class  TransparentAfterFilter
@brief  透明度后置过滤器

</member>
        <member name="D:SysCarto.LutAfterFilterPtr">
@brief  智能指针对象

</member>
        <member name="D:SysCarto.RPCTranslatePreFilterPtr">
@brief  栅格上下文类   智能指针

</member>
        <member name="M:SysCarto.RPCTranslatePreFilter.Process(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,QVector&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte**,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief 是否正在进程 
@param [in] ptrDataset  栅格数据集
@param [in] ptrEnvelope  包络线范围
@param [in] nWidth  宽度
@param [in] nHeight 高度
@param [in] vecBands  栅格波段集合
@param [in] memDataOut 像素缓冲数据
@param [in] dataMask  数据模型
@param [in] ptrTrack  撤销追踪对象
@return bool 是否成功

</member>
        <member name="M:SysCarto.RPCTranslatePreFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤
@param [in] memData    像素缓冲元数据
@param [in] pDataMask  数据模型
@param [in] ptrEnvelope  包络线范围
@return void

</member>
        <member name="M:SysCarto.RPCTranslatePreFilter.FilterExtent(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
@brief 范围过滤 
@param [in] ptrDataset  栅格数据集
@param [in] ptrEnvelope 包络线范围
@param [in] nWidth  宽度
@param [in] nHeight 高度
@return void

</member>
        <member name="M:SysCarto.RPCTranslatePreFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RPCTranslatePreFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RPCTranslatePreFilter">
@class RPCTranslatePreFilter
@brief RPC转换前置过滤器类 

</member>
        <member name="D:SysCarto.TransparentPreFilterPtr">
@brief  透明度前置过滤器 智能指针对象

</member>
        <member name="F:SysCarto.TransparentPreFilter.m_listValue">
@brief 获取过滤器值集合

</member>
        <member name="M:SysCarto.TransparentPreFilter.SetFilterValue(QVector&lt;SysCarto.TransparentPreFilter.FilterValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置过滤器值
@param [in] vecValue     过滤器值集合
@return  void

</member>
        <member name="M:SysCarto.TransparentPreFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤器
@param [in] memData      像素缓冲元数据
@param [in] pDataMask    数据模型
@param [in] ptrEnvelope  包络线范围
@return  void

</member>
        <member name="M:SysCarto.TransparentPreFilter.FilterExtent(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
@brief 过滤器扩展
@param [in] ptrDataset   栅格数据集
@param [in] ptrEnvelope  包络线范围
@param [in] nWidth       宽度
@param [in] nHeight      高度
@return  void

</member>
        <member name="M:SysCarto.TransparentPreFilter.FilterValue.#ctor(System.Double,System.Double)">
@brief 构造函数
@param [in] dMin  最小值
@param [in] dMax  最大值

</member>
        <member name="M:SysCarto.TransparentPreFilter.FilterValue.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TransparentPreFilter.FilterValue">
@brief  FilterValue过滤器值结构体

</member>
        <member name="M:SysCarto.TransparentPreFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TransparentPreFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TransparentPreFilter">
@class  TransparentPreFilter
@brief  透明度前置过滤器

</member>
        <member name="D:SysCarto.FeatureSimpleSymbolRenderPtr">
@brief 矢量简单符号渲染器智能指针

</member>
        <member name="F:SysCarto.FeatureSimpleSymbolRender.m_ptrSymbol">
@brief 渲染符号

</member>
        <member name="F:SysCarto.FeatureSimpleSymbolRender.m_strLabel">
@brief 标注信息

</member>
        <member name="F:SysCarto.FeatureSimpleSymbolRender.m_strDesc">
@brief 描述信息

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.Clone">
@brief 克隆
@return 矢量渲染器对象

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return 符号对象

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染符号
@param [in] ptrSymbol 渲染符号对象
@return void

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.GetSymbol">
@brief 获取渲染符号
@return SysDisplay::SymbolPtr 渲染符号对象

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.SetLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染描述信息
@param [in] strLabel 渲染描述信息
@return  void

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.GetLabel">
@brief 获取渲染标注信息
@return  QString 渲染标注信息

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染描述信息
@param [in] strDesc 渲染描述信息
@return  QString  渲染描述信息

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.GetDescription">
@brief 获取渲染描述信息
@return QString 渲染描述信息
@remark 在图例中使用

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.#ctor(SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrSymbol 符号对象
@param [in] strDesc 描述信息

</member>
        <member name="M:SysCarto.FeatureSimpleSymbolRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.FeatureSimpleSymbolRender">
@class FeatureSimpleSymbolRender
@brief 矢量简单符号渲染器

</member>
        <member name="F:PIE.Carto.CustomerFeatureRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerFeatureRender.#ctor(SysUtility._ptr_t&lt;PIE.Carto.CustomFeatureRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerFeatureRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="M:PIE.Carto.CustomerFeatureRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerFeatureRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.CustomerFeatureRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.CustomerFeatureRender">
            <summary>
矢量简单符号渲染器类
</summary>
        </member>
        <member name="T:PIE.Carto.ICustomerFeatureRender">
            <summary>
 用户自定义符号渲染器接口
</summary>
        </member>
        <member name="F:PIE.Carto.FeatureRender.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureRender.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.FeatureRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.FeatureRender.Draw(PIE.DataSource.IFeatureClass,System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="ptrFClass">已设置过查询条件的要素集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
            <summary>
绘制
</summary>
            <param name="ptrFClass">已设置过查询条件的要素集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.FeatureRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="M:PIE.Carto.FeatureRender.SetProperty(System.String,System.Object)">
            <summary>
设置属性值
</summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
            <summary>
设置属性值
</summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:PIE.Carto.FeatureRender.GetProperty(System.String)">
            <summary>
获得属性值
</summary>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
            <summary>
获得属性值
</summary>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="P:PIE.Carto.FeatureRender.Transparency">
            <summary>
获取或设置透明度百分比（0-100）
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureRender.Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="M:PIE.Carto.FeatureRender.CanRender">
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Carto.FeatureRender">
            <summary>
矢量渲染类
</summary>
        </member>
        <member name="D:PIE.Carto.CustomFeatureRenderPtr">
@brief 渲染器智能指针

</member>
        <member name="F:PIE.Carto.CustomFeatureRender.FeatureSymbolRequest">
@brief  要素符号请求信号

</member>
        <member name="M:PIE.Carto.CustomFeatureRender.Clone">
@brief 克隆
@return  FeatureRenderPtr 矢量渲染器对象


@brief 克隆
@return  FeatureRenderPtr 矢量渲染器对象

</member>
        <member name="M:PIE.Carto.CustomFeatureRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return 符号对象


@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return 符号对象

</member>
        <member name="M:PIE.Carto.CustomFeatureRender.Dispose">
@brief 析构函数


@brief 析构函数

</member>
        <member name="M:PIE.Carto.CustomFeatureRender.#ctor">
@brief 构造函数


@brief 构造函数

</member>
        <member name="T:PIE.Carto.CustomFeatureRender">
@brief 用户自定义渲染器

</member>
        <member name="M:PIE.Carto.GraphicsLayer.get_NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.get_ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.get_ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.ConstructCElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
            <summary>
从CLRElemnts转化为Elements
</summary>
            <param name="elements">CLRElements</param>
            <returns>Elements</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.ConstructCLRElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
            <summary>
从Elements转化为CLRElements
</summary>
            <param name="ptrElements">Elements</param>
            <returns>CLRElements</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.ConstructCElement(PIE.Carto.IElement)">
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
            <summary>
从CLRElement转化为Element
</summary>
            <param name="element">CLRElement</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.ConstructCLRElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
            <summary>
从Element转化为CLRElemtn
</summary>
            <param name="ptrElement">Element</param>
            <returns>CLRElemtn</returns>
        </member>
        <member name="F:PIE.Carto.GraphicsLayer.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.GraphicsLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementsReordered">
            <summary>
多要素排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementsDeleted">
            <summary>
多要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementsAdded">
            <summary>
多要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementUpdated">
            <summary>
要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementDeleted">
            <summary>
要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementAdded">
            <summary>
要素添加事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.GraphicsLayer.OnElementsSelectionChanged">
            <summary>
选择要素变化事件句柄
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SendToBack(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SendBackward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.BringToFront(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.BringForward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="P:PIE.Carto.GraphicsLayer.NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>elemnt</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.UpdateElement(System.String,PIE.Carto.IElement)">
            <summary>
更新Element
</summary>
            <param name="element">element</param>
            <summary>
更新Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.UnSelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.UnSelectElement(PIE.Carto.IElement)">
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
            <summary>
反向选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.UnSelectAllElements">
            <summary>
取消所有Element的选择
</summary>
            <summary>
取消所有Element的选择
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.GetSelectionBounds">
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.GetSelectedElements">
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SelectedElement(System.Int32)">
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SelectElementsByGeometry(PIE.Geometry.IGeometry,System.Boolean)">
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SelectElement(PIE.Carto.IElement)">
            <summary>
选择Element
</summary>
            <param name="element">element</param>
            <summary>
选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.SelectAllElements">
            <summary>
选择所有的Element
</summary>
            <summary>
选择所有的Element
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.IsElementSelected(PIE.Carto.IElement)">
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.QueryElementsByPoint(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double)">
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.FindElementByName(System.String)">
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.FindElementByID(System.String)">
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">elementID</param>
            <returns>Element</returns>
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">ID</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.QueryElements(PIE.Geometry.IGeometry)">
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.DeleteAllElements">
            <summary>
删除所有Element
</summary>
            <summary>
删除Element集合
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除单个Element
</summary>
            <param name="element">element</param>
            <summary>
删除Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.GetAllElements">
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.AddElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.AddElement(PIE.Carto.IElement)">
            <summary>
添加元素
</summary>
            <param name="element">元素</param>
            <summary>
添加
</summary>
            <param name="element">对参数进行描述说明</param>
        </member>
        <member name="P:PIE.Carto.GraphicsLayer.ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
        </member>
        <member name="P:PIE.Carto.GraphicsLayer.ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GraphicsLayer.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.GraphicsLayer">
            <summary>
GraphicsLayer元素图层类
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementsSelectionChanged">
            <summary>
选择要素变化事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementsReordered">
            <summary>
多要素排序事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnAllElementsDeleted">
            <summary>
所有要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementsDeleted">
            <summary>
多要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementsAdded">
            <summary>
多要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementUpdated">
            <summary>
要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementDeleted">
            <summary>
要素删除事件句柄
</summary>
        </member>
        <member name="E:PIE.Carto.IGraphicsContainerEvents.OnElementAdded">
            <summary>
要素添加事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.IGraphicsContainerEvents">
            <summary>
IGraphicsContainerEvents接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnElementsSelectionChangedEventHandler">
            <summary>
选择要素变化事件句柄
</summary>
        </member>
        <member name="T:PIE.Carto.OnElementsReorderedEventHandler">
            <summary>
多要素排序事件句柄
</summary>
            <param name="elements">elements对象</param>
        </member>
        <member name="T:PIE.Carto.OnAllElementsDeletedEventHandler">
            <summary>
所有要素删除事件句柄
</summary>
            <param name="elements">elements对象</param>
        </member>
        <member name="T:PIE.Carto.OnElementsDeletedEventHandler">
            <summary>
多要素删除事件句柄
</summary>
            <param name="elements">elements对象</param>
        </member>
        <member name="T:PIE.Carto.OnElementsAddedEventHandler">
            <summary>
多要素添加事件句柄
</summary>
            <param name="elements">elements对象</param>
        </member>
        <member name="T:PIE.Carto.OnElementUpdatedEventHandler">
            <summary>
要素更新事件句柄
</summary>
            <param name="element">element对象</param>
        </member>
        <member name="T:PIE.Carto.OnElementDeletedEventHandler">
            <summary>
要素删除事件句柄
</summary>
            <param name="element">element对象</param>
        </member>
        <member name="T:PIE.Carto.OnElementAddedEventHandler">
            <summary>
要素添加事件句柄
</summary>
            <param name="element">element对象</param>
        </member>
        <member name="F:PIE.Carto.UniqueValues.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.UniqueValues.#ctor(SysUtility._ptr_t&lt;SysCarto.UniqueValues&gt;)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.UniqueValues.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.Clear">
            <summary>
清空
</summary>
            <summary>
清空
</summary>
        </member>
        <member name="M:PIE.Carto.UniqueValues.GetValues">
            <summary>
获得唯一值列表
</summary>
            <returns>唯一值列表</returns>
            <summary>
获得唯一值列表
</summary>
            <returns>唯一值列表</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.GetCount">
            <summary>
获得唯一值总数
</summary>
            <returns>唯一值总数</returns>
            <summary>
获得唯一值总数
</summary>
            <returns>唯一值总数</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.GetUniqueCount(System.Int32)">
            <summary>
获取唯一值数目
</summary>
            <param name="index">索引值</param>
            <returns>唯一值数目</returns>
            <summary>
获取唯一值数目
</summary>
            <param name="index">索引值</param>
            <returns>唯一值数目</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.GetUniqueValue(System.Int32)">
            <summary>
获取值
</summary>
            <param name="nIndex">索引值</param>
            <returns>唯一值</returns>
            <summary>
获取值
</summary>
            <param name="nIndex">索引值</param>
            <returns>唯一值</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.LowerBound(System.Object)">
            <summary>
获取该值对应的最大值的Index
</summary>
            <param name="value">值</param>
            <returns>索引值</returns>
            <summary>
获取该值对应的最大值的Index
</summary>
            <param name="value">值</param>
            <returns>索引值</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.LookUp(System.Object)">
            <summary>
查询值
</summary>
            <param name="value">唯一值</param>
            <returns>索引值</returns>
            <summary>
查询值
</summary>
            <param name="value">唯一值</param>
            <returns>索引值</returns>
        </member>
        <member name="M:PIE.Carto.UniqueValues.Delete(System.Object)">
            <summary>
删除值
</summary>
            <param name="value">唯一值</param>
            <summary>
删除值
</summary>
            <param name="value">唯一值</param>
        </member>
        <member name="M:PIE.Carto.UniqueValues.Add(System.Object,System.Int32)">
            <summary>
添加值
</summary>
            <param name="value">唯一值</param>
            <param name="count">数目</param>
            <summary>
添加值
</summary>
            <param name="value">唯一值</param>
            <param name="count">数目</param>
        </member>
        <member name="M:PIE.Carto.UniqueValues.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.UniqueValues.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.UniqueValues.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.UniqueValues">
            <summary>
栅格RGB渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.Clear">
            <summary>
清空
</summary>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.GetValues">
            <summary>
获得唯一值列表
</summary>
            <returns>唯一值列表</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.GetCount">
            <summary>
获得唯一值总数
</summary>
            <returns>唯一值总数</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.GetUniqueCount(System.Int32)">
            <summary>
获取唯一值数目
</summary>
            <param name="index">索引值</param>
            <returns>唯一值数目</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.GetUniqueValue(System.Int32)">
            <summary>
获取值
</summary>
            <param name="nIndex">索引值</param>
            <returns>唯一值</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.LowerBound(System.Object)">
            <summary>
获取该值对应的最大值的Index
</summary>
            <param name="value">值</param>
            <returns>索引值</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.LookUp(System.Object)">
            <summary>
查询值
</summary>
            <param name="value">唯一值</param>
            <returns>索引值</returns>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.Delete(System.Object)">
            <summary>
删除值
</summary>
            <param name="value">唯一值</param>
        </member>
        <member name="M:PIE.Carto.IUniqueValues.Add(System.Object,System.Int32)">
            <summary>
添加值
</summary>
            <param name="value">唯一值</param>
            <param name="count">数目</param>
        </member>
        <member name="T:PIE.Carto.IUniqueValues">
            <summary>
IUniqueValues接口
</summary>
        </member>
        <member name="F:SysCarto.UniqueValues.m_mapCounts">
@brief 唯一值数量集合

</member>
        <member name="F:SysCarto.UniqueValues.m_mapValues">
@brief 唯一值集合

</member>
        <member name="M:SysCarto.UniqueValues.Clone">
@brief 克隆
@return  UniqueValuesPtr 新克隆的对象

</member>
        <member name="M:SysCarto.UniqueValues.Clear">
@brief 清空
@return  void

</member>
        <member name="M:SysCarto.UniqueValues.GetCount">
@brief 获取数量
@return  int  数量

</member>
        <member name="M:SysCarto.UniqueValues.GetUniqueCount(System.Int32)">
@brief 获取唯一值数量
@param [in] nIndex   索引
@return  int  数量

</member>
        <member name="M:SysCarto.UniqueValues.GetUniqueValue(System.Int32)">
@brief 获取唯一值
@param [in] nIndex   索引
@return  QVariant  获取值

</member>
        <member name="M:SysCarto.UniqueValues.LowerBound(QVariant)">
@brief 范围下限
@param [in] value     值
@return  int  返回值

</member>
        <member name="M:SysCarto.UniqueValues.LookUp(QVariant)">
@brief 查找
@param [in] value     值
@return  int  返回值

</member>
        <member name="M:SysCarto.UniqueValues.Delete(QVariant)">
@brief 删除值
@param [in] value     值
@return  void

</member>
        <member name="M:SysCarto.UniqueValues.Add(QVariant,System.Int32)">
@brief 添加值
@param [in] value     值
@param [in] nCount    数量
@return  int  返回值

</member>
        <member name="M:SysCarto.UniqueValues.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.UniqueValues.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.UniqueValueSerializer">
@brief 声明唯一值序列化类为当前类的 友元类

</member>
        <member name="T:SysCarto.UniqueValues">
@class  UniqueValues
@brief  唯一值

</member>
        <member name="F:PIE.Carto.LineElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.LineElement.#ctor(SysUtility._ptr_t&lt;SysCarto.LineElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.LineElement.Symbol">
            <summary>
获取或设置线符号LineSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.LineElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.LineElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LineElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.LineElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.LineElement">
            <summary>
LineElement线元素类
</summary>
        </member>
        <member name="P:PIE.Carto.ILineElement.Symbol">
            <summary>
获取或设置线符号LineSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.ILineElement">
            <summary>
ILineElement线元素接口
</summary>
        </member>
        <member name="D:SysCarto.LineElementPtr">
@brief  线元素 智能指针对象

</member>
        <member name="M:SysCarto.LineElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.LineElement.m_ptrSymbol">
@brief  线状符号

</member>
        <member name="M:SysCarto.LineElement.Clone">
@brief 克隆
@return ElementPtr 克隆元素对象

</member>
        <member name="M:SysCarto.LineElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter 绘图设备对象
@param [in] ptrTransform 显示转换对象
@param [in] ptrTrackerCancel  取消轨迹
@return  void

</member>
        <member name="M:SysCarto.LineElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   设置线状符号
@param [in]  ptrSymbol   线状符号
@return  void

</member>
        <member name="M:SysCarto.LineElement.GetSymbol">
@brief   获取线状符号
@return  SysDisplay::LineSymbolPtr 线状符号

</member>
        <member name="M:SysCarto.LineElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.LineElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.LineElement">
@class LineElement
@brief  线元素

</member>
        <member name="F:PIE.Carto.RasterColormapRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterColormapRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.SetColorEntrys(System.Collections.Generic.IList`1{PIE.DataSource.IColorEntry})">
            <summary>
设置颜色表项
</summary>
            <param name="colorEntrys">颜色表项</param>
            <returns>是否成功</returns>
            <summary>
设置颜色表项
</summary>
            <param name="colorEntrys">颜色表项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.GetColorEntrys">
            <summary>
获取颜色表项
</summary>
            <returns>颜色表项</returns>
            <summary>
获取颜色表项
</summary>
            <returns>颜色表项</returns>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.SetCategoryNames(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置分类信息
</summary>
            <param name="stringList">分类名称</param>
            <returns>是否成功</returns>
            <summary>
设置分类信息
</summary>
            <param name="categoryNames">分类名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.GetCategoryNames">
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.#ctor(System.Collections.Generic.IList`1{PIE.DataSource.IColorEntry},System.Collections.Generic.IList`1{System.String})">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterColormapRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterColormapRender">
            <summary>
栅格ColormapRender渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterColormapRender.SetColorEntrys(System.Collections.Generic.IList`1{PIE.DataSource.IColorEntry})">
            <summary>
设置颜色表项
</summary>
            <param name="colorEntrys">颜色表项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IRasterColormapRender.GetColorEntrys">
            <summary>
获取颜色表项
</summary>
            <returns>颜色表项</returns>
        </member>
        <member name="M:PIE.Carto.IRasterColormapRender.SetCategoryNames(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置分类信息
</summary>
            <param name="stringList">分类名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IRasterColormapRender.GetCategoryNames">
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
        </member>
        <member name="T:PIE.Carto.IRasterColormapRender">
            <summary>
IRasterColormapRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterColormapRenderPtr">
@brief 栅格颜色带渲染  智能指针

</member>
        <member name="F:SysCarto.RasterColormapRender.m_vecColorEntry">
@brief 颜色条目集合

</member>
        <member name="F:SysCarto.RasterColormapRender.m_vecCategoryNames">
@brief 名字分类集合

</member>
        <member name="M:SysCarto.RasterColormapRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in]  ptrDataset   栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterColormapRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterColormapRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterColormapRender.SetColorEntrys(QVector&lt;SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色条目
@param [in] vecColorEntry   颜色条目集合
@return void

</member>
        <member name="M:SysCarto.RasterColormapRender.SetCategoryNames(QVector&lt;QString&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置分类名称
@param [in] vecNames   名字集合
@return void

</member>
        <member name="M:SysCarto.RasterColormapRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterColormapRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterColormapRender.#ctor(QVector&lt;SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVector&lt;QString&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param [in]  vecColorEntry  颜色条目集合
@param [in]  vecCategorys   分类集合

</member>
        <member name="M:SysCarto.RasterColormapRender.#ctor">
@brief  构造函数

</member>
        <member name="T:SysCarto.RasterColormapRender">
@class RasterColormapRender
@brief 栅格颜色带渲染

</member>
        <member name="F:PIE.Carto.RulerSettings.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RulerSettings.#ctor(SysUtility._ptr_t&lt;SysCarto.RulerSettings&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RulerSettings.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.RulerSettings.GetDeflateWid">
            <summary>
获取标尺线距边界线间隔
</summary>
            <returns>int</returns>
            <summary>
获取标尺线距边界线间隔
</summary>
            <returns>int</returns>
        </member>
        <member name="M:PIE.Carto.RulerSettings.GetWidth">
            <summary>
获取标尺宽度
</summary>
            <returns>int</returns>
            <summary>
获取标尺宽度
</summary>
            <returns>int</returns>
        </member>
        <member name="M:PIE.Carto.RulerSettings.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RulerSettings.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RulerSettings.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RulerSettings">
            <summary>
标尺对象
</summary>
        </member>
        <member name="D:SysCarto.RulerSettingsPtr">
@brief  标尺类   智能指针

</member>
        <member name="F:SysCarto.RulerSettings.m_nDeflateWid">
@brief 标尺缩小宽度

</member>
        <member name="F:SysCarto.RulerSettings.m_nRulerWid">
@brief 标尺的宽度

</member>
        <member name="M:SysCarto.RulerSettings.GetDeflateWid">
@brief 获取缩小宽度
@return int 缩小宽度

</member>
        <member name="M:SysCarto.RulerSettings.GetWidth">
@brief 获取宽度
@return int 宽度

</member>
        <member name="M:SysCarto.RulerSettings.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RulerSettings.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RulerSettings">
@class RulerSettings
@brief 标尺类

</member>
        <member name="F:PIE.Carto.HTHTTiledLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.HTHTTiledLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.Initialize">
            <summary>
初始化
</summary>
            <summary>
初始化
</summary>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.HTHTTiledLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.HTHTTiledLayer">
            <summary>
宏图图层对象
</summary>
        </member>
        <member name="M:PIE.Carto.IHTHTTiledLayer.SetHostList(System.Collections.Generic.IList`1{System.Int32})">
            <summary>
设置HostList
</summary>
            <param name="hostList">hostList对象</param>
        </member>
        <member name="M:PIE.Carto.IHTHTTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
            <summary>
获取Uri
</summary>
            <param name="level">级别</param>
            <param name="row">行索引</param>
            <param name="col">列索引</param>
            <return>字符串</return>
        </member>
        <member name="M:PIE.Carto.IHTHTTiledLayer.Initialize">
            <summary>
初始化
</summary>
        </member>
        <member name="T:PIE.Carto.IHTHTTiledLayer">
            <summary>
宏图图层对象接口
</summary>
        </member>
        <member name="D:SysCarto.HTHTTiledLayerPtr">
@brief   宏图图层  智能指针对象

</member>
        <member name="F:SysCarto.HTHTTiledLayer.m_hostList">
@brief 主机列表集合

</member>
        <member name="M:SysCarto.HTHTTiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param[in] Layer* Layer对象

</member>
        <member name="M:SysCarto.HTHTTiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.HTHTTiledLayer.SetHostList(QList&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置主机列表集合
@param [in] hostList 主机列表
@return void

</member>
        <member name="M:SysCarto.HTHTTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief  获取Uri 
@param [in] level   级别
@param [in] row     行索引
@param [in] col     列索引
@return void

</member>
        <member name="M:SysCarto.HTHTTiledLayer.Initialize">
@brief  初始化
@return void

</member>
        <member name="M:SysCarto.HTHTTiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.HTHTTiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri 统一资源标识符

</member>
        <member name="T:SysCarto.HTHTTiledLayer">
@class HTHTTiledLayer
@brief 宏图图层对象 

</member>
        <member name="F:PIE.Carto.SymbolBackground.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.#ctor(SysUtility._ptr_t&lt;SysCarto.SymbolBackground&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.Clone">
            <summary>
克隆背景对象
</summary>
            <returns>IBackground对象</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制背景
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrGeo">Geometry对象</param>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取主题边界范围
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrQueryGeo">IGeometry对象</param>
            <returns>返回外边界</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取用于绘制背景的Geometry
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrShape">IGeometry</param>
            <returns>返回Geometry</returns>
        </member>
        <member name="P:PIE.Carto.SymbolBackground.YGap">
            <summary>
获取或设置背景与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBackground.XGap">
            <summary>
获取或设置背景与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBackground.Name">
            <summary>
获取背景名称
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBackground.FillSymbol">
            <summary>
获取或设置面样式
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBackground.CornerRounding">
            <summary>
获取或设置拐角弧度
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBackground.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.SymbolBackground">
            <summary>
符号背景类
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolBackground.FillSymbol">
            <summary>
获取或设置面样式
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolBackground.CornerRounding">
            <summary>
获取或设置线拐角弧度
</summary>
        </member>
        <member name="T:PIE.Carto.ISymbolBackground">
            <summary>
ISymbolBackground符号背景接口
</summary>
        </member>
        <member name="D:SysCarto.SymbolBackgroundPtr">
@brief  符号背景类   智能指针

</member>
        <member name="F:SysCarto.SymbolBackground.m_ptrSymbol">
@brief 面符号

</member>
        <member name="F:SysCarto.SymbolBackground.m_dCornerRounding">
@brief 线拐角弧度

</member>
        <member name="M:SysCarto.SymbolBackground.Clone">
@brief 克隆
@return  IBackgroundPtr  背景对象

</member>
        <member name="M:SysCarto.SymbolBackground.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形 
@param [in] ptrTransform 显示转换对象
@param [in] ptrQueryGeo  查询几何对象
@return  SysGeometry::EnvelopePtr   包络线对象

</member>
        <member name="M:SysCarto.SymbolBackground.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取面符号
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何形状
@return  SysGeometry::GeometryPtr  几何对象

</member>
        <member name="M:SysCarto.SymbolBackground.SetFillSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置面符号
@param [in] ptrSymbol 面符号
@return  void

</member>
        <member name="M:SysCarto.SymbolBackground.GetFillSymbol">
@brief 获取面符号
@return  SysDisplay::FillSymbolPtr  填充面符号

</member>
        <member name="M:SysCarto.SymbolBackground.SetCornerRounding(System.Double)">
@brief 设置线拐角弧度 
@param [in] rouding 线拐角弧度 
@return  void

</member>
        <member name="M:SysCarto.SymbolBackground.GetCornerRounding">
@brief 获取线拐角弧度 
@return  double  线拐角弧度 

</member>
        <member name="M:SysCarto.SymbolBackground.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SymbolBackground.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.SymbolBackground">
@class SymbolBackground
@brief 符号背景类 

</member>
        <member name="F:PIE.Carto.SymbolShadow.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.#ctor(SysUtility._ptr_t&lt;SysCarto.SymbolShadow&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.Clone">
            <summary>
克隆
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制阴影
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrGeo">Geometry对象</param>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取阴影外接矩形
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrQueryGeo">IGeometry对象</param>
            <returns>返回外边界</returns>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取阴影Geometry
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrShape">IGeometry</param>
            <returns>返回Geometry</returns>
        </member>
        <member name="P:PIE.Carto.SymbolShadow.YGap">
            <summary>
获取或设置阴影与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolShadow.XGap">
            <summary>
获取或设置阴影与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolShadow.Name">
            <summary>
获取阴影对象名称
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolShadow.FillSymbol">
            <summary>
获取或设置面样式
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolShadow.CornerRounding">
            <summary>
获取或设置拐角弧度
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolShadow.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.SymbolShadow">
            <summary>
符号阴影类
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolShadow.FillSymbol">
            <summary>
获取或设置面样式
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolShadow.CornerRounding">
            <summary>
获取或设置拐角弧度
</summary>
        </member>
        <member name="T:PIE.Carto.ISymbolShadow">
            <summary>
阴影样式对象接口
</summary>
        </member>
        <member name="D:SysCarto.SymbolShadowPtr">
@brief  符号阴影   智能指针

</member>
        <member name="F:SysCarto.SymbolShadow.m_ptrSymbol">
@brief 面对像

</member>
        <member name="F:SysCarto.SymbolShadow.m_dRounding">
@brief 线拐角弧度

</member>
        <member name="M:SysCarto.SymbolShadow.Clone">
@brief 克隆
@return  IShadowPtr  阴影 对象

</member>
        <member name="M:SysCarto.SymbolShadow.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询边界
@param [in] ptrTransform  显示转换对象
@param [in] ptrQueryGeo   地理几何信息
@return  SysGeometry::EnvelopePtr   包络线范围对象

</member>
        <member name="M:SysCarto.SymbolShadow.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取几何形状
@param [in] ptrTransform  显示转换对象
@param [in] ptrShape      几何形状
@return  SysGeometry::GeometryPtr  几何形状对象

</member>
        <member name="M:SysCarto.SymbolShadow.SetFillSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置面填充符号
@param [in] ptrSymbol 面填充符号
@return  void

</member>
        <member name="M:SysCarto.SymbolShadow.GetFillSymbol">
@brief 获取面填充符号
@return  SysDisplay::FillSymbolPtr  面填充符号

</member>
        <member name="M:SysCarto.SymbolShadow.SetCornerRounding(System.Double)">
@brief 设置线拐角弧度
@param [in] dRounding 线拐角弧度
@return  void

</member>
        <member name="M:SysCarto.SymbolShadow.GetCornerRounding">
@brief 获取线拐角弧度
@return  double  线拐角弧度

</member>
        <member name="M:SysCarto.SymbolShadow.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SymbolShadow.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.SymbolShadow">
@class SymbolShadow
@brief 符号阴影

</member>
        <member name="F:PIE.Carto.Page.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.Page.#ctor(SysUtility._ptr_t&lt;SysCarto.Page&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.Page.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Carto.Page.OnPageUnitsChanged">
            <summary>
Units变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.Page.OnPageSizeChanged">
            <summary>
PageSize变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.Page.OnPageMarginsChanged">
            <summary>
Margins变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.Page.OnPageColorChanged">
            <summary>
颜色变化事件
</summary>
        </member>
        <member name="P:PIE.Carto.Page.Shadow">
            <summary>
阴影
</summary>
        </member>
        <member name="P:PIE.Carto.Page.Border">
            <summary>
边界
</summary>
        </member>
        <member name="P:PIE.Carto.Page.Background">
            <summary>
背景
</summary>
        </member>
        <member name="M:PIE.Carto.Page.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制
</summary>
            <param name="painter">对参数进行描述说明</param>
            <param name="ptrTransform">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.Page.DrawPrintableArea(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印可视区域
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.Page.DrawPaper(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印页面
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.Page.DrawBorder(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制页面边框
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.Page.DrawBackground(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印页面背景
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.Page.QuerySize(System.Double@,System.Double@)">
            <summary>
获取页面大小
</summary>
            <param name="dWidth">返回页面宽度</param>
            <param name="dHeight">返回页面高度</param>
        </member>
        <member name="M:PIE.Carto.Page.PutCustomSize(System.Double,System.Double)">
            <summary>
？？？
</summary>
            <param name="dWidth">对参数进行描述说明</param>
            <param name="dHeight">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.Page.GetPrinterPageCount(PIE.Carto.IPrinter)">
            <summary>
获取打印页数
</summary>
            <param name="pPrinter">？？</param>
            <returns>打印页数</returns>
        </member>
        <member name="M:PIE.Carto.Page.GetPrintableBounds">
            <summary>
获取打印页面外接多边形
</summary>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.Page.GetPageBounds(PIE.Carto.IPrinter,System.Int16,System.Double,System.Double)">
            <summary>
获取打印页面外接多边形
</summary>
            <param name="pPrinter">IPrinter</param>
            <param name="currentPage">？？</param>
            <param name="dOverlap">？？</param>
            <param name="dResolution">打印分辨率</param>
            <returns>打印页面外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.Page.GetDeviceBounds(PIE.Carto.IPrinter,System.Int16,System.Double,System.Double)">
            <summary>
暂时未用到
</summary>
            <param name="pPrinter">对参数进行描述说明</param>
            <param name="currentPage">对参数进行描述说明</param>
            <param name="dOverlap">对参数进行描述说明</param>
            <param name="dResolution">对参数进行描述说明</param>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.Page.Orientation">
            <summary>
打印方向1 纵向 2 横向
</summary>
        </member>
        <member name="P:PIE.Carto.Page.PrintableAreaVisible">
            <summary>
获取或设置打印页面是否显示边界
</summary>
        </member>
        <member name="P:PIE.Carto.Page.StretchGraphicsWithPage">
            <summary>
获取或设置制图对象是否随页面拉伸
</summary>
        </member>
        <member name="P:PIE.Carto.Page.FormID">
            <summary>
获取或设置纸张尺寸编号
</summary>
        </member>
        <member name="P:PIE.Carto.Page.Units">
            <summary>
获取或设置制图单位
</summary>
        </member>
        <member name="M:PIE.Carto.Page.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Page.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.Page.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.Page">
            <summary>
Page类
</summary>
        </member>
        <member name="P:PIE.Carto.IFrameProperties.Shadow">
            <summary>
获取或设置边框阴影对象
</summary>
        </member>
        <member name="P:PIE.Carto.IFrameProperties.Border">
            <summary>
获取或设置边框边界对象
</summary>
        </member>
        <member name="P:PIE.Carto.IFrameProperties.Background">
            <summary>
获取或设置边框背景对象
</summary>
        </member>
        <member name="T:PIE.Carto.IFrameProperties">
            <summary>
制图边框的通用属性接口
</summary>
        </member>
        <member name="M:PIE.Carto.IShadow.Clone">
            <summary>
克隆
</summary>
        </member>
        <member name="M:PIE.Carto.IShadow.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制阴影
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrGeo">要绘制的图形</param>
        </member>
        <member name="M:PIE.Carto.IShadow.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取阴影外接矩形
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrQueryGeo">IGeometry</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IShadow.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取阴影Geometry
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrShape">IGeometry</param>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.IShadow.YGap">
            <summary>
获取或设置阴影与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.IShadow.XGap">
            <summary>
获取或设置阴影与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.IShadow.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Carto.IShadow">
            <summary>
阴影对象接口
</summary>
        </member>
        <member name="M:PIE.Carto.IBackground.Clone">
            <summary>
克隆
</summary>
        </member>
        <member name="M:PIE.Carto.IBackground.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制
</summary>
        </member>
        <member name="M:PIE.Carto.IBackground.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取主题边界范围
</summary>
        </member>
        <member name="M:PIE.Carto.IBackground.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取用于绘制背景的Geometry
</summary>
        </member>
        <member name="P:PIE.Carto.IBackground.YGap">
            <summary>
获取或设置背景与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.IBackground.XGap">
            <summary>
获取或设置背景与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.IBackground.Name">
            <summary>
名称
</summary>
        </member>
        <member name="T:PIE.Carto.IBackground">
            <summary>
背景接口
</summary>
        </member>
        <member name="E:PIE.Carto.IPageEvents.OnPageUnitsChanged">
            <summary>
Units变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.IPageEvents.OnPageSizeChanged">
            <summary>
PageSize变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.IPageEvents.OnPageMarginsChanged">
            <summary>
Margins变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.IPageEvents.OnPageColorChanged">
            <summary>
颜色变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.IPageEvents">
            <summary>
IPageEvents事件接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnPageUnitsChangedEventHandler">
            <summary>
Units变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnPageSizeChangedEventHandler">
            <summary>
PageSize变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnPageMarginsChangedEventHandler">
            <summary>
Margins变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.OnPageColorChangedEventHandler">
            <summary>
颜色变化事件
</summary>
        </member>
        <member name="D:SysCarto.PagePtr">
@brief  页面  智能指针对象

</member>
        <member name="F:SysCarto.Page.m_ptrPaper">
@brief 页面

</member>
        <member name="F:SysCarto.Page.m_units">
@brief 单元

</member>
        <member name="F:SysCarto.Page.m_nOrientation">
@brief 方向

</member>
        <member name="M:SysCarto.Page.GetPageEnvelope">
@brief 获取页面包络线
@return SysGeometry::EnvelopePtr  页面包络线

</member>
        <member name="M:SysCarto.Page.Clone">
@brief 克隆
@return  Page* 新克隆的对象指针

</member>
        <member name="M:SysCarto.Page.GetPaper">
@brief 获取纸张
@return  PaperPtr 纸张对象

</member>
        <member name="M:SysCarto.Page.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter  绘制面板
@param [in] ptrTransform  显示转换对象
@return void

</member>
        <member name="M:SysCarto.Page.DrawPrintableArea(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制打印可视区域 
@param [in] painter  绘制面板
@param [in] ptrTransform  显示转换对象
@return void

</member>
        <member name="M:SysCarto.Page.DrawPaper(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制纸张
@param [in] painter  绘制面板
@param [in] ptrTransform  显示转换对象
@return void

</member>
        <member name="M:SysCarto.Page.DrawBorder(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制边界
@param [in] painter  绘制面板
@param [in] ptrTransform  显示转换对象
@return void

</member>
        <member name="M:SysCarto.Page.DrawBackground(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制背景
@param [in] painter  绘制面板
@param [in] ptrTransform  显示转换对象
@return void

</member>
        <member name="M:SysCarto.Page.SetUnits(SysUI.pieUnits)">
@brief 设置单元
@param [in] SysUI::pieUnits  单元
@return void

</member>
        <member name="M:SysCarto.Page.GetUnits">
@brief 获取单元
@return  SysUI::pieUnits  单元

</member>
        <member name="M:SysCarto.Page.SetStretchGraphicsWithPage(System.Boolean)">
@brief 设置制图对象是否随页面拉伸
@param [in] bStretch  是否拉伸
@return void

</member>
        <member name="M:SysCarto.Page.IsStretchGraphicsWithPage">
@brief 获取制图对象是否随页面拉伸 
@return bool 是否随页面拉伸 

</member>
        <member name="M:SysCarto.Page.QuerySize(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取大小
@param [in out] dWidth   宽度
@param [in out] dHeight  高度
@return void

</member>
        <member name="M:SysCarto.Page.PutCustomSize(System.Double,System.Double)">
@brief 赋予定制的大小
@param [in] dWidth   宽度
@param [in] dHeight  高度
@return void

</member>
        <member name="M:SysCarto.Page.GetPrinterPageCount(SysCarto.IPrinter*)">
@brief 获取获取打印页数
@param [in] IPrinter* pPrinter  打印对象
@return int 打印页数

</member>
        <member name="M:SysCarto.Page.GetPrintableBounds">
@brief 获取打印页面外接多边形 
@return  SysGeometry::EnvelopePtr  外接多边形

</member>
        <member name="M:SysCarto.Page.SetOrientation(System.Int16)">
@brief 设置方向值
@param [in] ori  方向值 (1 纵向 2 横向)
@return void

</member>
        <member name="M:SysCarto.Page.GetOrientation">
@brief 获取方向
@return short  方向值 (1 纵向 2 横向)

</member>
        <member name="M:SysCarto.Page.SetPrintableAreaVisible(System.Boolean)">
@brief 设置打印页面是否显示边界
@param [in] bVisible 是否显示边界
@return void

</member>
        <member name="M:SysCarto.Page.IsPrintableAreaVisible">
@brief 获取打印页面是否显示边界 
@return bool  是否显示边界

</member>
        <member name="M:SysCarto.Page.GetPageBounds(SysCarto.IPrinter*,System.Int16,System.Double,System.Double)">
@brief 获取页面边界
@param [in] paiter 打印对象
@param [in] currentPage 当前页面
@param [in] dOverlap   重叠值
@param [in] dResolution  分辨率
@return SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.Page.GetDeviceBounds(SysCarto.IPrinter*,System.Int16,System.Double,System.Double)">
@brief 获取设备边界
@param [in] paiter 打印对象 
@param [in] currentPage 当前页面
@param [in] dOverlap   重叠值
@param [in] dResolution  分辨率
@return SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.Page.SetFormID(SysCarto.PageFormID)">
@brief 获取页面尺寸编号
@param [in] formID 页面尺寸编号
@return void

</member>
        <member name="M:SysCarto.Page.GetFormID">
@brief 获取页面尺寸编号
@return  PageFormID  纸张尺寸编号

</member>
        <member name="M:SysCarto.Page.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Page.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.Page">
@class Page
@brief 页面

</member>
        <member name="F:SysCarto.IFrameProperties.m_ptrShadow">
@brief 阴影对象

</member>
        <member name="F:SysCarto.IFrameProperties.m_ptrBorder">
@brief 边界对象

</member>
        <member name="F:SysCarto.IFrameProperties.m_ptrBackground">
@brief 背景对象

</member>
        <member name="M:SysCarto.IFrameProperties.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IFrameProperties.CopyTo(SysCarto.IFrameProperties*)">
@brief 拷贝到IFrameProperties
@param [in] IFrameProperties* pFrameProperties 框架属性
@return void

</member>
        <member name="M:SysCarto.IFrameProperties.SetShadow(SysUtility._ptr_t&lt;SysCarto.IShadow&gt;!System.Runtime.CompilerServices.IsConst)">
@brief  设置阴影
@param [in] ptrShadow  阴影对象
@return void

</member>
        <member name="M:SysCarto.IFrameProperties.GetShadow">
@brief  获取阴影
@return IShadowPtr  阴影

</member>
        <member name="M:SysCarto.IFrameProperties.SetBorder(SysUtility._ptr_t&lt;SysCarto.IBorder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置边界
@param [in] ptrBorder  边界
@return void

</member>
        <member name="M:SysCarto.IFrameProperties.GetBorder">
@brief  获取边界
@return IBorderPtr 边界对象

</member>
        <member name="M:SysCarto.IFrameProperties.SetBackGround(SysUtility._ptr_t&lt;SysCarto.IBackground&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置背景
@param [in] ptrBackground  背景
@return void 

</member>
        <member name="M:SysCarto.IFrameProperties.GetBackground">
@brief  析构函数
@return IBackgroundPtr 背景对象

</member>
        <member name="M:SysCarto.IFrameProperties.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IFrameProperties">
@class  IFrameProperties
@brief  框架属性

</member>
        <member name="F:SysCarto.IShadow.m_dGapY">
@brief Y轴间距

</member>
        <member name="F:SysCarto.IShadow.m_dGapX">
@brief X轴间距

</member>
        <member name="F:SysCarto.IShadow.m_strName">
@brief 名字

</member>
        <member name="M:SysCarto.IShadow.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IShadow.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IShadow.Clone">
@brief 克隆
@return  IShadowPtr 阴影类对象

</member>
        <member name="M:SysCarto.IShadow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrGeo   几何对象
@return void

</member>
        <member name="M:SysCarto.IShadow.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取包络线范围
@param [in]  ptrTransform  显示转换对象
@param [in]  ptrQueryGeo   查询几何对象
@return  SysGeometry::EnvelopePtr  包络线范围

</member>
        <member name="M:SysCarto.IShadow.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取几何对象
@param [in]  ptrTransform  显示转换对象
@param [in]  ptrShape  几何对象形状
@return  SysGeometry::GeometryPtr  几何对象

</member>
        <member name="M:SysCarto.IShadow.SetYGap(System.Double)">
@brief 设置Y轴间距值
@param [in] dValue   Y轴间距值
@return void

</member>
        <member name="M:SysCarto.IShadow.GetYGap">
@brief 获取Y轴间距值
@return  double Y轴间距值

</member>
        <member name="M:SysCarto.IShadow.SetXGap(System.Double)">
@brief 设置X轴间距值
@param [in] dValue   X轴间距值
@return void

</member>
        <member name="M:SysCarto.IShadow.GetXGap">
@brief 获取X轴间距值
@return  double X轴间距值

</member>
        <member name="M:SysCarto.IShadow.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名字
@param [in] strName  名字
@return void

</member>
        <member name="M:SysCarto.IShadow.GetName">
@brief 获取名字
@return  QString 名字

</member>
        <member name="T:SysCarto.IShadow">
@brief 类的前置声明和智能指针定义


@class  IShadow
@brief  阴影类

</member>
        <member name="F:SysCarto.IPageEvents.PageUnitsChanged">
@brief  页面单元变化信号 

</member>
        <member name="F:SysCarto.IPageEvents.PageSizeChanged">
@brief  页面大小变化信号 

</member>
        <member name="F:SysCarto.IPageEvents.PageMarginsChanged">
@brief  页面边缘变化信号 

</member>
        <member name="F:SysCarto.IPageEvents.PageColorChanged">
@brief  页面颜色变化信号 

</member>
        <member name="T:SysCarto.IPageEvents">
@class IPageEvents
@brief   页面事件

</member>
        <member name="F:SysCarto.IPrinter.m_units">
@brief pie单元对象

</member>
        <member name="F:SysCarto.IPrinter.m_strSpoolFileName">
@brief 线轴文件名

</member>
        <member name="F:SysCarto.IPrinter.m_dResolution">
@brief 分辨率

</member>
        <member name="F:SysCarto.IPrinter.m_strPrintFileName">
@brief 打印文件名称

</member>
        <member name="F:SysCarto.IPrinter.m_pPaper">
@brief 页面纸张

</member>
        <member name="F:SysCarto.IPrinter.m_strFilter">
@brief 文件过滤器

</member>
        <member name="F:SysCarto.IPrinter.m_strFileExtension">
@brief 文件附录

</member>
        <member name="F:SysCarto.IPrinter.m_strDriverName">
@brief 驱动名称

</member>
        <member name="F:SysCarto.IPrinter.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.IPrinter.CopyTo(SysCarto.IPrinter*)">
@brief 拷贝到IPrinter
@param[in] IPrinter* IPrinter对象指针

</member>
        <member name="M:SysCarto.IPrinter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IPrinter.Clone">
@brief 克隆
@return IPrinter* 克隆对象指针

</member>
        <member name="M:SysCarto.IPrinter.VerifyDriverSettings">
@brief 检验驱动设置
@return  bool 是否正确  是 true,否 false

</member>
        <member name="M:SysCarto.IPrinter.Units">
@brief 获取pie单元
@return  SysUI::pieUnits pie单元对象

</member>
        <member name="M:SysCarto.IPrinter.StartPrinting(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 开始打印
@param [in] ptrPixelBounds 包络线范围
@return  void

</member>
        <member name="M:SysCarto.IPrinter.SetSpoolFileName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置线轴文件名
@param [in] strName 线轴文件名
@return  void

</member>
        <member name="M:SysCarto.IPrinter.GetSpoolFileName">
@brief 获取线轴文件名
@return  QString  线轴文件名

</member>
        <member name="M:SysCarto.IPrinter.SetResolution(System.Double)">
@brief 设置分辨率
@param [in] dRes 分辨率
@return  void

</member>
        <member name="M:SysCarto.IPrinter.GetResolution">
@brief 获取分辨率
@return  double  分辨率

</member>
        <member name="M:SysCarto.IPrinter.QueryPaperSize(System.Double*,System.Double*)">
@brief 查询获取页面纸张大小
@param [in out] dWidth  宽度
@param [in out] dHeight 高度
@return  void

</member>
        <member name="M:SysCarto.IPrinter.SetPrintFileName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置打印文件名称
@param [in] strFileName 文件名称
@return  void

</member>
        <member name="M:SysCarto.IPrinter.GetPrintFileName">
@brief 获取打印文件名称
@return  QString 文件名称

</member>
        <member name="M:SysCarto.IPrinter.PrintableBounds">
@brief 有效打印范围
@return  SysGeometry::EnvelopePtr  包络线范围

</member>
        <member name="M:SysCarto.IPrinter.SetPaper(SysCarto.Paper*)">
@brief 设置页面纸张
@param [in] pPaper 页面纸张
@return  void 

</member>
        <member name="M:SysCarto.IPrinter.GetPaper">
@brief 获取页面纸张
@return  Paper* 页面纸张

</member>
        <member name="M:SysCarto.IPrinter.FinishPrinting">
@brief 完成打印
@return  void  

</member>
        <member name="M:SysCarto.IPrinter.Filter">
@brief 获取文件过滤器
@return  QString  过滤文件

</member>
        <member name="M:SysCarto.IPrinter.FileExtension">
@brief 获取文件附录
@return  QString  文件附录

</member>
        <member name="M:SysCarto.IPrinter.DriverName">
@brief 获取驱动名字
@return  QString  驱动名字

</member>
        <member name="M:SysCarto.IPrinter.GetName">
@brief 获取名字
@return  QString  名字

</member>
        <member name="M:SysCarto.IPrinter.DoesDriverSupportPrinter(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 工作驱动支持的打印机
@param [in] strPrinterName 打印机名称
@return bool  是否支持，是 true ,否 false

</member>
        <member name="M:SysCarto.IPrinter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IPrinter">
@class  IPrinter
@brief  打印机

</member>
        <member name="F:SysCarto.Paper.m_units">
@brief pie单元对象

</member>
        <member name="F:SysCarto.Paper.m_enumFormID">
@brief 纸张尺寸编号

</member>
        <member name="F:SysCarto.Paper.m_dHeight">
@brief 高度

</member>
        <member name="F:SysCarto.Paper.m_dWidth">
@brief 宽度

</member>
        <member name="F:SysCarto.Paper.m_vecFormInfo">
@brief 表格信息集合

</member>
        <member name="M:SysCarto.Paper.InitFormInfo">
@brief 初始化表格信息
@return  void

</member>
        <member name="M:SysCarto.Paper.GetFormCount">
@brief 获取表格数量
@return  int 表格数量

</member>
        <member name="M:SysCarto.Paper.GetCustomSize(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取定制大小
@param [in out] dWidth  宽度
@param [in out] dHeight 高度
@return  void

</member>
        <member name="M:SysCarto.Paper.SetCustomSize(System.Double,System.Double)">
@brief 设置定制大小
@param [in] dWidth  宽度
@param [in] dHeight 高度
@return  void

</member>
        <member name="M:SysCarto.Paper.GetFormInfo(SysCarto.PageFormID,SysCarto.FormInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取表格信息
@param [in] formID  纸张尺寸编号
@param [in] fromInfo  表格信息
@return bool 是否成功

</member>
        <member name="M:SysCarto.Paper.Clone">
@brief 克隆
@return  PaperPtr 新克隆的对象

</member>
        <member name="M:SysCarto.Paper.SetUnits(SysUI.pieUnits)">
@brief 设置单元
@param [in] units  单元
@return void

</member>
        <member name="M:SysCarto.Paper.GetUnits">
@brief 获取单元
@return SysUI::pieUnits 单元

</member>
        <member name="M:SysCarto.Paper.QueryPaperSize(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询获取纸张尺寸大小
@param [in out] dWidth  纸张尺寸宽度
@param [in out] dHeight 纸张尺寸高度
@return void

</member>
        <member name="M:SysCarto.Paper.SetFormID(SysCarto.PageFormID)">
@brief 设置纸张尺寸编号
@param [in] formID 纸张尺寸编号
@return  void

</member>
        <member name="M:SysCarto.Paper.GetFormID">
@brief  获取纸张尺寸编号
@return PageFormID   纸张尺寸编号

</member>
        <member name="M:SysCarto.Paper.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Paper.#ctor(SysCarto.PageFormID)">
@brief  构造函数
@param [in] formID   纸张尺寸编号

</member>
        <member name="T:SysCarto.Paper">
@brief  类的前置声明和智能指针定义


@class  Paper
@brief  纸张

</member>
        <member name="M:SysCarto.FormInfo.#ctor">
@brief  构造函数

</member>
        <member name="M:SysCarto.FormInfo.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief  构造函数
@param [in] id  纸张尺寸编号
@param [in] str 文本信息
@param [in] dWid 宽度
@param [in] dHei 高度

</member>
        <member name="T:SysCarto.FormInfo">
@brief  FormInfo 表格信息结构体

</member>
        <member name="M:SysUI.Units.GetAreaUnitsDesc(SysUI.pieAreaUnits)">
@brief 获取区域制图单位描述
@param [in] units  制图单位
@return QString 制图单位的描述信息

</member>
        <member name="M:SysUI.Units.ConvertAreaUnits(System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.pieAreaUnits,SysUI.pieAreaUnits)">
@brief 转化区域制图单位
@param [in] dInValue 输入值
@param [in out] dOutValue 输出值
@param [in] unitsIn   单位输入值
@param [in] dOutValue 单位输出值
@return   成功 true, 失败 false

</member>
        <member name="M:SysUI.Units.GetUnitsDesc(SysUI.pieUnits)">
@brief 获取制图单位描述
@param [in] units  制图单位
@return QString 制图单位的描述信息

</member>
        <member name="M:SysUI.Units.ConvertUnits(System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.pieUnits,SysUI.pieUnits)">
@brief 转化制图单位
@param [in] dInValue 输入值
@param [in out] dOutValue 输出值
@param [in] unitsIn   单位输入值
@param [in] dOutValue 单位输出值
@return   成功 true, 失败 false

</member>
        <member name="T:SysUI.Units">
@class  Units
@brief  制图单位类

</member>
        <member name="T:SysUI.pieAreaUnits">
@class pieAreaUnits
	* @brief PIE中面积单位

</member>
        <member name="F:AreaUnitsAreaUnitsLast">
@brief 区域上最后一个单元

</member>
        <member name="F:AreaUnitsDecimalSquareDegrees">
@brief 平方度（十进制）

</member>
        <member name="F:AreaUnitsSquareKilometers">
@brief 平方千米（平方公里）

</member>
        <member name="F:AreaUnitsHectares">
@brief 公顷

</member>
        <member name="F:AreaUnitsAres">
@brief 平方公亩

</member>
        <member name="F:AreaUnitsSquareMeters">
@brief 平方米

</member>
        <member name="F:AreaUnitsSquareDecimeters">
@brief 平方分米

</member>
        <member name="F:AreaUnitsSquareCentimeters">
@brief 平方厘米

</member>
        <member name="F:AreaUnitsSquareMillimeters">
@brief 平方毫米

</member>
        <member name="F:AreaUnitsSquareMiles">
@brief 英里

</member>
        <member name="F:AreaUnitsAcres">
@brief 平方英亩

</member>
        <member name="F:AreaUnitsSquareYards">
@brief 平方码

</member>
        <member name="F:AreaUnitsSquareFeet">
@brief 平方英尺

</member>
        <member name="F:AreaUnitsSquareInches">
@brief 平方英寸

</member>
        <member name="F:AreaUnitsUnknown">
@brief 未知

</member>
        <member name="T:SysCarto.PageFormID">
@class  PageFormID
@brief  页面尺寸编号 枚举

</member>
        <member name="F:PageFormSameAsPrinter">
@brief  与打印器相同

</member>
        <member name="F:PageFormCustom">
@brief  自定义

</member>
        <member name="F:PageFormA0">
@brief  A0

</member>
        <member name="F:PageFormA1">
@brief  A1

</member>
        <member name="F:PageFormA2">
@brief  A2

</member>
        <member name="F:PageFormA3">
@brief  A3

</member>
        <member name="F:PageFormA4">
@brief  A4

</member>
        <member name="F:PageFormA5">
@brief  A5

</member>
        <member name="F:PageFormE">
@brief  ANSI E

</member>
        <member name="F:PageFormD">
@brief  ANSI D

</member>
        <member name="F:PageFormC">
@brief  ANSI C

</member>
        <member name="F:PageFormTabloid">
@brief  便笺

</member>
        <member name="F:PageFormLegal">
@brief  法律专用纸

</member>
        <member name="F:PageFormLetter">
@brief  信纸

</member>
        <member name="F:SysCarto.IBackground.m_dGapY">
@brief Y轴的间距

</member>
        <member name="F:SysCarto.IBackground.m_dGapX">
@brief X轴的间距

</member>
        <member name="F:SysCarto.IBackground.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.IBackground.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IBackground.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IBackground.Clone">
@brief 克隆
@return IBackgroundPtr 克隆背景类对象

</member>
        <member name="M:SysCarto.IBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] ptrGeo    几何对象
@return void

</member>
        <member name="M:SysCarto.IBackground.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   获取主题背景边界范围 
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何对象
@return  SysGeometry::EnvelopePtr   背景边界范围 

</member>
        <member name="M:SysCarto.IBackground.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   获取用于绘制背景的Geometry 
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何对象
@return  SysGeometry::GeometryPtr    用于绘制背景的Geometry 

</member>
        <member name="M:SysCarto.IBackground.SetYGap(System.Double)">
@brief  设置Y轴的间距
@param [in] gap  Y轴的间距
@return void

</member>
        <member name="M:SysCarto.IBackground.GetYGap">
@brief   获取Y轴的间距
@return  double  X轴的间距

</member>
        <member name="M:SysCarto.IBackground.SetXGap(System.Double)">
@brief  设置X轴的间距
@param [in] gap  X轴的间距
@return void

</member>
        <member name="M:SysCarto.IBackground.GetXGap">
@brief   获取X轴的间距
@return  double  X轴的间距

</member>
        <member name="M:SysCarto.IBackground.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in] strName 名字
@return void 

</member>
        <member name="M:SysCarto.IBackground.GetName">
@brief  获取名字
@return QString 名字

</member>
        <member name="T:SysCarto.IBackground">
@brief 类的前置声明和智能指针定义


@class IBackground
@brief 背景类

</member>
        <member name="T:QEventPrivate">
@brief 定义动态库导出符

</member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.set_BandIndex(System.Int32)">
            <summary>
设置波段索引
</summary>
            <param name="dValue">线性拉伸百分比</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.get_BandIndex">
            <summary>
获取波段索引
</summary>
            <returns>波段索引</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.set_ClassColors(System.Collections.Generic.IList`1{System.Drawing.Color})">
            <summary>
设置ClassColors
</summary>
            <param name="listColor">ClassColors</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.get_ClassColors">
            <summary>
获取ClassColors
</summary>
            <returns>ClassColors</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.get_ColorRamp">
            <summary>
获取ColorRamp
</summary>
            <returns>ColorRamp</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.set_LinearStretchPercent(System.Double)">
            <summary>
设置线性拉伸百分比
</summary>
            <param name="dValue">线性拉伸百分比</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.get_LinearStretchPercent">
            <summary>
获取线性拉伸百分比
</summary>
            <returns>线性拉伸百分比</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.set_StretchType(&lt;unknown type&gt;)">
            <summary>
设置栅格拉伸类型
</summary>
            <param name="eType">栅格拉伸类型</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.get_StretchType">
            <summary>
获取栅格拉伸类型
</summary>
            <returns>栅格拉伸类型</returns>
        </member>
        <member name="F:PIE.Carto.RasterStretchColorRampRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterStretchColorRampRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.GetRenderMinMax(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.SetLutLineInfo(System.Boolean,System.Collections.Generic.IList`1{System.Drawing.Point},System.Int32)">
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.GetLutLineInfo(System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{System.Drawing.Point}}@)">
            <summary>
获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
            <summary>
 获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.GetMinimumMaximum(System.Double@,System.Double@,System.Int32)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.SetMinimumMaximum(System.Double,System.Double,System.Int32)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.GetMinimumMaximum(System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.SetMinimumMaximum(System.Double,System.Double)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="P:PIE.Carto.RasterStretchColorRampRender.LinearStretchPercent">
            <summary>
获取或者设置线性拉伸百分比
</summary>
        </member>
        <member name="P:PIE.Carto.RasterStretchColorRampRender.StretchType">
            <summary>
获取或者设置栅格拉伸类型
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.GetLut(System.Int32)">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <returns>获取Lut</returns>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.SetLut(System.Int32,System.Byte[])">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="P:PIE.Carto.RasterStretchColorRampRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.RasterStretchColorRampRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="P:PIE.Carto.RasterStretchColorRampRender.BandIndex">
            <summary>
获取或者设置波段索引编号
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterStretchColorRampRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterStretchColorRampRender">
            <summary>
栅格StretchColorRamp渲染类
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterStretchColorRampRender.ClassColors">
            <summary>
获取或者设置ClassColors
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterStretchColorRampRender.ColorRamp">
            <summary>
获取或者设置ColorRamp
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterStretchColorRampRender.BandIndex">
            <summary>
获取或者设置波段索引编号
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterStretchColorRampRender">
            <summary>
IRasterStretchColorRampRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterStretchColorRampRenderPtr">
@brief  栅格拉伸颜色带渲染   智能指针

</member>
        <member name="F:SysCarto.RasterStretchColorRampRender.m_vecColor">
@brief  颜色集合

</member>
        <member name="F:SysCarto.RasterStretchColorRampRender.m_nBandIndex">
@brief  波段索引

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in] ptrDataset 栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.GetBandIndex">
@brief  获取波段索引
@return  int   波段索引

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.SetBandIndex(System.Int32)">
@brief  设置波段索引
@param  [in]  nBandIndex   波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.SetClassColors(QVector&lt;QColor&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置分类颜色
@param [in] vecColor 颜色集合
@return  void

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.GetColorRamp">
@brief 获取颜色带
@return   SysDisplay::IColorRampPtr  颜色带

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterStretchColorRampRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterStretchColorRampRender">
@class RasterStretchColorRampRender
@brief 栅格拉伸颜色带渲染

</member>
        <member name="F:SysDisplay.IColorRamp.m_strName">
@brief 名字

</member>
        <member name="F:SysDisplay.IColorRamp.m_vecColor">
@brief 颜色集合

</member>
        <member name="F:SysDisplay.IColorRamp.m_nSize">
@brief  大小

</member>
        <member name="M:SysDisplay.IColorRamp.Clone">
@brief 克隆
@return IColorRampPtr 克隆成果

</member>
        <member name="M:SysDisplay.IColorRamp.GetSize">
@brief  获取大小
@return  int 尺寸大小值

</member>
        <member name="M:SysDisplay.IColorRamp.SetSize(System.Int32)">
@brief  设置大小
@param  int nSize 尺寸大小

</member>
        <member name="M:SysDisplay.IColorRamp.GetColors">
@brief  获取颜色集合
@return  QVector 颜色集合

</member>
        <member name="M:SysDisplay.IColorRamp.GetColor(System.Int32)">
@brief  根据索引获取颜色
@return QColor 获取的颜色

</member>
        <member name="M:SysDisplay.IColorRamp.CreateRamp">
@brief 创建颜色带   （修改了参数之后，必须调用CreateRamp）
@return bool 成功与否

</member>
        <member name="M:SysDisplay.IColorRamp.GetName">
@brief 获取名字
@return QString 名称

</member>
        <member name="M:SysDisplay.IColorRamp.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDisplay.IColorRamp.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDisplay.IColorRamp">
@brief 类的前置声明和智能指针定义


@class IColorRamp
@brief 颜色带类 

</member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_GdbVersion">
            <summary>
获取或设置地理数据库版本名
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_DynamicLayers">
            <summary>
获取或设置动态图层
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_LayerTimeOptions">
            <summary>
获取或设置图层事件Options
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_Transparent">
            <summary>
获取或设置背景是否透明
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_ImageFormat">
            <summary>
获取或设置图片类型(PNG,PNG8,PNG24,PNG32,JPG,PDF,BMP,GIF,SVG)
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_LayerDefinitions">
            <summary>
获取或设置图层查询条件
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_Layers">
            <summary>
获取或设置图层集
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_DPI">
            <summary>
获取或设置分辨率
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.get_BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="F:PIE.Carto.ArcGISMapDynamicLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.ArcGISMapDynamicLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.GdbVersion">
            <summary>
获取或设置地理数据库版本名
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.DynamicLayers">
            <summary>
获取或设置动态图层
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.LayerTimeOptions">
            <summary>
获取或设置图层事件Options
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.Transparent">
            <summary>
获取或设置背景是否透明
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.ImageFormat">
            <summary>
获取或设置图片类型(PNG,PNG8,PNG24,PNG32,JPG,PDF,BMP,GIF,SVG)
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.LayerDefinitions">
            <summary>
获取或设置图层查询条件
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.Layers">
            <summary>
获取或设置图层集
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.DPI">
            <summary>
获取或设置分辨率
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.ArcGISMapDynamicLayer.BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArcGISMapDynamicLayer.#ctor(System.String)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ArcGISMapDynamicLayer">
            <summary>
ArcGIS动态地图服务图层对象
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.GdbVersion">
            <summary>
获取或设置地理数据库版本名
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.DynamicLayers">
            <summary>
获取或设置动态图层
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.LayerTimeOptions">
            <summary>
获取或设置图层事件Options
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.Time">
            <summary>
获取或设置时间
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.Transparent">
            <summary>
获取或设置背景是否透明
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.ImageFormat">
            <summary>
获取或设置图片类型(PNG,PNG8,PNG24,PNG32,JPG,PDF,BMP,GIF,SVG)
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.ImageSR">
            <summary>
获取或设置图片空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.ImageSize">
            <summary>
获取或设置图片大小
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.LayerDefinitions">
            <summary>
获取或设置图层查询条件
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.Layers">
            <summary>
获取或设置图层集
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.DPI">
            <summary>
获取或设置分辨率
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.BoundingBoxSR">
            <summary>
获取或设置地图范围的空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.IArcGISMapDynamicLayer.BoundingBox">
            <summary>
获取或设置地图范围
</summary>
        </member>
        <member name="T:PIE.Carto.IArcGISMapDynamicLayer">
            <summary>
ArcGIS动态地图服务图层对象接口
</summary>
        </member>
        <member name="D:SysCarto.ArcGISMapDynamicLayerPtr">
@brief   ArcGIS鍦板浘鍔ㄦ€佸浘灞? 鏅鸿兘鎸囬拡瀵硅薄

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strTransparent">
@brief 閫忔槑搴?

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strTime">
@brief 鏃堕棿

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strSize">
@brief  灏哄澶у皬

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strMapScale">
@brief 鍦板浘姣斾緥

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strLayers">
@brief 鍥惧眰闆?

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strLayerTimeOptions">
@brief 鍥惧眰鏃堕棿閫夋嫨椤?

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strLayerDefs">
@brief 鍥惧眰瀹氫箟

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strImageSR">
@brief 鍥惧儚SR

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strGdbVersion">
@brief 鍔ㄦ€佸浘灞傞泦

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strFormat">
@brief 鏍煎紡

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strDynamicLayers">
@brief 鍔ㄦ€佸浘灞傞泦

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strDpi">
@brief 姣忚嫳瀵哥偣鏁癲pi

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strBboxSR">
@brief 娉㈡鐩掑瓙SR

</member>
        <member name="F:SysCarto.ArcGISMapDynamicLayer.m_strBbox">
@brief 娉㈡鐩掑瓙

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetRequestCommand">
@brief 鑾峰彇璇锋眰鍛戒护
@return QString   璇锋眰鍛戒护  

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetUriParameter">
@brief 鑾峰彇URI鍙傛暟
@return QString   URI鍙傛暟 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.CopyTo(SysCarto.Layer*)">
@brief 鎷疯礉鍒癓ayer
@param[in] Layer* Layer瀵硅薄

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetTransparent(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆閫忔槑搴?
@param [in] str  閫忔槑搴?
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetTransparent">
@brief 鑾峰彇閫忔槑搴?
@return QString  閫忔槑搴?

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetTime(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏃堕棿
@param [in] str  鏃堕棿
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetTime">
@brief 鑾峰彇鏃堕棿
@return QString  鏃堕棿

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetSize(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆澶у皬
@param [in] str  澶у皬
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetSize">
@brief 鑾峰彇澶у皬
@return QString  澶у皬

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetMapScale(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍦板浘姣斾緥
@param [in] str  鍦板浘姣斾緥
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetMapScale">
@brief 鑾峰彇鍦板浘姣斾緥
@return QString  鍦板浘姣斾緥

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetLayers(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍥惧眰闆?
@param [in] str  鍥惧眰闆?
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetLayers">
@brief 鑾峰彇鍥惧眰闆?
@return QString  鍥惧眰闆?

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetLayerTimeOptions(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍥惧眰鏃堕棿閫夋嫨椤?
@param [in] str  鍥惧眰鏃堕棿閫夋嫨椤?
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetLayerTimeOptions">
@brief 鑾峰彇鍥惧眰鏃堕棿閫夋嫨椤?
@return QString  鍥惧眰鏃堕棿閫夋嫨椤?

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetLayerDefs(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍥惧眰瀹氫箟
@param [in] str  鍥惧眰瀹氫箟
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetLayerDefs">
@brief 鑾峰彇鍥惧眰瀹氫箟
@return QString  鍥惧眰瀹氫箟

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetImageSR(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍥惧儚SR  (SR:鍥惧儚鐞冮潰寮у害)
@param [in] str  鍥惧儚SR
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetImageSR">
@brief 鑾峰彇鍥惧儚SR (SR:鍥惧儚鐞冮潰寮у害)
@return QString  鍥惧儚SR

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetGdbVersion(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆GDB鐗堟湰
@param [in] str  GDB鐗堟湰
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetGdbVersion">
@brief 鑾峰彇GDB鐗堟湰
@return QString  GDB鐗堟湰

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetFormat(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鏍煎紡
@param [in] str 鏍煎紡
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetFormat">
@brief 鑾峰彇鏍煎紡
@return QString  鏍煎紡

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetDynamicLayers(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆鍔ㄦ€佸浘灞傞泦
@param [in] str 鍔ㄦ€佸浘灞傞泦
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetDynamicLayers">
@brief 鑾峰彇鍔ㄦ€佸浘灞傞泦
@return QString  鍔ㄦ€佸浘灞傞泦

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetDpi(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆姣忚嫳瀵哥偣鏁癲pi
@param [in] str 姣忚嫳瀵哥偣鏁癲pi
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetDpi">
@brief 鑾峰彇姣忚嫳瀵哥偣鏁癲pi
@return QString  姣忚嫳瀵哥偣鏁癲pi

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetBboxSR(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娉㈡鐩掑瓙SR
@param [in] str 娉㈡鐩掑瓙SR
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetBboxSR">
@brief 鑾峰彇娉㈡鐩掑瓙SR
@return QString  娉㈡鐩掑瓙SR

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.SetBbox(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 璁剧疆娉㈡鐩掑瓙
@param [in] str 娉㈡鐩掑瓙
@return void 

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.GetBbox">
@brief 鑾峰彇娉㈡鐩掑瓙
@return QString  娉㈡鐩掑瓙

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.Clone">
@brief 鍏嬮殕
@return LayerPtr 鍏嬮殕鍥惧眰瀵硅薄

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.Dispose">
@brief 鏋愭瀯鍑芥暟

</member>
        <member name="M:SysCarto.ArcGISMapDynamicLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 鏋勯€犲嚱鏁?
@param [in] uri  缁熶竴璧勬簮鏍囪瘑绗?

</member>
        <member name="T:SysCarto.ArcGISMapDynamicLayer">
@class  ArcGISMapDynamicLayer
@brief  ArcGIS鍦板浘鍔ㄦ€佸浘灞?

</member>
        <member name="D:SysCarto.ArcGISImageTiledLayerPtr">
@brief   ArcGIS图像瓦片图层  智能指针对象

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.replyArcGISGetData_Job(QNetworkReply*)">
@brief  ArcGIS获取的数据应答
@param [in] reply  网络应答
@return  void 

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_ptrEnvelope">
@brief 包络线范围

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_ptrTransform">
@brief 显示转换对象

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_pPainter">
@brief 绘图对象

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_strSingleFusedMapCache">
@brief 单一融合地图缓存

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_GetDataManager_Job">
@brief 获取数据应答

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_GetDataReply_Job">
@brief 网络数据应答

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.GetArcGISValue(QJsonObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QStringList)">
@brief 获取ArcGIS值
@param [in] obj  JSON数据对象
@param [in] keylist  key值列表
@return QString  ArcGIS的值

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.replyArcGISGetData(QNetworkReply*)">
@brief 回复ArcGis获取的数据
@param [in] reply 网络数据应答
@return void

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_GetDataManager">
@brief 网络权限管理

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_GetDataReply">
@brief 网络数据应答

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_size">
@brief 尺寸

</member>
        <member name="F:SysCarto.ArcGISImageTiledLayer.m_ptrBox">
@brief 盒子包络线范围

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.GetRequestCommand">
@brief 获取请求命令
@return QString 请求命令

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.GetUriParameter">
@brief 获取Uri参数
@return QString  获取的Uri参数

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief 获取Uri 
@param [in] level 级别
@param [in] row 行索引
@param [in] col 列索引
@return QString 获取的Uri 

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.Initialize">
@brief 初始化
@return void

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象
@return  void 

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter      绘制对象
@param [in] ptrTransform 显示转换对象
@param [in] dpType       图层绘制相应类型
@param [in] ptrTrackerCancel  取消追踪对象
@return  void

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.GetExtent">
@brief 获取包络线范围
@return  SysGeometry::EnvelopePtr  包络线范围

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ArcGISImageTiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri  统一资源标识符

</member>
        <member name="T:SysCarto.ArcGISImageTiledLayer">
@class ArcGISImageTiledLayer
@brief  ArcGIS图像瓦片图层 

</member>
        <member name="D:SysCarto.TiledLayerPtr">
@brief  瓦片图层基类  智能指针

</member>
        <member name="M:SysCarto.TiledLayer.OnTimerOut">
@brief 定时器输出
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.GetJobFromReply(QNetworkReply*)">
@brief 从回复中获取工作
@param [in] reply   网络回复
@return  TileRenderJob*  瓦片渲染工作

</member>
        <member name="M:SysCarto.TiledLayer.NetworkReplyFinished(QNetworkReply*)">
@brief 网路应答完成
@param [in] reply   网络回复
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.RenderJobFinished(SysCarto.TileRenderJob*)">
@brief 渲染工作完成
@param [in] job   瓦片渲染工作
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.DownloadTileByJob(SysCarto.TileRenderJob*)">
@brief 通过工作下载瓦片数据
@param [in] job   瓦片渲染工作
@return  void 

</member>
        <member name="M:SysCarto.TiledLayer.GetTileEnvelope(System.Int32,System.Int32,System.Int32)">
@brief 获取瓦片包络线
@param [in] level    级别
@param [in] row      行索引
@param [in] column   列索引
@return  SysGeometry::EnvelopePtr   瓦片包络线范围

</member>
        <member name="F:SysCarto.TiledLayer.m_curJobs">
@brief 瓦片渲染工作集合

</member>
        <member name="F:SysCarto.TiledLayer.m_ptrTrackerCancel">
@brief 取消追踪对象

</member>
        <member name="F:SysCarto.TiledLayer.m_NetworkManager">
@brief 网络权限管理

</member>
        <member name="F:SysCarto.TiledLayer.m_pLoop">
@brief 事件循环

</member>
        <member name="F:SysCarto.TiledLayer.m_nJobSize">
@brief 工作尺寸

</member>
        <member name="F:SysCarto.TiledLayer.m_tiledType">
@brief 瓦片类型

</member>
        <member name="F:SysCarto.TiledLayer.m_pTileInfo">
@brief 瓦片信息

</member>
        <member name="M:SysCarto.TiledLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr    包络线范围

</member>
        <member name="M:SysCarto.TiledLayer.GenerateRenderJobs(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.TileKey,QList&lt;SysCarto.TileRenderJob&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 生成渲染工作
@param[in] painter     绘制对象
@param[in] ptrTrasform 坐标转换对象
@param[in] ptrTrackerCancel  取消追踪对象
@param[in] list        瓦片渲染工作集合
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.GetTileDataUri(System.Int32,System.Int32,System.Int32)">
@brief  获取瓦片数据uri
@param [in] level    级别
@param [in] row      行索引
@param [in] column   列索引
@return  QString  瓦片数据uri

</member>
        <member name="M:SysCarto.TiledLayer.Initialize">
@brief 初始化
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.GetTiledType">
@brief 获取瓦片类型
@return  TiledType  瓦片类型

</member>
        <member name="M:SysCarto.TiledLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.TiledLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter     绘制对象
@param [in] ptrTrasform 坐标转换对象
@param [in] dpType      图层绘制相应类型
@param [in] ptrTrackerCancel  取消追踪对象
@return  void

</member>
        <member name="M:SysCarto.TiledLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TiledLayer.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] uri  统一资源标识符

</member>
        <member name="T:SysCarto.TiledType">
@class  TiledType
@brief  瓦片类型 枚举

</member>
        <member name="F:TDTTiled">
@brief 天地图瓦片数据

</member>
        <member name="F:HTHTTiled">
@brief 航天宏图瓦片数据

</member>
        <member name="F:CustomerTiled">
@brief 用户(自定义)瓦片数据

</member>
        <member name="F:BingMapsTiled">
@brief Bejing瓦片数据

</member>
        <member name="F:ArcGISTiled">
@brief ArcGIS瓦片数据

</member>
        <member name="F:SysCarto.QWorkThread.m_pTiledLayer">
@brief 瓦片图层

</member>
        <member name="F:SysCarto.QWorkThread.m_pWorkJobs">
@brief 瓦片渲染工作集合

</member>
        <member name="M:SysCarto.QWorkThread.SetTiledLayer(SysCarto.TiledLayer*)">
@brief 设置瓦片图层
@param [in] pTiledLayer   瓦片图层
@return void

</member>
        <member name="M:SysCarto.QWorkThread.SetWorkJobs(QList&lt;SysCarto.TileRenderJob&gt;*)">
@brief 设置运作的工作
@param [in] pWorkJobs   瓦片渲染工作集合
@return void

</member>
        <member name="M:SysCarto.QWorkThread.run">
@brief  运行函数
@return void

</member>
        <member name="M:SysCarto.QWorkThread.Dispose">
@brief  析构函数

</member>
        <member name="M:SysCarto.QWorkThread.#ctor(QObject*)">
@brief  构造函数
@param [in] parent 父指针

</member>
        <member name="T:SysCarto.QWorkThread">
@class  QWorkThread
@brief  工作线程

</member>
        <member name="T:SysCarto.TiledLayer">
@brief 类的前置声明和智能指针定义


@class TiledLayer
@brief 瓦片图层基类

</member>
        <member name="F:SysCarto.TileInfo.SpatialReference">
@brief 空间参考

</member>
        <member name="F:SysCarto.TileInfo.FullExtent">
@brief 全局范围

</member>
        <member name="F:SysCarto.TileInfo.InitialExtent">
@brief 初始化范围

</member>
        <member name="F:SysCarto.TileInfo.LODInfos">
@brief LOD信息

</member>
        <member name="F:SysCarto.TileInfo.Origin">
@brief 参照点

</member>
        <member name="F:SysCarto.TileInfo.Format">
@brief 瓦片图像格式

</member>
        <member name="F:SysCarto.TileInfo.CompressionQuality">
@brief 压缩的质量

</member>
        <member name="F:SysCarto.TileInfo.TileWidth">
@brief 瓦片宽度

</member>
        <member name="F:SysCarto.TileInfo.TileHeight">
@brief 瓦片高度

</member>
        <member name="F:SysCarto.TileInfo.DPI">
@brief 每英寸点数

</member>
        <member name="M:SysCarto.TileInfo.op_Assign(SysCarto.TileInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数   重载等号操作符 “=”

</member>
        <member name="M:SysCarto.TileInfo.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TileInfo.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TileInfo">
@class  TileInfo
@brief  瓦片信息

</member>
        <member name="F:SysCarto.TileRenderJob.pContext">
@brief  内容

</member>
        <member name="F:SysCarto.TileRenderJob.TrackerCancel">
@brief  取消追踪对象

</member>
        <member name="F:SysCarto.TileRenderJob.DisplayTransformation">
@brief  显示转换对象

</member>
        <member name="F:SysCarto.TileRenderJob.TileExtent">
@brief  瓦片范围

</member>
        <member name="F:SysCarto.TileRenderJob.ImageData">
@brief  图像数据

</member>
        <member name="F:SysCarto.TileRenderJob.Column">
@brief 列索引

</member>
        <member name="F:SysCarto.TileRenderJob.Row">
@brief 行索引

</member>
        <member name="F:SysCarto.TileRenderJob.Level">
@brief 级别

</member>
        <member name="F:SysCarto.TileRenderJob.Painter">
@brief 绘图对象

</member>
        <member name="M:SysCarto.TileRenderJob.op_Assign(SysCarto.TileRenderJob!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数   重载等号操作符 “=”

</member>
        <member name="M:SysCarto.TileRenderJob.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.TileRenderJob.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.TileRenderJob">
@class TileRenderJob
@brief 图像渲染工作

</member>
        <member name="F:SysCarto.ImageTileData.ImageData">
@brief  图像数据

</member>
        <member name="F:SysCarto.ImageTileData.Column">
@brief 列索引

</member>
        <member name="F:SysCarto.ImageTileData.Row">
@brief 行索引

</member>
        <member name="F:SysCarto.ImageTileData.Level">
@brief 级别

</member>
        <member name="M:SysCarto.ImageTileData.op_Assign(SysCarto.ImageTileData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数   重载等号操作符 “=”

</member>
        <member name="M:SysCarto.ImageTileData.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ImageTileData.#ctor(SysCarto.ImageTileData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] src  图像瓦片数据

</member>
        <member name="M:SysCarto.ImageTileData.#ctor(System.Int32,System.Int32,System.Int32,QByteArray)">
@brief 构造函数
@param [in] level    级别
@param [in] row      行索引
@param [in] column   列索引
@param [in] imageData  图像数据

</member>
        <member name="T:SysCarto.ImageTileData">
@class ImageTileData
@brief 图像瓦片数据

</member>
        <member name="T:SysCarto.LODInfo">
@brief  LODInfo信息结构体

</member>
        <member name="T:SysCarto.TileImageFormat">
@class TileImageFormat
@brief 瓦片图像格式 枚举

</member>
        <member name="F:Mixed">
@brief  混合类型

</member>
        <member name="F:Lerc">
@brief  Lerc格式类型

</member>
        <member name="F:Jpg">
@brief  jpg格式类型

</member>
        <member name="F:Png32">
@brief  png格式32位类型

</member>
        <member name="F:Png24">
@brief  png格式24位类型

</member>
        <member name="F:Png8">
@brief  png格式8位类型

</member>
        <member name="F:Png">
@brief  png格式类型

</member>
        <member name="F:Unknown">
@brief  未知类型

</member>
        <member name="M:PIE.Carto.HookHelper.set_Hook(System.Object)">
            <summary>
Hook
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.get_OperationStack">
            <summary>
OperationStack
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.get_PageLayout">
            <summary>
PageLayout
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.get_ActiveView">
            <summary>
地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.get_FocusMap">
            <summary>
地图对象
</summary>
        </member>
        <member name="F:PIE.Carto.HookHelper.m_PmdContents">
            <summary>
IPmdContents
</summary>
        </member>
        <member name="F:PIE.Carto.HookHelper.m_Hook">
            <summary>
IPmdContents
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.GetContent">
            <summary>
获得IPmdContents
</summary>
            <summary>
IPmdContents
</summary>
        </member>
        <member name="P:PIE.Carto.HookHelper.Hook">
            <summary>
Hook
</summary>
        </member>
        <member name="P:PIE.Carto.HookHelper.OperationStack">
            <summary>
OperationStack
</summary>
        </member>
        <member name="P:PIE.Carto.HookHelper.PageLayout">
            <summary>
PageLayout
</summary>
        </member>
        <member name="P:PIE.Carto.HookHelper.FocusMap">
            <summary>
FocusMap
</summary>
        </member>
        <member name="P:PIE.Carto.HookHelper.ActiveView">
            <summary>
ActiveView
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.HookHelper.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.HookHelper">
            <summary>
HookHelper类
</summary>
        </member>
        <member name="M:PIE.Carto.IHookHelper.GetContent">
            <summary>
获得IPmdContents
</summary>
        </member>
        <member name="P:PIE.Carto.IHookHelper.Hook">
            <summary>
Hook
</summary>
        </member>
        <member name="P:PIE.Carto.IHookHelper.OperationStack">
            <summary>
OperationStackPtr
</summary>
        </member>
        <member name="P:PIE.Carto.IHookHelper.PageLayout">
            <summary>
PageLayout
</summary>
        </member>
        <member name="P:PIE.Carto.IHookHelper.FocusMap">
            <summary>
FocusMap
</summary>
        </member>
        <member name="P:PIE.Carto.IHookHelper.ActiveView">
            <summary>
ActiveView
</summary>
        </member>
        <member name="T:PIE.Carto.IHookHelper">
            <summary>
IHookHelper接口
</summary>
        </member>
        <member name="M:PIE.Carto.IPmdContents.GetControlHandle">
            <summary>
获得控件的Handle
</summary>
            <returns>获得控件的Handle</returns>
        </member>
        <member name="M:PIE.Carto.IPmdContents.GetMaps">
            <summary>
获得Maps
</summary>
            <returns>Maps对象</returns>
        </member>
        <member name="P:PIE.Carto.IPmdContents.TrackerCancel">
            <summary>
获取或设置TrackerCancel
</summary>
        </member>
        <member name="P:PIE.Carto.IPmdContents.CurrentTool">
            <summary>
获取或设置当前工具
</summary>
        </member>
        <member name="P:PIE.Carto.IPmdContents.CustomerProperty">
            <summary>
获取或设置当前Property
</summary>
        </member>
        <member name="P:PIE.Carto.IPmdContents.PageLayout">
            <summary>
获取或设置PageLayout
</summary>
        </member>
        <member name="P:PIE.Carto.IPmdContents.FocusMap">
            <summary>
获取或设置FocusMap
</summary>
        </member>
        <member name="P:PIE.Carto.IPmdContents.ActiveView">
            <summary>
获取ActiveView
</summary>
        </member>
        <member name="T:PIE.Carto.IPmdContents">
            <summary>
IPmdContents接口
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_LinearStretchPercent(System.Double)">
            <summary>
设置线性拉伸百分比
</summary>
            <param name="dValue">线性拉伸百分比</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_LinearStretchPercent">
            <summary>
获取线性拉伸百分比
</summary>
            <returns>线性拉伸百分比</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_StretchType(&lt;unknown type&gt;)">
            <summary>
设置栅格拉伸类型
</summary>
            <param name="eType">栅格拉伸类型</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_StretchType">
            <summary>
获取栅格拉伸类型
</summary>
            <returns>栅格拉伸类型</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_AlphaBandIndex(System.Int32)">
            <summary>
设置透明波段索引编号
</summary>
            <param name="alphaBandIndex">透明波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_AlphaBandIndex">
            <summary>
获取透明波段索引编号
</summary>
            <returns>透明波段索引编号</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_BlueBandIndex(System.Int32)">
            <summary>
设置蓝波段索引编号
</summary>
            <param name="blueBandIndex">蓝波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_BlueBandIndex">
            <summary>
获取蓝波段索引编号
</summary>
            <returns>蓝波段索引编号</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_GreenBandIndex(System.Int32)">
            <summary>
设置绿波段索引编号
</summary>
            <param name="greenBandIndex">绿波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_GreenBandIndex">
            <summary>
获取绿波段索引编号
</summary>
            <returns>绿波段索引编号</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_RedBandIndex(System.Int32)">
            <summary>
设置红波段索引编号
</summary>
            <param name="redBandIndex">红波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_RedBandIndex">
            <summary>
获取红波段索引编号
</summary>
            <returns>红波段索引编号</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_UseAlphaBand(System.Boolean)">
            <summary>
设置透明波段信息
</summary>
            <param name="useAlphaBand">透明波段</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_UseAlphaBand">
            <summary>
获取透明波段信息
</summary>
            <returns>透明波段</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_UseBlueBand(System.Boolean)">
            <summary>
设置蓝波段信息
</summary>
            <param name="useBlueBand">蓝波段</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_UseBlueBand">
            <summary>
获取蓝波段信息
</summary>
            <returns>蓝波段</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_UseGreenBand(System.Boolean)">
            <summary>
设置绿波段信息
</summary>
            <param name="useGreenBand">绿波段</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_UseGreenBand">
            <summary>
获取绿波段信息
</summary>
            <returns>绿波段</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.set_UseRedBand(System.Boolean)">
            <summary>
设置红波段信息
</summary>
            <param name="useRedBand">红波段</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.get_UseRedBand">
            <summary>
获取红波段信息
</summary>
            <returns>红波段</returns>
        </member>
        <member name="F:PIE.Carto.RasterRGBRender.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterRGBRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.GetRenderMinMax(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.SetLutLineInfo(System.Boolean,System.Collections.Generic.IList`1{System.Drawing.Point},System.Int32)">
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.GetLutLineInfo(System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{System.Drawing.Point}}@)">
            <summary>
获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
            <summary>
 获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.GetMinimumMaximum(System.Double@,System.Double@,System.Int32)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.SetMinimumMaximum(System.Double,System.Double,System.Int32)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.GetMinimumMaximum(System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.SetMinimumMaximum(System.Double,System.Double)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.LinearStretchPercent">
            <summary>
获取或者设置线性拉伸百分比
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.StretchType">
            <summary>
获取或者设置栅格拉伸类型
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.GetLut(System.Int32)">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <returns>获取Lut</returns>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <returns>栅格曲线信息</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.SetLut(System.Int32,System.Byte[])">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.QueryBandIndices(System.Int32,System.Int32,System.Int32)">
            <summary>
查询波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
            <summary>
查询波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.SetBandIndices(System.Int32,System.Int32,System.Int32)">
            <summary>
设置波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
            <summary>
设置波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.AlphaBandIndex">
            <summary>
获取或者设置透明波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.BlueBandIndex">
            <summary>
获取或者设置蓝波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.GreenBandIndex">
            <summary>
获取或者设置绿波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.RedBandIndex">
            <summary>
获取或者设置红波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.UseAlphaBand">
            <summary>
获取或者设置AlphaBand波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.UseBlueBand">
            <summary>
获取或者设置蓝波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.UseGreenBand">
            <summary>
获取或者设置绿波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRGBRender.UseRedBand">
            <summary>
获取或者设置红波段信息
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.Clone">
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>栅格渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRGBRender.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterRGBRender">
            <summary>
栅格RGB渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.GetRenderMinMax(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="nBandIndex">索引编号</param>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dStep">间隔值</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.SetLutLineInfo(System.Boolean,System.Collections.Generic.IList`1{System.Drawing.Point},System.Int32)">
            <summary>
设置LutLineInfo信息
</summary>
            <param name="bIsCurve">是否曲线</param>
            <param name="vecPoint">点集</param>
            <param name="nIndex">索引编号</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.GetLutLineInfo(System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{System.Drawing.Point}}@)">
            <summary>
 获取LutLineInfo信息
</summary>
            <param name="vecPoint">点集</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.GetLut(System.Int32)">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <returns>获取Lut</returns>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.SetLut(System.Int32,System.Byte[])">
            <summary>
设置Lut
</summary>
            <param name="nBandIndex">波段编号</param>
            <param name="pLut">Lut</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.GetMinimumMaximum(System.Double@,System.Double@,System.Int32)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.SetMinimumMaximum(System.Double,System.Double,System.Int32)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="nBandIndex">波段编号</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.GetMinimumMaximum(System.Double@,System.Double@)">
            <summary>
获取显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.Carto.IRasterStretch.SetMinimumMaximum(System.Double,System.Double)">
            <summary>
设置显示拉伸的最大最小值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="P:PIE.Carto.IRasterStretch.LinearStretchPercent">
            <summary>
获取或者设置线性拉伸百分比
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterStretch.StretchType">
            <summary>
获取或者设置栅格拉伸类型
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterStretch">
            <summary>
IRasterStretch栅格拉伸接口
</summary>
        </member>
        <member name="T:PIE.Carto.RasterStretchType">
            <summary>
RasterStretchType栅格拉伸类型
</summary>
        </member>
        <member name="F:PIE.Carto.RasterRender.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.ClearAfterRasterFilter">
            <summary>
清除后置过滤器
</summary>
            <summary>
清除后置过滤器
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.ClearPreRasterFilter">
            <summary>
清除前置过滤器
</summary>
            <summary>
清除前置过滤器
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.DeleteAfterRasterFilter(PIE.Carto.IAfterRasterFilter)">
            <summary>
删除后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
            <summary>
删除后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.DeletePreRasterFilter(PIE.Carto.IPreRasterFilter)">
            <summary>
删除前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
            <summary>
删除前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.AddAfterRasterFilter(PIE.Carto.IAfterRasterFilter)">
            <summary>
添加后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
            <summary>
添加后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.AddPreRasterFilter(PIE.Carto.IPreRasterFilter)">
            <summary>
添加前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
            <summary>
添加前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
        </member>
        <member name="P:PIE.Carto.RasterRender.AfterRasterFilterList">
            <summary>
获取后置过滤器（对显示数据起作用）
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.PreRasterFilterList">
            <summary>
获取前置过滤器（对原始数据起作用）
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.InvertBrightness">
            <summary>
获取或者设置是否亮度反转
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.NoDataColor">
            <summary>
获取或者设置NoDataColor
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.TransparencyValue">
            <summary>
获取或者设置透明度值信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.ContrastValue">
            <summary>
获取或者设置对比度值信息
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.BrightnessValue">
            <summary>
获取或者设置亮度值信息
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.GetRenderBytes(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32,PIE.SystemUI.ITrackerCancel)">
            <summary>
获得渲染后数据
</summary>
            <param name="rasterDataset">要读取的数据</param>
            <param name="envelope">读取的范围</param>
            <param name="width">目标宽度</param>
            <param name="height">目标高度</param>
            <param name="trackCancel">tracker取消</param>
            <summary>
获得渲染后数据
</summary>
            <param name="rasterDataset">要读取的数据</param>
            <param name="envelope">读取的范围</param>
            <param name="width">目标宽度</param>
            <param name="height">目标高度</param>
            <param name="trackCancel">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.RasterRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterRender.Draw(PIE.DataSource.IRasterDataset,System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="rasterDataset">已设置过查询条件的栅格数据集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
            <summary>
绘制
</summary>
            <param name="rasterDataset">已设置过查询条件的栅格数据集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="P:PIE.Carto.RasterRender.ResamplingType">
            <summary>
获取或设置栅格重采样类型
</summary>
        </member>
        <member name="P:PIE.Carto.RasterRender.DisplayResolutionFactor">
            <summary>
获取或设置分辨率因子
</summary>
        </member>
        <member name="M:PIE.Carto.RasterRender.CanRender">
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Carto.RasterRender.Description">
            <summary>
获得渲染描述信息
</summary>
            <returns>渲染描述信息</returns>
        </member>
        <member name="P:PIE.Carto.RasterRender.Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="P:PIE.Carto.RasterRender.Name">
            <summary>
获得渲染名称
</summary>
            <returns>渲染名称</returns>
        </member>
        <member name="T:PIE.Carto.RasterRender">
            <summary>
栅格渲染类
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.ClearAfterRasterFilter">
            <summary>
清除后置过滤器
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.ClearPreRasterFilter">
            <summary>
清除前置过滤器
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.DeleteAfterRasterFilter(PIE.Carto.IAfterRasterFilter)">
            <summary>
删除后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.DeletePreRasterFilter(PIE.Carto.IPreRasterFilter)">
            <summary>
删除前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.AddAfterRasterFilter(PIE.Carto.IAfterRasterFilter)">
            <summary>
添加后置过滤器
</summary>
            <param name="afterRasterFilter">后置过滤器</param>
        </member>
        <member name="M:PIE.Carto.IRasterFilterProps.AddPreRasterFilter(PIE.Carto.IPreRasterFilter)">
            <summary>
添加前置过滤器
</summary>
            <param name="preRasterFilter">前置过滤器</param>
        </member>
        <member name="P:PIE.Carto.IRasterFilterProps.AfterRasterFilterList">
            <summary>
获取后置过滤器（对显示数据起作用）
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterFilterProps.PreRasterFilterList">
            <summary>
获取前置过滤器（对原始数据起作用）
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterFilterProps">
            <summary>
IRasterFilterProps接口
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDisplayProps.InvertBrightness">
            <summary>
获取或者设置是否亮度反转
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDisplayProps.NoDataColor">
            <summary>
获取或者设置NoDataColor
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDisplayProps.TransparencyValue">
            <summary>
获取或者设置透明度值信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDisplayProps.ContrastValue">
            <summary>
获取或者设置对比度值信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterDisplayProps.BrightnessValue">
            <summary>
获取或者设置亮度值信息
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterDisplayProps">
            <summary>
IRasterDisplayProps接口
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterRGBRender.QueryBandIndices(System.Int32,System.Int32,System.Int32)">
            <summary>
查询波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
        </member>
        <member name="M:PIE.Carto.IRasterRGBRender.SetBandIndices(System.Int32,System.Int32,System.Int32)">
            <summary>
设置波段组合
</summary>
            <param name="redIndex">红波段索引编号</param>
            <param name="greenIndex">绿波段索引编号</param>
            <param name="blueIndex">蓝波段索引编号</param>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.AlphaBandIndex">
            <summary>
获取或者设置透明波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.BlueBandIndex">
            <summary>
获取或者设置蓝波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.GreenBandIndex">
            <summary>
获取或者设置绿波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.RedBandIndex">
            <summary>
获取或者设置红波段索引编号
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.UseAlphaBand">
            <summary>
获取或者设置AlphaBand波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.UseBlueBand">
            <summary>
获取或者设置蓝波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.UseGreenBand">
            <summary>
获取或者设置绿波段信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRGBRender.UseRedBand">
            <summary>
获取或者设置红波段信息
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterRGBRender">
            <summary>
IRasterRGBRender接口
</summary>
        </member>
        <member name="D:SysCarto.RasterRGBRenderPtr">
@brief  栅格RGB渲染器   智能指针

</member>
        <member name="F:SysCarto.RasterRGBRender.m_strBlueLabel">
@brief 蓝波段标签

</member>
        <member name="F:SysCarto.RasterRGBRender.m_strGreenLabel">
@brief 绿波段标签

</member>
        <member name="F:SysCarto.RasterRGBRender.m_strRedLabel">
@brief 红波段标签

</member>
        <member name="F:SysCarto.RasterRGBRender.m_alphaIndex">
@brief 透明波段索引

</member>
        <member name="F:SysCarto.RasterRGBRender.m_blueIndex">
@brief 蓝波段索引

</member>
        <member name="F:SysCarto.RasterRGBRender.m_greenIndex">
@brief 绿波段索引

</member>
        <member name="F:SysCarto.RasterRGBRender.m_redIndex">
@brief 红波段索引

</member>
        <member name="F:SysCarto.RasterRGBRender.UseAlphaBand">
@brief 是否使用透明波段

</member>
        <member name="F:SysCarto.RasterRGBRender.UseBlueBand">
@brief 是否使用蓝色波段

</member>
        <member name="F:SysCarto.RasterRGBRender.UseGreenBand">
@brief 是否使用绿色波段

</member>
        <member name="F:SysCarto.RasterRGBRender.UseRedBand">
@brief 是否使用红色波段

</member>
        <member name="M:SysCarto.RasterRGBRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in] ptrDataset 栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterRGBRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.SetBlueBandLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置蓝色波段标签
@param [in] strLabel    波段标签
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.SetGreenBandLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置绿色波段标签
@param [in] strLabel    波段标签
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.SetRedBandLabel(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置红色波段标签
@param [in] strLabel    波段标签
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.QueryBandIndices(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询波段组合 
@param [in] redIndex    红波段索引编号
@param [in] greenIndex  绿波段索引编号
@param [in] blueIndex   蓝波段索引编号
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.SetBandIndices(System.Int32,System.Int32,System.Int32)">
@brief 设置波段组合
@param [in] redIndex    红波段索引编号
@param [in] greenIndex  绿波段索引编号
@param [in] blueIndex   蓝波段索引编号
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.SetAlphaBandIndex(System.Int32)">
@brief 设置透明波段索引编号
@param [in] index 透明波段索引编号
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.GetAlphaBandIndex">
@brief  获取透明波段索引编号 
@return  int  透明波段索引编号 

</member>
        <member name="M:SysCarto.RasterRGBRender.SetBlueBandIndex(System.Int32)">
@brief 设置蓝色波段索引
@param [in] index 蓝色波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.GetBlueBandIndex">
@brief 获取蓝色波段索引
@return  int 蓝色波段索引

</member>
        <member name="M:SysCarto.RasterRGBRender.SetGreenBandIndex(System.Int32)">
@brief 设置绿色波段索引
@param [in] index 绿色波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.GetGreenBandIndex">
@brief 获取绿色波段索引
@return  int 绿色波段索引

</member>
        <member name="M:SysCarto.RasterRGBRender.SetRedBandIndex(System.Int32)">
@brief 设置红色波段索引
@param [in] index 红色波段索引
@return  void

</member>
        <member name="M:SysCarto.RasterRGBRender.GetRedBandIndex">
@brief 获取红色波段索引
@return  int 红色波段索引

</member>
        <member name="M:SysCarto.RasterRGBRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterRGBRender.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterRGBRender">
@class RasterRGBRender
@brief  栅格RGB渲染器

</member>
        <member name="M:SysCarto.IRasterStretch.CopyTo(SysCarto.IRasterStretch*)">
@brief 拷贝
@param [in] pStretch 被拷贝对象
@return    void

</member>
        <member name="M:SysCarto.IRasterStretch.GetStretchData(SysDataSource.PixelDataType,System.Void*,System.Int32,System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取拉伸数据
@param [in] ePixelType 像素数据类型
@param [in] pSrcData   源数据
@param [in] nIndex     索引
@param [in] nBandIndex 波段索引
@param [in] dOriginValue   起源值
@return    uchar  拉伸数据

</member>
        <member name="M:SysCarto.IRasterStretch.CaliStretchLinearMinMax(System.Int32,SysDataSource.PixelDataType,System.Double**,System.Double,System.Double)">
@brief 计算拉伸线最小最大值
@param [in] nIndex   索引
@param [in] dt     像素数据类型
@param [in] ppdHistogram    直方图信息
@param [in] dParam   参数
@param [in] dStep    步骤
@return    void

</member>
        <member name="M:SysCarto.IRasterStretch.HistogramEqualize(System.Double**,System.Int32)">
@brief 相等直方统计图
@param [in] ppdHistogram   直方统计图指针
@param [in] nBandIndex     波段索引
@return    void

</member>
        <member name="M:SysCarto.IRasterStretch.Brightness_Contrast(System.Byte*,System.Int16,System.Int32!System.Runtime.CompilerServices.IsLong)">
@brief 亮度对比度
@param [in] pszHMap    栅格拉伸集合
@param [in] sbright    亮度
@param [in] sContrast  对比度
@return    void

</member>
        <member name="M:SysCarto.IRasterStretch.UpdateStretchInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新拉伸信息
@param [in] ptrDataset  栅格数据集
@param [in] bandMap  波段集合
@return    void

</member>
        <member name="F:SysCarto.IRasterStretch.m_dLinearMax">
@brief 最大线性

</member>
        <member name="F:SysCarto.IRasterStretch.m_dLinearMin">
@brief 最小线性

</member>
        <member name="F:SysCarto.IRasterStretch.m_bNeedUpdataStretchInfo">
@brief 是否更新拉伸信息变量

</member>
        <member name="F:SysCarto.IRasterStretch.m_ppLut">
@brief lut数组

</member>
        <member name="F:SysCarto.IRasterStretch.m_dLinearStretchPercent">
@brief 线拉伸类型

</member>
        <member name="F:SysCarto.IRasterStretch.m_eStretchType">
@brief 栅格拉伸类型

</member>
        <member name="F:SysCarto.IRasterStretch.m_pdMaxStretch">
@brief 最大拉伸值数组

</member>
        <member name="F:SysCarto.IRasterStretch.m_pdMinStretch">
@brief 最小拉伸值数组

</member>
        <member name="F:SysCarto.IRasterStretch.m_pdMax">
@brief 最大百分比值数组

</member>
        <member name="F:SysCarto.IRasterStretch.m_pdMin">
@brief 最小百分比值数组

</member>
        <member name="F:SysCarto.IRasterStretch.m_vecvecLutLine">
@brief 点集合

</member>
        <member name="F:SysCarto.IRasterStretch.m_bIsCurveLut">
@brief 曲线Lut变量

</member>
        <member name="M:SysCarto.IRasterStretch.GetRenderMinMax(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取渲染的最大最小值
@param [in] nBandIndex  波段索引
@param [in out] dMin  最小值
@param [in out] dMax  最大值
@param [in out] dStep 梯度
@return    void

</member>
        <member name="M:SysCarto.IRasterStretch.SetLutLineInfo(System.Boolean,QVector&lt;QPoint&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 设置LutLine信息
@param [in] bIsCurve  是否为曲线
@param [in] vecPoint  点集合
@param [in] nIndex    索引
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.GetLutLineInfo(QVector&lt;QVector&lt;QPoint&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取LutLine信息
@param [in] vecPoint  点集合
@return  bool 是否成功

</member>
        <member name="M:SysCarto.IRasterStretch.GetLinearStretchPencent">
@brief 获取线性拉伸百分比 
@return  double 线性拉伸百分比 

</member>
        <member name="M:SysCarto.IRasterStretch.SetLinearStretchPercent(System.Double)">
@brief 设置线性拉伸百分比 
@param [in] dValue  线性拉伸百分比值
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.GetMinimumMaximum(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 获取最小值最大值
@param [in out] dMin  最小值
@param [in out] dMax  最大值
@param [in] nBandIndex  第一个是0，小于0默认获取第0个
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.SetMinimumMaximum(System.Double,System.Double,System.Int32)">
@brief 设置最小值最大值
@param [in] dMin  最小值
@param [in] dMax  最大值
@param [in] nBandIndex  第一个是0，小于0表示所有波段设置相同的最大最小拉伸
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.GetStretchType">
@brief 获取栅格拉伸类型 
@return  RasterStretchType  栅格拉伸类型  

</member>
        <member name="M:SysCarto.IRasterStretch.SetStretchType(SysCarto.RasterStretchType)">
@brief 设置栅格拉伸类型 
@param [in] eType  栅格拉伸类型
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.GetLut(System.Int32)">
@brief 获取Lut
@param [in] nBandIndex  波段索引
@return  uchar*  pLut指针

</member>
        <member name="M:SysCarto.IRasterStretch.SetLut(System.Int32,System.Byte*)">
@brief 设置Lut
@param [in] nBandIndex  波段索引
@param [in] pLut  pLut指针
@return  void

</member>
        <member name="M:SysCarto.IRasterStretch.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IRasterStretch.#ctor">
@brief 析构函数

</member>
        <member name="T:SysCarto.IRasterStretch">
@class IRasterStretch
@brief  栅格拉伸类

</member>
        <member name="F:PIE.Carto.SymbolBorder.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.#ctor(SysUtility._ptr_t&lt;SysCarto.SymbolBorder&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.Clone">
            <summary>
克隆背景对象
</summary>
            <returns>IBackground对象</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制边界
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrGeo">Geometry对象</param>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取边界的外接矩形
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrQueryGeo">IGeometry对象</param>
            <returns>返回外边界</returns>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取用于绘制边界的Geometry
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrShape">IGeometry</param>
            <returns>返回Geometry</returns>
        </member>
        <member name="P:PIE.Carto.SymbolBorder.YGap">
            <summary>
获取或设置边界与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBorder.XGap">
            <summary>
获取或设置边界与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBorder.Name">
            <summary>
获取边界对象名称
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBorder.LineSymbol">
            <summary>
获取或设置线样式
</summary>
        </member>
        <member name="P:PIE.Carto.SymbolBorder.CornerRounding">
            <summary>
获取或设置拐角弧度
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.SymbolBorder.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.SymbolBorder">
            <summary>
符号边框类
</summary>
        </member>
        <member name="M:PIE.Carto.IBorder.Clone">
            <summary>
克隆边界
</summary>
            <returns>返回边界</returns>
        </member>
        <member name="M:PIE.Carto.IBorder.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制边界
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrGeo">要绘制的图形</param>
        </member>
        <member name="M:PIE.Carto.IBorder.QueryBounds(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取边界的外接矩形
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrQueryGeo">要查询的Geometry</param>
            <returns>返回外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.IBorder.GetGeometry(PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
获取用于绘制边界的Geometry
</summary>
            <param name="ptrTransform">转换对象</param>
            <param name="ptrShape">输入Geometry</param>
            <returns>返回Geometry</returns>
        </member>
        <member name="P:PIE.Carto.IBorder.YGap">
            <summary>
获取或设置边界与主题的Y距离
</summary>
        </member>
        <member name="P:PIE.Carto.IBorder.XGap">
            <summary>
获取或设置边界与主题的X距离
</summary>
        </member>
        <member name="P:PIE.Carto.IBorder.Name">
            <summary>
获取或设置边界名称
</summary>
        </member>
        <member name="T:PIE.Carto.IBorder">
            <summary>
边界接口
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolBorder.LineSymbol">
            <summary>
获取或设置线样式
</summary>
        </member>
        <member name="P:PIE.Carto.ISymbolBorder.CornerRounding">
            <summary>
获取或设置拐角弧度
</summary>
        </member>
        <member name="T:PIE.Carto.ISymbolBorder">
            <summary>
ISymbolBorder符号边界接口
</summary>
        </member>
        <member name="D:SysCarto.SymbolBorderPtr">
@brief  符号边框类   智能指针

</member>
        <member name="F:SysCarto.SymbolBorder.m_ptrSymbol">
@brief 线符号

</member>
        <member name="F:SysCarto.SymbolBorder.m_dCornerRounding">
@brief 线拐角弧度

</member>
        <member name="M:SysCarto.SymbolBorder.Clone">
@brief 克隆
@return  IBorderPtr  边框类 对象

</member>
        <member name="M:SysCarto.SymbolBorder.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrTransform 显示转换对象
@param [in] ptrQueryGeo      查询几何
@return  SysGeometry::EnvelopePtr  包络线范围

</member>
        <member name="M:SysCarto.SymbolBorder.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取Geometry几何
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何形状
@return  SysGeometry::GeometryPtr  几何形状

</member>
        <member name="M:SysCarto.SymbolBorder.SetLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置线符号
@param [in] ptrSymbol 线符号
@return  void

</member>
        <member name="M:SysCarto.SymbolBorder.GetLineSymbol">
@brief 获取线符号
@return  SysDisplay::LineSymbolPtr 线符号

</member>
        <member name="M:SysCarto.SymbolBorder.SetCornerRounding(System.Double)">
@brief 设置线拐角弧度
@param [in] rouding 线拐角弧度
@return  void

</member>
        <member name="M:SysCarto.SymbolBorder.GetCornerRounding">
@brief 获取线拐角弧度 
@return  double  线拐角弧度

</member>
        <member name="M:SysCarto.SymbolBorder.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.SymbolBorder.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.SymbolBorder">
@class SymbolBorder
@brief 符号边框类

</member>
        <member name="F:SysCarto.IBorder.m_dGapY">
@brief Y轴的间距

</member>
        <member name="F:SysCarto.IBorder.m_dGapX">
@brief X轴的间距

</member>
        <member name="F:SysCarto.IBorder.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.IBorder.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IBorder.Clone">
@brief 克隆
@return IBorderPtr 克隆边界类对象

</member>
        <member name="M:SysCarto.IBorder.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] ptrGeo    几何对象
@return void

</member>
        <member name="M:SysCarto.IBorder.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   获取主题边界范围
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何对象
@return  SysGeometry::EnvelopePtr   边界范围

</member>
        <member name="M:SysCarto.IBorder.GetGeometry(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   获取用于绘制边界的Geometry
@param [in] ptrTransform 显示转换对象
@param [in] ptrShape     几何对象
@return  SysGeometry::GeometryPtr    用于绘制边界的Geometry

</member>
        <member name="M:SysCarto.IBorder.SetYGap(System.Double)">
@brief  设置Y轴的间距
@param [in] gap  Y轴的间距
@return void

</member>
        <member name="M:SysCarto.IBorder.GetYGap">
@brief   获取Y轴的间距
@return  double  X轴的间距

</member>
        <member name="M:SysCarto.IBorder.SetXGap(System.Double)">
@brief  设置X轴的间距
@param [in] gap  X轴的间距
@return void

</member>
        <member name="M:SysCarto.IBorder.GetXGap">
@brief   获取X轴的间距
@return  double  X轴的间距

</member>
        <member name="M:SysCarto.IBorder.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in] strName 名字
@return void

</member>
        <member name="M:SysCarto.IBorder.GetName">
@brief  获取名字
@return QString 名字

</member>
        <member name="M:SysCarto.IBorder.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IBorder">
@brief 类的前置声明和智能指针定义


@class IBorder
@brief 边界类

</member>
        <member name="M:PIE.Carto.ArrowElement.set_Width(System.Double)">
            <summary>
设置箭头宽度
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.get_Width">
            <summary>
获取箭头宽度
</summary>
        </member>
        <member name="F:PIE.Carto.ArrowElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.#ctor(SysUtility._ptr_t&lt;SysCarto.ArrowElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.Clone">
            <summary>
克隆对象
</summary>
            <returns>返回Element对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ArrowElement.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="trasform">转换对象</param>
            <param name="tracker">TrackerCancel对象</param>
        </member>
        <member name="P:PIE.Carto.ArrowElement.Width">
            <summary>
获取或设置箭头宽度
</summary>
        </member>
        <member name="P:PIE.Carto.ArrowElement.Symbol">
            <summary>
获取或设置面符号IFillSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ArrowElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ArrowElement">
            <summary>
箭头元素对象
</summary>
        </member>
        <member name="P:PIE.Carto.IArrowElement.Width">
            <summary>
获取或设置箭头宽度
</summary>
        </member>
        <member name="P:PIE.Carto.IArrowElement.Symbol">
            <summary>
获取或设置面符号IFillSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.IArrowElement">
            <summary>
IArrowElement箭头元素接口
</summary>
        </member>
        <member name="P:PIE.Carto.IPolygonElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.IPolygonElement">
            <summary>
IPolygonElement面元素接口
</summary>
        </member>
        <member name="D:SysCarto.ArrowElementPtr">
@brief   箭头元素 智能指针对象

</member>
        <member name="F:SysCarto.ArrowElement.m_dMapWidth">
@brief  地图宽度

</member>
        <member name="F:SysCarto.ArrowElement.m_dWidth">
@brief  宽度

</member>
        <member name="M:SysCarto.ArrowElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.ArrowElement.m_ptrSymbol">
@brief  填充符号

</member>
        <member name="M:SysCarto.ArrowElement.GetWidth">
@brief  获取宽度
@return  double 宽度

</member>
        <member name="M:SysCarto.ArrowElement.SetWidth(System.Double)">
@brief  设置宽度
@param [in] dWidth  宽度
@return  void

</member>
        <member name="M:SysCarto.ArrowElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.ArrowElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.ArrowElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置填充符号
@param [in] ptrSymbol  填充符号
@return  void

</member>
        <member name="M:SysCarto.ArrowElement.GetSymbol">
@brief  获取填充符号
@return  填充符号

</member>
        <member name="M:SysCarto.ArrowElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ArrowElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.ArrowElement">
@class ArrowElement
@brief  箭头元素

</member>
        <member name="D:SysCarto.PolygonElementPtr">
@brief 面元素类  智能指针

</member>
        <member name="M:SysCarto.PolygonElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param[in] Element* ptrElement Element对象

</member>
        <member name="F:SysCarto.PolygonElement.m_ptrSymbol">
@brief 面符号样式

</member>
        <member name="M:SysCarto.PolygonElement.Clone">
@brief 克隆
@return ElementPtr 克隆元素对象

</member>
        <member name="M:SysCarto.PolygonElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.PolygonElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol 面符号样式
@return void

</member>
        <member name="M:SysCarto.PolygonElement.GetSymbol">
@brief  获取符号
@return  SysDisplay::FillSymbolPtr  面符号样式

</member>
        <member name="M:SysCarto.PolygonElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.PolygonElement.#ctor">
@brief  构造函数

</member>
        <member name="T:SysCarto.PolygonElement">
@class PolygonElement
@brief  面元素类 

</member>
        <member name="F:PIE.Carto.ExtentStack.m_pCInstance">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.#ctor(SysUtility._ptr_t&lt;SysCarto.ExtentStack&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Reset">
            <summary>
重新设置
</summary>
            <summary>
重新设置
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Undo">
            <summary>
撤销重做
</summary>
            <summary>
撤销重做
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Redo">
            <summary>
重做
</summary>
            <summary>
重做
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.GetItem(System.Int32)">
            <summary>
得到范围
</summary>
            <param name="index">索引值</param>
            <returns>范围</returns>
            <summary>
得到范围
</summary>
            <param name="index">索引值</param>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Do(PIE.Geometry.IEnvelope)">
            <summary>
do
</summary>
            <summary>
do
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Count">
            <summary>
计数
</summary>
            <returns>数量</returns>
            <summary>
计数
</summary>
            <returns>数量</returns>
        </member>
        <member name="M:PIE.Carto.ExtentStack.CanUndo">
            <summary>
是否撤销
</summary>
            <returns>是否撤销</returns>
            <summary>
是否撤销
</summary>
            <returns>是否撤销</returns>
        </member>
        <member name="M:PIE.Carto.ExtentStack.CanRedo">
            <summary>
是否重做
</summary>
            <returns>是否重做</returns>
            <summary>
是否重做
</summary>
            <returns>是否重做</returns>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.ExtentStack.#ctor(PIE.Carto.IActiveView)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.ExtentStack">
            <summary>
范围栈
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.Output(PIE.Carto.IExport,System.Int32,System.Drawing.RectangleF,PIE.Geometry.IEnvelope,PIE.SystemUI.ITrackerCancel)">
            <summary>
导出地图
</summary>
            <param name="IExport">IExport对象</param>
            <param name="RectangleF">导出设备范围</param>
            <param name="IEnvelope">导出地图范围</param>
            <param name="ITrackerCancel">ITrackerCancel对象</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.PanTo(PIE.Geometry.IPoint!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图平移到以几何对象中心为中心
</summary>
            <param name="point">几何对象</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.ZoomTo(PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
视图缩放到几何对象
</summary>
            <param name="geometry">几何对象</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.StopRender">
            <summary>
停止渲染
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.DrawElement(PIE.Carto.IElement)">
            <summary>
绘制Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.DrawGeometry(PIE.Display.ISymbol!System.Runtime.CompilerServices.IsConst,PIE.Geometry.IGeometry!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制Geometry
</summary>
            <param name="symbol">符号样式</param>
            <param name="geometry">Geometry</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.ZoomAction(System.Drawing.Point,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="centerPos">中心点-屏幕点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.PanAction(System.Double,System.Double)">
            <summary>
平移
</summary>
            <param name="deltaX">X方向的距离</param>
            <param name="deltaY">Y方向的距离</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.FinishDrawing">
            <summary>
结束绘制
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.StartDrawing">
            <summary>
开始绘制
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.ZoomByFactor(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
以某点为中心缩放
</summary>
            <param name="ptrCenter">中心点</param>
            <param name="scaleX">X方向缩放倍数</param>
            <param name="scaleY">Y方向缩放倍数</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.Refresh">
            <summary>
地图刷新
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.PartialRefresh(&lt;unknown type&gt;,System.Boolean)">
            <summary>
地图刷新(是否清除缓存）
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.PartialRefresh(&lt;unknown type&gt;)">
            <summary>
地图刷新
</summary>
            <param name="dpType">刷新方式</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.HitTestMap(PIE.Geometry.IPoint)">
            <summary>
HitTestMap
</summary>
            <param name="point">点</param>
            <returns>地图对象</returns>
        </member>
        <member name="M:PIE.Carto.IActiveView.Draw(System.Drawing.Graphics,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="graphics">graphics对象</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.IActiveView.SetContentImage(System.Drawing.Image)">
            <summary>
设置显示Image
</summary>
            <param name="img">Image</param>
        </member>
        <member name="P:PIE.Carto.IActiveView.TrackerCancel">
            <summary>
获得TrackerCancel对象
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.IsShowSelection">
            <summary>
是否显示选择
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.ExportFrame">
            <summary>
获取输出图框
</summary>
            <returns>输出图框</returns>
        </member>
        <member name="P:PIE.Carto.IActiveView.ExtentStack">
            <summary>
获得范围栈
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.FullExtent">
            <summary>
地图全图范围
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.Extent">
            <summary>
地图视图范围
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.IsActived">
            <summary>
是否激活状态
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.FocusMap">
            <summary>
地图对象
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.DisplayTransformation">
            <summary>
DisplayTransformation显示变换
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.GraphicsContainer">
            <summary>
标绘图层-默认
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.DefaultTempLayer">
            <summary>
临时图层
</summary>
        </member>
        <member name="P:PIE.Carto.IActiveView.CurrentLayer">
            <summary>
当前地图对象
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.DeActivate">
            <summary>
反激活
</summary>
        </member>
        <member name="M:PIE.Carto.IActiveView.Activate(System.Int32)">
            <summary>
激活
</summary>
            <param name="handle">显示窗体句柄</param>
        </member>
        <member name="T:PIE.Carto.IActiveView">
            <summary>
IActiveView接口
</summary>
        </member>
        <member name="P:PIE.Carto.IExport.TrackerCancel">
            <summary>
获取或设置ITrackerCancel
</summary>
        </member>
        <member name="P:PIE.Carto.IExport.BackgroundColor">
            <summary>
获取或设置导出背景色
</summary>
        </member>
        <member name="P:PIE.Carto.IExport.Height">
            <summary>
获取或设置导出高度
</summary>
        </member>
        <member name="P:PIE.Carto.IExport.Width">
            <summary>
获取或设置导出宽度
</summary>
        </member>
        <member name="P:PIE.Carto.IExport.DPI">
            <summary>
获取或设置导出DPI
</summary>
        </member>
        <member name="T:PIE.Carto.IExport">
            <summary>
IExport接口
</summary>
        </member>
        <member name="T:PIE.Carto.IGraphicsLayer">
            <summary>
制图图层接口
</summary>
        </member>
        <member name="T:PIE.Carto.ViewDrawPhaseType">
            <summary>
ViewDrawPhaseType类型
</summary>
        </member>
        <member name="M:PIE.Carto.IExtentStack.Reset">
            <summary>
重新设置
</summary>
        </member>
        <member name="M:PIE.Carto.IExtentStack.Undo">
            <summary>
撤销重做
</summary>
        </member>
        <member name="M:PIE.Carto.IExtentStack.Redo">
            <summary>
重做
</summary>
        </member>
        <member name="M:PIE.Carto.IExtentStack.GetItem(System.Int32)">
            <summary>
得到范围
</summary>
            <param name="index">索引值</param>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.IExtentStack.Do(PIE.Geometry.IEnvelope)">
            <summary>
do
</summary>
        </member>
        <member name="M:PIE.Carto.IExtentStack.Count">
            <summary>
计数
</summary>
            <returns>数量</returns>
        </member>
        <member name="M:PIE.Carto.IExtentStack.CanUndo">
            <summary>
是否撤销
</summary>
            <returns>是否撤销</returns>
        </member>
        <member name="M:PIE.Carto.IExtentStack.CanRedo">
            <summary>
是否重做
</summary>
            <returns>是否重做</returns>
        </member>
        <member name="T:PIE.Carto.IExtentStack">
            <summary>
IExtentStack接口
</summary>
        </member>
        <member name="M:PIE.Carto.LayerFactory.CreateDefaultLayers(System.Collections.Generic.IList`1{System.String})">
            <summary>
创建默认多图层
</summary>
            <param name="strFile">路径集合</param>
            <returns>多图层对象</returns>
        </member>
        <member name="M:PIE.Carto.LayerFactory.CreateDefaultLayer(System.String)">
            <summary>
创建默认图层
</summary>
            <param name="strFile">路径</param>
            <returns>图层对象</returns>
        </member>
        <member name="M:PIE.Carto.LayerFactory.CreateDefaultMultiLayer(PIE.DataSource.IMultiDataset)">
            <summary>
创建默认多图层
</summary>
            <param name="ptrDataset">多数据集</param>
            <returns>多图层对象</returns>
        </member>
        <member name="M:PIE.Carto.LayerFactory.CreateDefaultFeatureLayer(PIE.DataSource.IFeatureDataset)">
            <summary>
创建默认矢量图层
</summary>
            <param name="ptrDataset">矢量数据集</param>
            <returns>矢量图层对象</returns>
        </member>
        <member name="M:PIE.Carto.LayerFactory.CreateDefaultRasterLayer(PIE.DataSource.IRasterDataset)">
            <summary>
创建默认栅格图层
</summary>
            <param name="ptrDataset">栅格数据集</param>
            <returns>栅格图层对象</returns>
        </member>
        <member name="T:PIE.Carto.LayerFactory">
            <summary>
LayerFactory图层工厂类
</summary>
        </member>
        <member name="M:SysCarto.LayerFactory.op_Assign(SysCarto.LayerFactory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数 重载等号"="操作符

</member>
        <member name="M:SysCarto.LayerFactory.#ctor(SysCarto.LayerFactory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数 拷贝构造函数

</member>
        <member name="M:SysCarto.LayerFactory.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.LayerFactory.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.LayerFactory.m_listManager">
@brief  list插件集合

</member>
        <member name="F:SysCarto.LayerFactory.m_mapSourceTypeDllName">
@brief  数据类型动态库名称 （要求dll名字 与 pluginname 一致）

</member>
        <member name="F:SysCarto.LayerFactory.m_mutex">
@brief  互斥锁变量

</member>
        <member name="M:SysCarto.LayerFactory.LoadDataProviderConfig">
@brief  加载数据插件管理配置
@return void

</member>
        <member name="M:SysCarto.LayerFactory.CreateDefaultLayer(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  创建默认图层
@param  [in] strFile  文件路径
@return LayerPtr    创建的图层

</member>
        <member name="M:SysCarto.LayerFactory.CreateDefaultMultiLayer(SysUtility._ptr_t&lt;SysDataSource.MultiDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  创建默认的多图层
@param  [in] ptrDataset  多图层数据集
@return MultiLayerPtr    多图层数据集

</member>
        <member name="M:SysCarto.LayerFactory.CreateDefaultFeatureLayer(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  创建默认的矢量图层
@param  [in] ptrDataset  矢量数据集
@return FeatureLayerPtr  适量图层数据集

</member>
        <member name="M:SysCarto.LayerFactory.CreateDefaultRasterLayer(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  创建默认的栅格图层
@param  [in] ptrDataset  栅格数据集
@return RasterLayerPtr  栅格图层数据集

</member>
        <member name="M:SysCarto.LayerFactory.Instance">
@brief 获取单件实例
@return  图层工厂对象实例

</member>
        <member name="M:SysCarto.LayerFactory.AddManager(SysUtility._ptr_t&lt;SysCarto.IDataProviderManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加插件管理器
@param [in] ptrManager  数据插件管理对象
@return void

</member>
        <member name="M:SysCarto.LayerFactory.GetManagerByDataSourceType(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过数据源类型得到Manager
@param [in] sDataSourceType 数据源类型 
@return  IDataProviderManagerPtr  数据插件管理对象

</member>
        <member name="T:SysCarto.LayerFactory">
@class  LayerFactory
@brief  图层工厂

</member>
        <member name="D:SysCarto.IDataProviderManagerPtr">
@brief   数据提供插件管理器基类    智能指针对象

</member>
        <member name="M:SysCarto.IDataProviderManager.GetPluginName">
@brief 获取插件名
@return QString 插件名

</member>
        <member name="M:SysCarto.IDataProviderManager.CreateRasterLayer(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建栅格图层
@param [in] pDs 栅格数据集
@return RasterLayerPt 栅格数据集

</member>
        <member name="M:SysCarto.IDataProviderManager.CreateFeatureLayer(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建矢量图层
@param [in] pDs 矢量数据集
@return  FeatureLayerPtr 矢量要素数据集

</member>
        <member name="M:SysCarto.IDataProviderManager.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IDataProviderManager.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.IDataProviderManager">
@class IDataProviderManager
@brief 数据提供插件管理器基类

</member>
        <member name="F:PIE.Carto.MultiLayer.m_Layers">
            <summary>
图层集合
</summary>
        </member>
        <member name="F:PIE.Carto.MultiLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.MultiLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.Clear">
            <summary>
清除图层
</summary>
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.MultiLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.MultiLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.MultiLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.MultiLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.MultiLayer.Layers">
            <summary>
获取图层
</summary>
        </member>
        <member name="P:PIE.Carto.MultiLayer.Dataset">
            <summary>
获取或者设置数据集
</summary>
        </member>
        <member name="P:PIE.Carto.MultiLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.MultiLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.MultiLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MultiLayer.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MultiLayer">
            <summary>
多图层类
</summary>
        </member>
        <member name="F:PIE.Carto.RasterLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.RasterLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.Carto.RasterLayer.m_RasterDataset">
            <summary>
数据集
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.IsValid">
            <summary>
是否是有效图层
</summary>
            <returns>是否是有效图层</returns>
            <summary>
是否是有效图层
</summary>
            <returns>是否是有效图层</returns>
        </member>
        <member name="M:PIE.Carto.RasterLayer.RaiseRenderChanged">
            <summary>
触发渲染变化事件
</summary>
            <summary>
触发渲染变化事件
</summary>
        </member>
        <member name="P:PIE.Carto.RasterLayer.Render">
            <summary>
获取或者设置栅格渲染
</summary>
        </member>
        <member name="P:PIE.Carto.RasterLayer.Dataset">
            <summary>
获取或者设置数据集
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.RasterLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数(GC)
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数(Dispose)
</summary>
        </member>
        <member name="M:PIE.Carto.RasterLayer.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RasterLayer">
            <summary>
栅格图层类
</summary>
        </member>
        <member name="F:PIE.Carto.GroupElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.#ctor(SysUtility._ptr_t&lt;SysCarto.GroupElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.Refresh">
            <summary>
刷新
</summary>
            <summary>
刷新
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.ReplaceElement(PIE.Carto.IElement,PIE.Carto.IElement)">
            <summary>
替换元素
</summary>
            <param name="exsitElem">已存在元素</param>
            <param name="newElem">新元素</param>
            <summary>
替换元素
</summary>
            <param name="exsitElem">已存在元素</param>
            <param name="newElem">新元素</param>
        </member>
        <member name="M:PIE.Carto.GroupElement.GetElements">
            <summary>
获取元素集合
</summary>
            <returns>元素集合</returns>
            <summary>
获取元素集合
</summary>
            <returns>元素集合</returns>
        </member>
        <member name="M:PIE.Carto.GroupElement.ClearElements">
            <summary>
清空元素
</summary>
            <summary>
清空元素
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.GetElementCount">
            <summary>
获取元素个数
</summary>
            <returns>元素个数</returns>
            <summary>
获取元素个数
</summary>
            <returns>元素个数</returns>
        </member>
        <member name="M:PIE.Carto.GroupElement.GetElement(System.Int32)">
            <summary>
获取元素
</summary>
            <param name="index">索引值</param>
            <returns>元素</returns>
            <summary>
获取元素
</summary>
            <param name="index">索引值</param>
            <returns>元素</returns>
        </member>
        <member name="M:PIE.Carto.GroupElement.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除元素
</summary>
            <param name="element">元素</param>
            <summary>
删除元素
</summary>
            <param name="element">元素</param>
        </member>
        <member name="M:PIE.Carto.GroupElement.AddElement(PIE.Carto.IElement)">
            <summary>
添加元素
</summary>
            <param name="element">元素</param>
            <summary>
添加元素
</summary>
            <param name="element">元素</param>
        </member>
        <member name="M:PIE.Carto.GroupElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.GroupElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.GroupElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.GroupElement">
            <summary>
GroupElement线元素类
</summary>
        </member>
        <member name="M:PIE.Carto.IGroupElement.Refresh">
            <summary>
刷新
</summary>
        </member>
        <member name="M:PIE.Carto.IGroupElement.ReplaceElement(PIE.Carto.IElement,PIE.Carto.IElement)">
            <summary>
替换元素
</summary>
            <param name="exsitElem">已存在元素</param>
            <param name="newElem">新元素</param>
        </member>
        <member name="M:PIE.Carto.IGroupElement.GetElements">
            <summary>
获取元素集合
</summary>
            <returns>元素集合</returns>
        </member>
        <member name="M:PIE.Carto.IGroupElement.ClearElements">
            <summary>
清空元素
</summary>
        </member>
        <member name="M:PIE.Carto.IGroupElement.GetElementCount">
            <summary>
获取元素个数
</summary>
            <returns>元素个数</returns>
        </member>
        <member name="M:PIE.Carto.IGroupElement.GetElement(System.Int32)">
            <summary>
获取元素
</summary>
            <param name="index">索引值</param>
            <returns>元素</returns>
        </member>
        <member name="M:PIE.Carto.IGroupElement.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除元素
</summary>
            <param name="element">元素</param>
        </member>
        <member name="M:PIE.Carto.IGroupElement.AddElement(PIE.Carto.IElement)">
            <summary>
添加元素
</summary>
            <param name="element">元素</param>
        </member>
        <member name="T:PIE.Carto.IGroupElement">
            <summary>
IGroupElement元素组接口
</summary>
        </member>
        <member name="D:SysCarto.GroupElementPtr">
@brief   组元素  智能指针对象

</member>
        <member name="M:SysCarto.GroupElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象
@return 

</member>
        <member name="F:SysCarto.GroupElement.m_listElems">
@brief  元素列表

</member>
        <member name="M:SysCarto.GroupElement.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.GroupElement.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.GroupElement.GetGeometry">
@brief 获取几何对象
@return SysGeometry::GeometryPtr 几何对象

</member>
        <member name="M:SysCarto.GroupElement.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放 
@param [in] originPoint    参照点
@param [in] sx x方向缩放    
@param [in] sy y方向缩放 
@return bool 是否成功

</member>
        <member name="M:SysCarto.GroupElement.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] originPoint    参照点
@param [in] rotationAngle  旋转角度 
@return bool 是否成功

</member>
        <member name="M:SysCarto.GroupElement.Move(System.Double,System.Double)">
@brief 移动 
@param [in] dx   x方向的偏移
@param [in] dy   y方向的偏移 
@return void

</member>
        <member name="M:SysCarto.GroupElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.GroupElement.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询外接多边形 
@param [in] ptrTrasform  显示转换
@return  SysGeometry::EnvelopePtr  包络范围

</member>
        <member name="M:SysCarto.GroupElement.Refresh">
@brief 刷新

</member>
        <member name="M:SysCarto.GroupElement.ReplaceElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  替换元素
@param [in] ptrExsitElem  存在的元素
@param [in] ptrNewElem    新的元素
@return 元素集合

</member>
        <member name="M:SysCarto.GroupElement.GetElements">
@brief 获取元素集
@return 元素集合

</member>
        <member name="M:SysCarto.GroupElement.ClearElements">
@brief 清空元素
@return void

</member>
        <member name="M:SysCarto.GroupElement.GetElementCount">
@brief 获取元素数量
@return int  元素数量

</member>
        <member name="M:SysCarto.GroupElement.GetElement(System.Int32)">
@brief 获取元素
@param [in] index 索引
@return ElementPtr  元素对象

</member>
        <member name="M:SysCarto.GroupElement.DeleteElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] ptrElem 元素
@return void

</member>
        <member name="M:SysCarto.GroupElement.AddElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素
@param [in] ptrElem 元素
@return void

</member>
        <member name="M:SysCarto.GroupElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.GroupElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.GroupElement">
@class GroupElement
@brief  组元素

</member>
        <member name="F:PIE.Carto.RectangleElement.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.RectangleElement.#ctor(SysUtility._ptr_t&lt;SysCarto.RectangleElement&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.RectangleElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.RectangleElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="M:PIE.Carto.RectangleElement.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RectangleElement.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.RectangleElement.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.RectangleElement">
            <summary>
RectangleElement矩形元素类
</summary>
        </member>
        <member name="F:PIE.Carto.Element.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.Element.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.Element.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.Element.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放</param>
            <param name="sy">y方向缩放</param>
            <returns>是否成功</returns>
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放</param>
            <param name="sy">y方向缩放</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.Element.Rotate(PIE.Geometry.IPoint,System.Double)">
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">旋转角度</param>
            <returns>是否成功</returns>
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">旋转角度</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.Element.Move(System.Double,System.Double)">
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.Element.QueryBounds(PIE.Display.IDisplayTransformation)">
            <summary>
查询外接多边形
</summary>
            <param name="trasform">转换对象</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.Element.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="trasform">转换对象</param>
            <param name="tracker">TrackerCancel对象</param>
        </member>
        <member name="M:PIE.Carto.Element.HitTest(System.Double,System.Double,System.Double)">
            <summary>
是否HitTest
</summary>
            <param name="x">x值</param>
            <param name="y">y值</param>
            <param name="tolerance">容差值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.Element.SetVisibility(System.Boolean)">
            <summary>
设置是否可见
</summary>
            <summary>
设置是否可见
</summary>
        </member>
        <member name="M:PIE.Carto.Element.IsVisible">
            <summary>
是否可见
</summary>
            <returns>是否可见</returns>
            <summary>
是否可见
</summary>
        </member>
        <member name="M:PIE.Carto.Element.GetExtent">
            <summary>
获取范围
</summary>
            <returns>范围</returns>
            <summary>
获取范围
</summary>
        </member>
        <member name="M:PIE.Carto.Element.CanRotate">
            <summary>
是否可以旋转
</summary>
            <returns>是否可以旋转</returns>
            <summary>
是否可以旋转
</summary>
        </member>
        <member name="M:PIE.Carto.Element.GetFixedSize">
            <summary>
获取固定缩放比大小
</summary>
            <summary>
获取固定缩放比大小
</summary>
        </member>
        <member name="M:PIE.Carto.Element.GetElementType">
            <summary>
获取元素类型
</summary>
            <returns>元素类型</returns>
            <summary>
获取要素类型
</summary>
        </member>
        <member name="P:PIE.Carto.Element.FixedAspectRatio">
            <summary>
获取或设置是否按原比例缩放
</summary>
        </member>
        <member name="P:PIE.Carto.Element.Geometry">
            <summary>
获取或设置Geometry
</summary>
        </member>
        <member name="P:PIE.Carto.Element.CustomerProperty">
            <summary>
获取或设置属性
</summary>
        </member>
        <member name="P:PIE.Carto.Element.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Carto.Element.GetID">
            <summary>
获取ID
</summary>
            <returns>字符串</returns>
            <summary>
获取ID
</summary>
            <returns>字符串</returns>
        </member>
        <member name="T:PIE.Carto.Element">
            <summary>
元素
</summary>
        </member>
        <member name="P:PIE.Carto.IRectangleElement.Symbol">
            <summary>
获取或设置填充符号FillSymbol
</summary>
        </member>
        <member name="T:PIE.Carto.IRectangleElement">
            <summary>
IRectangleElement矩形元素接口
</summary>
        </member>
        <member name="D:SysCarto.RectangleElementPtr">
@brief  矩形元素类   智能指针

</member>
        <member name="M:SysCarto.RectangleElement.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象
@return void

</member>
        <member name="F:SysCarto.RectangleElement.m_ptrSymbol">
@brief  面符号

</member>
        <member name="M:SysCarto.RectangleElement.Clone">
@brief 克隆
@return ElementPtr 克隆元素对象

</member>
        <member name="M:SysCarto.RectangleElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker  取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RectangleElement.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol 面符号
@return  void

</member>
        <member name="M:SysCarto.RectangleElement.GetSymbol">
@brief 获取符号
@return   SysDisplay::FillSymbolPtr  面符号

</member>
        <member name="M:SysCarto.RectangleElement.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RectangleElement.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.RectangleElement">
@class RectangleElement
@brief 矩形元素类

</member>
        <member name="D:SysDisplay.FillSymbolPtr">
@brief 面填充样式 智能指针对象

</member>
        <member name="F:SysDisplay.FillSymbol.m_Brush">
@brief 画刷

</member>
        <member name="F:SysDisplay.FillSymbol.m_ptrOutLineSymbol">
@brief 轮廓线样式

</member>
        <member name="F:SysDisplay.FillSymbol.m_Color">
@brief 颜色样式

</member>
        <member name="M:SysDisplay.FillSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.FillSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.FillSymbol.SetOutlineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置轮廓线样式
@param[in] LineSymbolPtr ptrLineSymbol 轮廓线样式
@return void

</member>
        <member name="M:SysDisplay.FillSymbol.GetOutlineSymbol">
@brief 获得轮廓线样式
@return LineSymbolPtr 轮廓线样式

</member>
        <member name="M:SysDisplay.FillSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.FillSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="T:SysDisplay.FillSymbol">
@class FillSymbol
	* @brief  面填充样式

</member>
        <member name="D:SysDisplay.LineSymbolPtr">
@brief  线样式 智能指针对象

</member>
        <member name="F:SysDisplay.LineSymbol.m_Pen">
@brief 画笔

</member>
        <member name="F:SysDisplay.LineSymbol.m_MiterLimit">
@brief 限制长度

</member>
        <member name="F:SysDisplay.LineSymbol.m_JoinStyle">
@brief 折点连接样式

</member>
        <member name="F:SysDisplay.LineSymbol.m_CapStyle">
@brief 线帽样式

</member>
        <member name="F:SysDisplay.LineSymbol.m_Width">
@brief 线宽度

</member>
        <member name="F:SysDisplay.LineSymbol.m_Offset">
@brief 偏移

</member>
        <member name="F:SysDisplay.LineSymbol.m_Color">
@brief 线颜色

</member>
        <member name="M:SysDisplay.LineSymbol.Dispose">
@brief 析造函数
@return

</member>
        <member name="M:SysDisplay.LineSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.LineSymbol.SetMiterLimit(System.Double)">
@brief 设置MiterLimit
@param[in] double miterLimit MiterLimit
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetMiterLimit">
@brief 获得MiterLimit
@return double MiterLimit

</member>
        <member name="M:SysDisplay.LineSymbol.SetJoinStyle(SysDisplay.LineJoinStyle)">
@brief 设置连接样式
@param[in] LineJoinStyle join 连接样式
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetJoinStyle">
@brief 获得连接样式
@return LineJoinStyle 连接样式

</member>
        <member name="M:SysDisplay.LineSymbol.SetCapStyle(SysDisplay.LineCapStyle)">
@brief 设置线帽样式
@param[in] LineCapStyle cap 线帽样式
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetCapStyle">
@brief 得到线帽样式
@return LineCapStyle 线帽样式

</member>
        <member name="M:SysDisplay.LineSymbol.SetColor(QColor)">
@brief  设置颜色
@param[in] QColor color
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetColor">
@brief  获取颜色
@return QColor

</member>
        <member name="M:SysDisplay.LineSymbol.SetWidth(System.Double)">
@brief  设置宽度
@param[in] double width
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetWidth">
@brief  获取宽度
@return double

</member>
        <member name="M:SysDisplay.LineSymbol.SetOffset(System.Double)">
@brief 设置偏移量
@param[in] double offset  偏移量
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetOffset">
@brief  获取偏移量
@return double 偏移量

</member>
        <member name="T:SysDisplay.LineSymbol">
@class LineSymbol
	* @brief  线样式

</member>
        <member name="M:PIE.Carto.MapSurround.set_Map(PIE.Carto.IMap)">
            <summary>
设置map对象
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurround.get_Map">
            <summary>
获取map对象
</summary>
        </member>
        <member name="F:PIE.Carto.MarkerNorthArrow.m_pCInstanceSub">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.#ctor(SysUtility._ptr_t&lt;SysCarto.MarkerNorthArrow&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Carto.MarkerNorthArrow.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="P:PIE.Carto.MarkerNorthArrow.Color">
            <summary>
获取或设置颜色
</summary>
        </member>
        <member name="P:PIE.Carto.MarkerNorthArrow.CalibrationAngle">
            <summary>
Calibration angle.Rotation is modified by this angle.
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.GetAngle">
            <summary>
获取角度
</summary>
            <summary>
获取角度
</summary>
        </member>
        <member name="P:PIE.Carto.MarkerNorthArrow.MarkerSymbol">
            <summary>
获取或设置符号
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.MarkerNorthArrow.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.MarkerNorthArrow">
            <summary>
指北针符号
</summary>
        </member>
        <member name="P:PIE.Carto.INorthArrow.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="P:PIE.Carto.INorthArrow.Color">
            <summary>
获取或设置颜色
</summary>
        </member>
        <member name="P:PIE.Carto.INorthArrow.CalibrationAngle">
            <summary>
校准角度
</summary>
        </member>
        <member name="M:PIE.Carto.INorthArrow.GetAngle">
            <summary>
计算的角度
</summary>
        </member>
        <member name="T:PIE.Carto.INorthArrow">
            <summary>
INorthArrow接口
</summary>
        </member>
        <member name="P:PIE.Carto.IMarkerNorthArrow.MarkerSymbol">
            <summary>
获取或设置符号
</summary>
        </member>
        <member name="T:PIE.Carto.IMarkerNorthArrow">
            <summary>
IMarkerNorthArrow接口
</summary>
        </member>
        <member name="D:SysCarto.MarkerNorthArrowPtr">
@brief  标记指北针  智能指针对象

</member>
        <member name="F:SysCarto.MarkerNorthArrow.m_dBoundHeight">
@brief 边界高度

</member>
        <member name="F:SysCarto.MarkerNorthArrow.m_ptrMarkSymbol">
@brief 标记符号

</member>
        <member name="F:SysCarto.MarkerNorthArrow.m_dSizeCopy">
@brief 大小拷贝

</member>
        <member name="M:SysCarto.MarkerNorthArrow.CopyTo(SysCarto.MarkerNorthArrow*)">
@brief 拷贝到MarkerNorthArrow
@param [in] MarkerNorthArrow* pMarkerNorthArrow 标记指北针
return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.GetMarkSymbol">
@brief 获取标记符号
@return SysDisplay::MarkerSymbolPtr  标记符号

</member>
        <member name="M:SysCarto.MarkerNorthArrow.SetMarkerSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置标记符号
@param [in] ptrMarkSymbol 标记符号
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.GetSize">
@brief 获取大小
@return double 大小值

</member>
        <member name="M:SysCarto.MarkerNorthArrow.SetSize(System.Double)">
@brief 设置大小
@param [in] dSize 大小值
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.SetColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色
@param [in] color 颜色值
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.GetColor">
@brief 获取颜色
@return QColor 颜色

</member>
        <member name="M:SysCarto.MarkerNorthArrow.GetCalibrationAngle">
@brief 获取校准角度
@return double 校准角度

</member>
        <member name="M:SysCarto.MarkerNorthArrow.SetCalibrationAngle(System.Double)">
@brief 设置校准角度
@param [in] degrees 校准角度
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.GetAngle">
@brief 获取计算的角度
@return double 计算的角度值

</member>
        <member name="M:SysCarto.MarkerNorthArrow.FitToBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 填充使其适应边界大小 
@param [in] ptrDisTrans 显示转换对象
@param [in] ptrBounds 包络线范围
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.QuerySize(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询大小
@param [in] ptrDisTrans 显示转换对象
@param [in out] width 宽度
@param [in out] height 高度
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrEnv 包络线范围
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MarkerNorthArrow.Clone">
@brief 克隆
@return  MapSurroundPtr 地图围绕对象

</member>
        <member name="M:SysCarto.MarkerNorthArrow.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MarkerNorthArrow.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MarkerNorthArrow">
@class  MarkerNorthArrow
@brief  标记指北针

</member>
        <member name="D:SysDisplay.MarkerSymbolPtr">
@brief 点符号样式 智能指针对象

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Brush">
@brief 画刷

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_YOffset">
@brief Y方向偏移

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_XOffset">
@brief X方向偏移

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Color">
@brief 点颜色

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Angle">
@brief 点角度

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Size">
@brief 点大小

</member>
        <member name="M:SysDisplay.MarkerSymbol.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.MarkerSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.MarkerSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetYOffset(System.Double)">
@brief 设置点Y方向的偏移值
@param[in] double offset Y方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetYOffset">
@brief 获得点Y方向的偏移值
@return double Y方向偏移值

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetXOffset(System.Double)">
@brief 设置点X方向的偏移值
@param[in] double offset X方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetXOffset">
@brief 获得点X方向偏移值
@return double X方向偏移值

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetSize(System.Double)">
@brief 设置点大小
@param[in] double size 点大小
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetSize">
@brief 获得点大小
@return double 点大小

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetColor(QColor)">
@brief 设置点颜色
@param[in] QColor color 设置点颜色
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetColor">
@brief 获得点颜色
@return QColor 点颜色

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetAngle(System.Double)">
@brief 设置旋转角度值
@param[in] double angle 旋转角度值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetAngle">
@brief 获得旋转角度值
@return double 旋转角度值

</member>
        <member name="T:SysDisplay.MarkerSymbol">
@class MarkerSymbol
	* @brief  点符号样式

</member>
        <member name="D:SysCarto.INorthArrowPtr">
@brief   指北针 智能指针对象

</member>
        <member name="M:SysCarto.INorthArrow.CopyTo(SysCarto.INorthArrow*)">
@brief 拷贝到INorthArrow
@param [in] INorthArrow* pNorthArrow  指北针
@return void

</member>
        <member name="M:SysCarto.INorthArrow.GetSize">
@brief 获取大小
@return double  大小

</member>
        <member name="M:SysCarto.INorthArrow.SetSize(System.Double)">
@brief 设置大小
@param [in] dSize  大小
@return void

</member>
        <member name="M:SysCarto.INorthArrow.SetColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色
@param [in] color  颜色
@return void

</member>
        <member name="M:SysCarto.INorthArrow.GetColor">
@brief 获取颜色
@return QColor  颜色

</member>
        <member name="M:SysCarto.INorthArrow.GetCalibrationAngle">
@brief 获取校准角度
@return double 校准角度

</member>
        <member name="M:SysCarto.INorthArrow.SetCalibrationAngle(System.Double)">
@brief 设置校准角度 
@param [in] degrees  校准角度
@return void

</member>
        <member name="M:SysCarto.INorthArrow.GetAngle">
@brief 获取角度值
@return double 角度值

</member>
        <member name="M:SysCarto.INorthArrow.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.INorthArrow.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.INorthArrow">
@class INorthArrow
@brief 指北针

</member>
        <member name="F:PIE.Carto.MapSurround.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurround.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Carto.MapSurround.Refresh">
            <summary>
刷新
</summary>
            <summary>
刷新
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurround.GetType">
            <summary>
获取MapSurround类型
</summary>
            <returns>返回值说明</returns>
            <summary>
获取MarkerNorthArrow类型
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.MapSurround.Map">
            <summary>
获取或设置map对象
</summary>
        </member>
        <member name="M:PIE.Carto.MapSurround.FitToBounds(PIE.Display.IDisplayTransformation,PIE.Geometry.IEnvelope)">
            <summary>
填充MapSurround对象使其适应边界大小
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <param name="ptrBounds">对参数进行描述说明</param>
            <summary>
填充MarkerNorthArrow对象使其适应边界大小
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <param name="ptrBounds">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.MapSurround.QuerySize(PIE.Display.IDisplayTransformation,System.Double@,System.Double@)">
            <summary>
查询MapSurround大小
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <param name="width">返回宽度</param>
            <param name="height">返回高度</param>
            <summary>
查询MarkerNorthArrow大小
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <param name="width">返回宽度</param>
            <param name="height">返回高度</param>
        </member>
        <member name="M:PIE.Carto.MapSurround.Draw(System.Drawing.Graphics,PIE.Geometry.IEnvelope,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrEnv">外接多边形</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrEnv">外接多边形</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
        </member>
        <member name="M:PIE.Carto.MapSurround.CreateItemGraphics(PIE.Display.IDisplayTransformation)">
            <summary>
创建Graphics
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <summary>
创建Graphics
</summary>
            <param name="ptrDisTrans">转换对象</param>
        </member>
        <member name="M:PIE.Carto.MapSurround.GetGraphics">
            <summary>
获取Graphics
</summary>
            <returns>返回MapSurround对象</returns>
            <summary>
获取Graphics
</summary>
            <returns>返回MapSurround对象</returns>
        </member>
        <member name="M:PIE.Carto.MapSurround.Clone">
            <summary>
克隆
</summary>
            <returns>返回MapSurround对象</returns>
            <summary>
克隆
</summary>
            <returns>返回MapSurround对象</returns>
        </member>
        <member name="T:PIE.Carto.MapSurround">
            <summary>
指北针符号
</summary>
        </member>
        <member name="D:SysCarto.MapSurroundPtr">
@brief  地图围绕类 智能指针对象

</member>
        <member name="F:SysCarto.MapSurround.m_pParent">
@brief 地图围绕框架父指针

</member>
        <member name="F:SysCarto.MapSurround.m_bNeedRelayout">
@brief 是否需要相对布局

</member>
        <member name="F:SysCarto.MapSurround.m_ptrMap">
@brief 地图

</member>
        <member name="F:SysCarto.MapSurround.m_enumType">
@brief 地图围绕类型

</member>
        <member name="M:SysCarto.MapSurround.SetRelayout">
@brief 设置相对布局
@return void

</member>
        <member name="M:SysCarto.MapSurround.CopyTo(SysCarto.MapSurround*)">
@brief 拷贝到MapSurround
@param [in] MapSurround* pMapSurround  地图围绕对象
@return void

</member>
        <member name="M:SysCarto.MapSurround.GetType">
@brief 获取类型
@return  MapSurroundType 地图

</member>
        <member name="M:SysCarto.MapSurround.Refresh">
@brief 刷新地图
@return void

</member>
        <member name="M:SysCarto.MapSurround.GetMap">
@brief 获取地图
@return SysCarto::MapPtr 地图

</member>
        <member name="M:SysCarto.MapSurround.SetMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地图
@param [in] ptrMap 地图对象
@return void

</member>
        <member name="M:SysCarto.MapSurround.FitToBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 填充MapSurround对象使其适应边界大小 
@param [in] ptrDisTrans 显示转换对象
@param [in] ptrBounds   边界大小
@return void

</member>
        <member name="M:SysCarto.MapSurround.QuerySize(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询获取大小
@param [in] ptrDisTrans 显示转换对象
@param [in] width  宽度
@param [in] height 高度
@return void

</member>
        <member name="M:SysCarto.MapSurround.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrEnv 包络线对象
@param [in] ptrTrasform 显示转换对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MapSurround.Clone">
@brief 克隆
@return  MapSurroundPtr 地图围绕 对象

</member>
        <member name="M:SysCarto.MapSurround.CreateItemGraphics(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建制图条目
@param [in] ptrDisTrans  显示转换对象
@return  void

</member>
        <member name="M:SysCarto.MapSurround.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MapSurround.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MapSurround">
@brief  类的前置声明和智能指针定义


@class  MapSurround
@brief  地图围绕

</member>
        <member name="T:SysCarto.MapSurroundType">
@class  MapSurroundType
@brief  地图围绕类型

</member>
        <member name="F:MapSurroundSingleDivisionScaleBar">
@brief 单一分隔比例尺

</member>
        <member name="F:MapSurroundSteppedScaleLine">
@brief 步进比例线

</member>
        <member name="F:MapSurroundDoubleAlternatingScaleBar">
@brief 地图双重黑白相间比例尺

</member>
        <member name="F:MapSurroundHollowScaleBar">
@brief 地图空心比例尺

</member>
        <member name="F:MapSurroundScaleText">
@brief 地图围绕比例文本

</member>
        <member name="F:MapSurroundNorthArrow">
@brief 地图围绕指北针

</member>
        <member name="F:MapSurroundLegend">
@brief 地图围绕图例

</member>
        <member name="F:MapSurroundAlternatingScaleBar">
@brief 地图交互比例尺

</member>
        <member name="F:MapSurroundScaleLine">
@brief 地图围绕比例线

</member>
        <member name="F:MapSurroundUnknown">
@brief 无类型

</member>
        <member name="T:SysCarto.MapSurroundFrame">
@brief  类的前置声明


@class  声明地图围绕框架类为当前类的友元类


@class  MapSurroundFrame
@brief  地图围绕框架

</member>
        <member name="D:SysCarto.MapPtr">
@brief  地图 智能指针对象

</member>
        <member name="F:SysCarto.Map.m_pSelectionModel">
@brief 选择集处理模型

</member>
        <member name="F:SysCarto.Map.m_pLabelModel">
@brief 标签处理模型

</member>
        <member name="F:SysCarto.Map.m_pThreadModel">
@brief 处理线程

</member>
        <member name="F:SysCarto.Map.m_ptrProcessTrans">
@brief 处理转换

</member>
        <member name="F:SysCarto.Map.m_bPanWithoutDispatch">
@brief  是否显示标签

@brief  是否设置为拖屏的时候不再调度瓦片的加载

</member>
        <member name="F:SysCarto.Map.m_bFeatureSelectionChanged">
@brief  要素选择是否改变

</member>
        <member name="F:SysCarto.Map.m_ptrClipGeometry">
@brief  裁剪几何

</member>
        <member name="F:SysCarto.Map.m_dMapScale">
@brief  地图比例

</member>
        <member name="F:SysCarto.Map.m_dReferenceScale">
@brief   地图单元

@brief  参考比例

</member>
        <member name="F:SysCarto.Map.m_ptrSRef">
@brief  空间参考

</member>
        <member name="F:SysCarto.Map.m_vecLayers">
@brief  图层集合

</member>
        <member name="F:SysCarto.Map.m_strName">
@brief  名字

</member>
        <member name="F:SysCarto.Map.m_strID">
@brief  编号ID

</member>
        <member name="M:SysCarto.Map.GetLayerPositionInLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Layer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获得图层位置（上级图层下，递归函数）
@param [in] pInTopLyr  上级图层
@param [in] pInLyr     输入图层
@param [out] pParentLayer   输出图层（直接上级）
@param [out] nIndex   输出索引位置（组图层下、多图层下）
@return 是否成功

</member>
        <member name="M:SysCarto.Map.GetRenderTransformation">
@brief  获取主线程显示转换(布局中地图显示转换参数需要重新调整)
@return 是否成功

</member>
        <member name="M:SysCarto.Map.DeleteLayerInternal(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层
@param [in] ptrLayer  图层
@return 是否成功

</member>
        <member name="M:SysCarto.Map.AddLayerInternal(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  添加图层
@param [in] ptrLayer  图层
@param [in] index     图层编号
@return 是否成功

</member>
        <member name="M:SysCarto.Map.OnSelectionChanged">
@brief  图层选择改变信号槽函数
@return void

</member>
        <member name="M:SysCarto.Map.GetRasterLayerNativeResExtent(SysUtility._ptr_t&lt;SysCarto.RasterLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获取栅格图层本地资源范围
@param [in] ptrLayer  栅格图层
@return SysGeometry::EnvelopePtr  包络线范围

</member>
        <member name="M:SysCarto.Map.GetSpatialReferenceByLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过图层获取空间参考
@param [in] ptrLayer 图层
@return  SysGeometry::SpatialReferencePtr  空间参考

</member>
        <member name="M:SysCarto.Map.DeleteLayerFromSubLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从子图层中删除图层
@param [in] ptrLayer 图层
@param [in] ptrSubLayer  子图层
@return  bool  是否成功

</member>
        <member name="M:SysCarto.Map.FindLayerByID(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过ID查找图层
@param [in] ptrLayer 图层
@param [in] layerID  图层ID
@return  LayerPtr    图层

</member>
        <member name="M:SysCarto.Map.SetProperty">
@brief 标签渲染完成
@return  void

@brief 激活标签渲染
@return  void

@brief 重置属性
@return  void

</member>
        <member name="M:SysCarto.Map.ResetContentImage">
@brief 重置内容图片
@return  void

</member>
        <member name="M:SysCarto.Map.OnNotifyUpdate">
@brief 通知更新槽函数
@return  void 

</member>
        <member name="M:SysCarto.Map.CopyTo(SysCarto.Map*)">
@brief 拷贝到Map
@param[in] Map* Map对象

</member>
        <member name="M:SysCarto.Map.TransformContainterElements(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;,SysUtility._ptr_t&lt;SysCarto.Layer&gt;)">
@brief 转换包含的元素集
@param [in] ptrSRef   空间参考
@param [in] ptrLayer  图层
@return void

</member>
        <member name="M:SysCarto.Map.SetPanWithoutDispatch(System.Boolean)">
@brief 设置为拖屏的时候不再调度瓦片的加载 （局部拉伸需要用到这个接口）
@param [in] bValue  是否调用
@return void

</member>
        <member name="M:SysCarto.Map.DeleteSelectionCache">
@brief 释放选择集缓存
@return void

</member>
        <member name="M:SysCarto.Map.IsRendering">
@brief  是否在渲染
@return bool  是 true, 否 false

</member>
        <member name="M:SysCarto.Map.ProcessTask(SysCarto.RenderTask*)">
@brief 
@param [in] pRenderTask 
@return 

</member>
        <member name="M:SysCarto.Map.Render(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 底层渲染接口
@param [in] painter 
@param [in] ptrTracker 
@return 

</member>
        <member name="M:SysCarto.Map.Clone">
@brief 克隆
@return MapPtr 当前地图的克隆对象

</member>
        <member name="M:SysCarto.Map.ZoomAction(QPoint,System.Double,System.Double)">
@brief 缩放
@param [in] QPoint centerPos 缩放中心点
@param [in] double dScaleX X方向缩放率
@param [in] double dScaleY Y方向缩放率
@return 

</member>
        <member name="M:SysCarto.Map.StartDrawing">
@brief 开始绘制
@return void

</member>
        <member name="M:SysCarto.Map.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.Map.DeleteRenderCacheBlocks(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除渲染缓存块
@param [in] strLayerID   图层ID
@return  void

</member>
        <member name="M:SysCarto.Map.GetRenderedImageLayer(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取渲染图片图层
@param [in] strLayerID   图层ID
@return  QImage  图片

</member>
        <member name="M:SysCarto.Map.SwipeLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPoint,QPoint,System.Int32)">
@brief 卷帘图层 
@param [in] ptrLayer   图层
@param [in] startPos   开始点
@param [in] currPoint  当前点
@param [in] direction  方向
@return  void

</member>
        <member name="M:SysCarto.Map.StopRender">
@brief 停止渲染
@return  void

</member>
        <member name="M:SysCarto.Map.PanRefresh(System.Boolean)">
@brief 漫游刷新
@param [in] bForceActive  是否强制激活
@return  void

</member>
        <member name="M:SysCarto.Map.InvalidLayerCache(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置无效的图层缓存
@param [in] ptrLayer  图层
@return  void

</member>
        <member name="M:SysCarto.Map.Refresh(System.Boolean,System.Boolean)">
@brief 刷新
@param [in] bClearCache  是否清空缓存
@param [in] bFroceRefresh  是否强制刷新
@return  void

</member>
        <member name="M:SysCarto.Map.PartialRefresh(SysCarto.ViewDrawPhaseType,System.Boolean)">
@brief 局部刷新
@param [in] dpType  刷新类型
@param [in] bMakeAllCacheDirty  是否强力刷新
@return  void

</member>
        <member name="M:SysCarto.Map.GetContentImage(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取内容图片
@param [in out] painter  绘图对象
@return  void 

</member>
        <member name="M:SysCarto.Map.GetContentImage">
@brief 获取内容图片
@return  QImage    图片对象

</member>
        <member name="M:SysCarto.Map.SetFullExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全局范围
@param [in] ptrEnv  包络线范围
@return  void

</member>
        <member name="M:SysCarto.Map.GetFullExtent">
@brief 获取全局范围
@return  SysGeometry::EnvelopePtr    包络线范围

</member>
        <member name="M:SysCarto.Map.SetExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置范围
@param [in] ptrEnv  包络线范围
@return  void

</member>
        <member name="M:SysCarto.Map.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr    包络线范围

</member>
        <member name="M:SysCarto.Map.HitTestMap(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点击测试地图
@param [in] point  几何点
@return  MapPtr    地图对象

</member>
        <member name="M:SysCarto.Map.SetFocusMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置焦点地图
@param [in] ptrMap  焦点地图
@return  void

</member>
        <member name="M:SysCarto.Map.GetFocusMap">
@brief 获取焦点地图
@return  MapPtr  地图对象

</member>
        <member name="M:SysCarto.Map.Activate(QPaintDevice*)">
@brief 激活视图
@param [in] pDevice 视图绘制设备对象
@return  void

</member>
        <member name="M:SysCarto.Map.UnSelectFeatures(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   取消选中的要素集
@param [in] strLayerID     图层ID
@param [in] lstFIDs        fid编号集合
@return    void

</member>
        <member name="M:SysCarto.Map.UnSelectFeature(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
@brief   取消选中的要素
@param [in] strLayerID     图层ID
@param [in] fid            fid编号
@return    void

</member>
        <member name="M:SysCarto.Map.UnSelectFeatures(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   取消选中的要素集
@param [in] ptrLayer     图层
@param [in] ptrFeature   要素集合
@return    void

</member>
        <member name="M:SysCarto.Map.UnSlectFeature(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   取消选中的要素
@param [in] ptrLayer     图层
@param [in] ptrFeature   要素
@return    void

</member>
        <member name="M:SysCarto.Map.ClearSelectionFeatures">
@brief   清空选中的要素集
@return    void

</member>
        <member name="M:SysCarto.Map.SelectionFeatureCount">
@brief   获取选中的要素数量
@return  int     要素数量

</member>
        <member name="M:SysCarto.Map.GetSelectionFeaturesCount">
@brief   获取选中的要素集数量
@return  int   要素集数量

</member>
        <member name="M:SysCarto.Map.SelectFeatures(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   选择要素集
@param [in] strLayerID      图层ID
@param [in] lstFIDs         fid编号集合
@return    void

</member>
        <member name="M:SysCarto.Map.SelectFeature(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int64)">
@brief   选择要素
@param [in] strLayerID     图层ID
@param [in] fid    fid编号
@return    void

</member>
        <member name="M:SysCarto.Map.SelectFeatures(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   选择要素集
@param [in] ptrLayer      图层
@param [in] lstFeatures   要素集合
@return    void

</member>
        <member name="M:SysCarto.Map.SelectFeature(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   选择要素
@param [in] ptrLayer     图层
@param [in] ptrFeature   要素
@return    void

</member>
        <member name="M:SysCarto.Map.SelectFeatureByShape(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean)">
@brief   通过形状选择要素
@param [in] ptrGeo       几何对象
@param [in] queryLayers  查询的图层集合
@param [in] clearBefore  是否清除之前选择集 
@param [in] justOne      是否只选择一个 
@return    void

</member>
        <member name="M:SysCarto.Map.WaitForRenderFinished">
@brief 等待屏幕范围的瓦片缓存绘制完毕
@return  void

</member>
        <member name="M:SysCarto.Map.Output(SysUtility._ptr_t&lt;SysCarto.IExporter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief   输出
@param [in] exporter 输出对象
@param [in] nDpi     每英寸点数
@param [in] pixelBounds 像素点范围
@param [in] ptrVisBounds 可视边界范围
@param [in] ptrTracker   取消轨迹
@return    void

</member>
        <member name="M:SysCarto.Map.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图点转化为设备点
@param [in] SysGeometry::PointPtr ptrPoint 地图点
@return QPoint 设备点

</member>
        <member name="M:SysCarto.Map.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从设备点转化为地图点
@param [in] QPoint point 设备点
@return  SysGeometry::PointPtr 地图点

</member>
        <member name="M:SysCarto.Map.SetClipGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置几何裁剪
@param  [in]  SysGeometry::GeometryPtr   几何对象
@return  void

</member>
        <member name="M:SysCarto.Map.GetClipGeometry">
@brief  获取几何裁剪
@return  SysGeometry::GeometryPtr   几何对象

</member>
        <member name="M:SysCarto.Map.SetMapScale(System.Double)">
@brief  设置地图比例
@param  [in]  scale  地图比例
@return  void

</member>
        <member name="M:SysCarto.Map.GetMapScale">
@brief  获取地图比例
@return  double   地图比例

</member>
        <member name="M:SysCarto.Map.SetMapUnits(SysUI.pieUnits)">
@brief  设置地图单元
@param  [in]  mapUnits  地图单元
@return  void

</member>
        <member name="M:SysCarto.Map.GetMapUnits">
@brief  获取地图单元
@return  SysUI::pieUnits  地图单元

</member>
        <member name="M:SysCarto.Map.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置空间参考
@param  [in]  ptrSRef  空间参考
@return  void

</member>
        <member name="M:SysCarto.Map.GetSpatialReference">
@brief  获取空间参考 （坐标系）
@return  SysGeometry::SpatialReferencePtr  空间参考

</member>
        <member name="M:SysCarto.Map.FindLayerByID(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  通过ID发现图层
@param  [in]  layerID   图层ID
@return  LayerPtr 图层

</member>
        <member name="M:SysCarto.Map.GetLayer(System.Int32)">
@brief  获取图层
@param [in]  index     索引
@return  LayerPtr 图层

</member>
        <member name="M:SysCarto.Map.GetLayerCount">
@brief   获取图层数量
@return  int  图层数量

</member>
        <member name="M:SysCarto.Map.MoveLayerEx(SysUtility._ptr_t&lt;SysCarto.GroupLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.GroupLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  移动图层扩展
@param [in]  ptrFormGLayer   组图层源数据
@param [in]  ptrToGLayer     组图层目标数据
@param [in]  ptrLayer        图层
@param [in]  newPosition     新位置
@return  void

</member>
        <member name="M:SysCarto.Map.MoveLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  移动图层
@param [in]  ptrLayer   图层
@param [in]  toIndex    索引
@return  void

</member>
        <member name="M:SysCarto.Map.GetLayerPosition(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Layer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  获得图层位置
@param [in]  pInLyr   输入图层
@param [out] pParentLyr  输出父图层（组图层、多图层、NULL）
@param [out] nIndex   输出索引位置（组图层、多图层、Map）
@return  void

</member>
        <member name="M:SysCarto.Map.Contains(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  是否包含某图层
@param [in]  ptrLayer   图层
@return  bool 是否包含  是 true,否 false

</member>
        <member name="M:SysCarto.Map.ClearLayers">
@brief  清空图层集
@return  void

</member>
        <member name="M:SysCarto.Map.DeleteLayers(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层集
@param [in]  vecLayers   图层集合
@return  void

</member>
        <member name="M:SysCarto.Map.DeleteLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层
@param [in]  ptrLayer   图层
@return  void

</member>
        <member name="M:SysCarto.Map.DeleteLayer(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层
@param [in]  sLyrId    图层ID
@return  void

</member>
        <member name="M:SysCarto.Map.DeleteLayer(System.Int32)">
@brief  删除图层
@param [in]  index     索引
@return  void

</member>
        <member name="M:SysCarto.Map.AddLayers(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  添加图层集
@param [in]  vecLayers  图层集
@param [in]  index     索引
@return  void

</member>
        <member name="M:SysCarto.Map.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  添加图层
@param [in]  ptrLayer  图层
@param [in]  index     索引
@return  void

</member>
        <member name="M:SysCarto.Map.AddLayers(QList&lt;SysUtility._ptr_t&lt;SysCarto.Layer&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加图层集
@param [in]  vecLayers  图层集
@return  void

</member>
        <member name="M:SysCarto.Map.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加图层
@param [in]  ptrLayer  图层
@return  void

</member>
        <member name="M:SysCarto.Map.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in]  name  名字
@return  void

</member>
        <member name="M:SysCarto.Map.GetName">
@brief   获取名字
@return  QString  名字

</member>
        <member name="M:SysCarto.Map.SetID(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置地图ID
@param [in]  strID  地图ID
@return  void

</member>
        <member name="M:SysCarto.Map.GetID">
@brief   获取地图ID
@return  QString  地图ID

</member>
        <member name="M:SysCarto.Map.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Map.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] mapName 默认参数 地图名称

</member>
        <member name="T:SysCarto.CacheBlockManager">
@brief  声明友元类缓存块管理类 为当前类的友元类

</member>
        <member name="T:SysCarto.RenderTask">
@brief  类的前置声明 

</member>
        <member name="D:SysCarto.RasterLayerPtr">
@brief 栅格图层  智能指针对象

</member>
        <member name="F:SysCarto.RasterLayer.m_ptrRender">
@brief 栅格渲染

</member>
        <member name="F:SysCarto.RasterLayer.m_ptrDataset">
@brief 栅格数据

</member>
        <member name="M:SysCarto.RasterLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param[in] Layer* Layer对象

</member>
        <member name="M:SysCarto.RasterLayer.Refresh">
@brief 刷新
@return void

</member>
        <member name="M:SysCarto.RasterLayer.IsValid">
@brief 是否是有效图层
@return  bool  是否是有效

</member>
        <member name="M:SysCarto.RasterLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.RasterLayer.RaiseRenderChanged">
@brief 提升渲染改变
@return void

</member>
        <member name="M:SysCarto.RasterLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] dpType 绘制图层相应类型对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RasterLayer.SetRenderer(SysUtility._ptr_t&lt;SysCarto.RasterRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染
@param [in] ptrRender 栅格渲染
@return void

</member>
        <member name="M:SysCarto.RasterLayer.SetDataset(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置数据集
@param [in] ptrDataset 栅格数据集
@return void

</member>
        <member name="M:SysCarto.RasterLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr    包络线范围

</member>
        <member name="M:SysCarto.RasterLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterLayer.#ctor(SysCarto.LayerCacheModelType)">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterLayer">
@class RasterLayer
@brief  栅格图层

</member>
        <member name="F:SysCarto.RasterRender.m_bHaveNodate">
@brief 有Nodate数组

</member>
        <member name="F:SysCarto.RasterRender.m_pdNodata">
@brief Nodata数组

</member>
        <member name="F:SysCarto.RasterRender.m_bNeedUpdataLutInfo">
@brief 需要更新Lut的信息

</member>
        <member name="F:SysCarto.RasterRender.m_ppBufferLut">
@brief 像素点缓冲数组

</member>
        <member name="F:SysCarto.RasterRender.m_vecBands">
@brief 波段集合

</member>
        <member name="F:SysCarto.RasterRender.m_resampType">
@brief 栅格重采样类型 

</member>
        <member name="F:SysCarto.RasterRender.m_ResolutionFactor">
@brief 分辨率因子

</member>
        <member name="F:SysCarto.RasterRender.m_bCanRender">
@brief 是否可以渲染

</member>
        <member name="F:SysCarto.RasterRender.m_strDesc">
@brief 描述信息

</member>
        <member name="F:SysCarto.RasterRender.m_RRType">
@brief 栅格渲染类型

</member>
        <member name="F:SysCarto.RasterRender.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.RasterRender.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.RasterRender.UpdateBrightnessContrast">
@brief 更新亮度反转
@return  void

</member>
        <member name="M:SysCarto.RasterRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in] ptrDataset 栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetTransParent">
@brief 获取透明度
@return  int 透明度

</member>
        <member name="M:SysCarto.RasterRender.SetTransParent(System.Int32)">
@brief 设置透明度
@param [in] nValue 透明度
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetBrightnessInverse">
@brief 获取亮度反转
@return  bool 是否设置亮度反转

</member>
        <member name="M:SysCarto.RasterRender.SetBrightnessInverse(System.Boolean)">
@brief 设置亮度反转
@param [in] bValue 是否设置亮度反转
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetContrast">
@brief 获取对比度
@return  int 对比度

</member>
        <member name="M:SysCarto.RasterRender.SetContrast(System.Int32)">
@brief 设置对比度
@param [in] nValue 对比度
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetBrightness">
@brief 获取亮度
@return  int 亮度值

</member>
        <member name="M:SysCarto.RasterRender.SetBrightness(System.Int32)">
@brief 设置亮度
@param [in] nValue 亮度值
@return  void

</member>
        <member name="M:SysCarto.RasterRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetRenderBytes(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief 获取渲染字节集
@param [in]  ptrDataset  栅格数据集
@param [in]  ptrEnvelope 包络线范围
@param [in]  nWidth       宽
@param [in]  nHeight      高
@param [in]  ptrTrack     取消追踪对象
@return  uchar*  渲染字节集

</member>
        <member name="M:SysCarto.RasterRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterRender.Draw(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] ptrDataset 栅格数据集
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] dpType 绘制图层相应类型对象
@param [in] tracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RasterRender.SetResamplingType(SysCarto.RasterResamplingType)">
@brief 设置栅格重采样类型 
@param [in] RasterResamplingType resampType  栅格重采样类型
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetResamplingType">
@brief 获取栅格重采样类型 
@return  RasterResamplingType  栅格重采样类型

</member>
        <member name="M:SysCarto.RasterRender.SetDisplayResolutionFactor(System.Int32)">
@brief 设置分辨率因子 
@param [in] factor 分辨率因子
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetDisplayResolutionFactor">
@brief 获取分辨率因子 
@return  int  分辨率因子 

</member>
        <member name="M:SysCarto.RasterRender.CanRender">
@brief 是否可以渲染
@return  bool  是否可以

</member>
        <member name="M:SysCarto.RasterRender.GetDescription">
@brief 获取描述信息
@return  QString  描述信息

</member>
        <member name="M:SysCarto.RasterRender.GetName">
@brief 获取名字
@return  QString  名字

</member>
        <member name="M:SysCarto.RasterRender.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.RasterRender">
@brief  类的前置声明 和智能指针定义


@class RasterRender
@brief  栅格渲染

</member>
        <member name="T:SysCarto.RasterRenderType">
@class RasterRenderType
@brief 矢量渲染器类型 枚举

</member>
        <member name="F:RRT_RasterDiscreteColorRender">
@brief 点密度渲染

</member>
        <member name="F:RRT_RasterColormapRender">
@brief 颜色对照表渲染

</member>
        <member name="F:RRT_RasterUniqueValueRender">
@brief 唯一值渲染

</member>
        <member name="F:RRT_RasterClassifyColorRampRender">
@brief 分级渲染

</member>
        <member name="F:RRT_RasterStretchColorRampRender">
@brief 拉伸颜色带渲染

</member>
        <member name="F:RRT_RasterRGBRender">
@brief RGB渲染

</member>
        <member name="F:RRT_Unknown">
@brief 未知渲染类型

</member>
        <member name="F:SysCarto.IRasterFilterProps.m_lstAfterFilter">
@brief   后置栅格过滤器集合

</member>
        <member name="F:SysCarto.IRasterFilterProps.m_lstPreFilter">
@brief   前置栅格过滤器集合

</member>
        <member name="M:SysCarto.IRasterFilterProps.AddAfterRasterFilter(SysUtility._ptr_t&lt;SysCarto.AfterRasterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加后置栅格过滤器
@param  [in] ptrFilter    后置栅格过滤器
@return  void

</member>
        <member name="M:SysCarto.IRasterFilterProps.AddPreRasterFilter(SysUtility._ptr_t&lt;SysCarto.PreRasterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   添加前置栅格过滤器
@param [in] ptrFilter    前置栅格过滤器
@return  void

</member>
        <member name="T:SysCarto.IRasterFilterProps">
@class IRasterFilterProps
@brief  栅格过滤器支持

</member>
        <member name="D:SysCarto.AfterRasterFilterPtr">
@brief  后置过滤器 智能指针对象

</member>
        <member name="M:SysCarto.AfterRasterFilter.#ctor">
@brief  构造函数

</member>
        <member name="M:SysCarto.AfterRasterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  过滤器
@param [in] memData 像素点缓冲数据
@param [in] pRenderData 渲染数据 
@param [in] ptrEnvelope 包络线范围
@return void

</member>
        <member name="M:SysCarto.AfterRasterFilter.Dispose">
@brief  析构函数

</member>
        <member name="T:SysCarto.AfterRasterFilter">
@class AfterRasterFilter
@brief  后置过滤器

</member>
        <member name="D:SysCarto.PreRasterFilterPtr">
@brief 栅格前置过滤器  智能指针

</member>
        <member name="M:SysCarto.PreRasterFilter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.PreRasterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤器
@param [in] memData   像素缓冲元数据
@param [in] pDataMask 数据模型
@param [in] ptrEnvelope 包络线范围
@return void

</member>
        <member name="M:SysCarto.PreRasterFilter.FilterExtent(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
@brief 过滤器扩展
@param [in] ptrDataset 数据集
@param [in] ptrEnvelope 包络线对象
@param [in] nWidth 宽度
@param [in] nHeight 高度
@return void

</member>
        <member name="M:SysCarto.PreRasterFilter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.PreRasterFilter">
@class  PreRasterFilter
@brief  栅格前置过滤器

</member>
        <member name="F:SysCarto.RasterFilter.m_bUse">
@brief 栅格过滤器是否可用

</member>
        <member name="F:SysCarto.RasterFilter.m_FilterType">
@brief 栅格过滤器类型

</member>
        <member name="F:SysCarto.RasterFilter.m_strDesc">
@brief 描述

</member>
        <member name="F:SysCarto.RasterFilter.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.RasterFilter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.RasterFilter.SetUsing(System.Boolean)">
@brief 设置栅格过滤器是否可用
@param [in]  bUse  是否可用
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.IsUsing">
@brief 获取栅格过滤器是否可用 
@return  bool 栅格过滤器是否可用

</member>
        <member name="M:SysCarto.RasterFilter.GetFilterType">
@brief 获取过滤器类型
@return  RasterFilterType 栅格过滤器类型

</member>
        <member name="M:SysCarto.RasterFilter.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置描述
@param [in]  strDesc  描述信息
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.GetDescription">
@brief 获取描述
@return  QString   描述

</member>
        <member name="M:SysCarto.RasterFilter.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名字
@param [in]  strName  名字
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.GetName">
@brief 获取名字
@return  QString   名字

</member>
        <member name="M:SysCarto.RasterFilter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.RasterFilter">
@class  RasterFilter
@brief  栅格过滤器

</member>
        <member name="T:SysCarto.RasterFilterType">
@class  RasterFilterType
@brief  栅格过滤器类型 枚举

</member>
        <member name="F:RasterFilterType_After">
@brief 后置

</member>
        <member name="F:RasterFilterType_Pre">
@brief 前置

</member>
        <member name="F:RasterFilterType_UnKnown">
@brief 未知类型

</member>
        <member name="T:SysCarto.RasterStretchType">
@class  RasterStretchType
@brief  栅格拉伸类型 枚举

</member>
        <member name="F:RasterStretch_Count">
@brief  数量

</member>
        <member name="F:RasterStretch_PercentMinimumMaximum">
@brief  最小最大百分比

</member>
        <member name="F:RasterStretch_HistogramSpecification">
@brief  直方图均衡化

</member>
        <member name="F:RasterStretch_MinimumMaximum">
@brief  最小最大值

</member>
        <member name="F:RasterStretch_HistogramEqualize">
@brief  直方图相等

</member>
        <member name="F:RasterStretch_StandardDeviations">
@brief  标准差拉伸

</member>
        <member name="F:RasterStretch_Custom">
@brief  自定义拉伸

</member>
        <member name="F:RasterStretch_DefaultFromSource">
@brief  默认从源数据

</member>
        <member name="F:RasterStretch_NONE">
@brief  无类型

</member>
        <member name="F:SysCarto.IRasterDisplayProps.NoDataColor">
@brief 无效数据颜色

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nInvertBrightness">
@brief 是否亮度反转

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nTransparent">
@brief 透明度

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nBrightness">
@brief 亮度

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nContrast">
@brief 对比度

</member>
        <member name="T:SysCarto.IRasterDisplayProps">
@class IRasterDisplayProps
@brief  栅格显示支持

</member>
        <member name="T:SysCarto.RasterResamplingType">
@class  RasterResamplingType
@brief  栅格重采样类型  枚举

</member>
        <member name="F:RSP_BilinearGaussBlurPlus">
@brief 通过双线性高斯模糊增强法重采样

</member>
        <member name="F:RSP_BilinearGaussBlur">
@brief 通过双线性高斯模糊法重采样

</member>
        <member name="F:RSP_BilinearInterpolationPlus">
@brief 通过双线性内插增强法重采样

</member>
        <member name="F:RSP_Majority">
@brief 通过多值法重采样

</member>
        <member name="F:RSP_CubicConvolution">
@brief 通过立方卷积法重采样

</member>
        <member name="F:RSP_BilinearInterpolation">
@brief 通过双线性内插法重采样

</member>
        <member name="F:RSP_NearestNeighbor">
@brief 通过邻近值法重采样

</member>
        <member name="D:SysDataSource.RasterDatasetPtr">
@brief 栅格数据集 智能指针

</member>
        <member name="F:SysDataSource.RasterDataset.m_ptrEnvelope">
@brief  包络线对象

</member>
        <member name="F:SysDataSource.RasterDataset.m_strGCPProj">
@brief  控制点项目

</member>
        <member name="F:SysDataSource.RasterDataset.m_nGCPCount">
@brief  控制点数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGCPs">
@brief  控制点数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_nBandCount">
@brief  波段数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterHeight">
@brief  栅格高度

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterWidth">
@brief  栅格宽度

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoInvTransform">
@brief  反向纺射变换参数数组   ----

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoTransform">
@brief  纺射变换参数数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_vecRasterBandPtr">
@brief  栅格波段集合

</member>
        <member name="M:SysDataSource.RasterDataset.GetBandCount">
@brief 获取波段数
@return  int 波段数

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterYSize">
@brief 获取栅格高度
@return int 栅格高度

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterXSize">
@brief 获取栅格宽度
@return int 栅格宽度

</member>
        <member name="M:SysDataSource.RasterDataset.SetGeoTransform(System.Double*)">
@brief 设置纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetGeoTransform(System.Double*)">
@brief 获取纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.AddRasterBand(SysUtility._ptr_t&lt;SysDataSource.RasterBand&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加波段
@param  [in] rasterBand 栅格波段
@return bool 是否成功 

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterBand(System.Int32)">
@brief 获取波段类
@param [in] nIndex 波段索引号。从0开始
@return RasterBandPtr 波段类

</member>
        <member name="M:SysDataSource.RasterDataset.WriteHistInfo">
@brief 统计信息写入到.HistInfo.XML文件
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.CalculateHistInfo">
@brief 计算统计信息。重新计算
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.ReadHistInfo">
@brief 从.HistInfo.XML中读取统计信息
@return 是否读取成功

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPSpatialRef(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取控制点的投影
@param[out] strProj 控制点的投影WKT字符串
@return void 

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPs">
@brief 获取控制点数组
@return const GDAL_GCP*  控制点数组

</member>
        <member name="M:SysDataSource.RasterDataset.WorldToPixel_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 地理坐标转为栅格坐标
@param [in] dblX 地理坐标x
@param [in] dblY 地理坐标y
@param [in] lCol 栅格坐标x
@param [in] lRow 栅格坐标y
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.PixelToWorld_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 栅格坐标转地理坐标
@param [in] lCol 栅格坐标
@param [in] lRow 栅格坐标
@param [in] dblX 地理坐标
@param [in] dblY 地理坐标
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPCount">
@brief  获取控制点的个数
@return 控制点的个数

</member>
        <member name="M:SysDataSource.RasterDataset.GetPyramidLevel">
@brief 返回金字塔层数
@return int 返回金字塔层数，如果没有金字塔则返回0

</member>
        <member name="M:SysDataSource.RasterDataset.BuildPyramid(System.Single,SysDataSource.DadaSampleType,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 建立金字塔
@param[in] float fSampleRate 重采样比率
@param[in] DadaSampleType sample_type 采样方式："NEAREST", "AVERAGE" or "MODE"等
@param[in] ProgressFunc pProgressFunc 进度回调函数
@param[in] void* pProgressArg 进度回调函数参数
@return bool 若创建成功则返回true，否则为false

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 读取数据，保存在PixelBuffer中
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] bandMap 波段映射集合
@return SysDataSource::PixelBufferPtr  图片渲染缓冲对象

</member>
        <member name="M:SysDataSource.RasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入的宽度
@param [in] nHei 写入的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] eBufType 写入类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 目标宽度
@param [in] nBufYSize 目标高度
@param [in] eBufType 读取类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.UseRPC(System.Boolean)">
@brief 是否使用RPC
@param [in] bUse 是否使用RPC 
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.IsUsingRPC">
@brief 是否使用RPC投影
@return bool 是否使用

</member>
        <member name="M:SysDataSource.RasterDataset.UseRasterCoords">
@brief 设置为使用栅格坐标
@return  void

</member>
        <member name="M:SysDataSource.RasterDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 打开模式
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterDataset.#ctor">
@brief 构造函数

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrHistogram">
@brief 直方图对象

</member>
        <member name="F:SysDataSource.RasterBand.m_nBandID">
@brief 波段的ID编号  从1开始

</member>
        <member name="F:SysDataSource.RasterBand.m_bHaveNoDataValue">
@brief 是否具有波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_dNodataValue">
@brief 波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeY">
@brief 数据存储分块的高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeX">
@brief 数据存储分块的宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeY">
@brief 波段高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeX">
@brief 波段宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_ePixelDataType">
@brief 波段数据类型

</member>
        <member name="F:SysDataSource.RasterBand.m_vecCategoryName">
@brief 分类信息

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrColorTable">
@brief 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.ComputerHistogram">
@brief 统计直方图信息
@return void 

</member>
        <member name="M:SysDataSource.RasterBand.GetBandID">
@brief  获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
@return int 当前波段在数据集中的序号

</member>
        <member name="M:SysDataSource.RasterBand.GetYSize">
@brief  获取波段高度
@return int 高度

</member>
        <member name="M:SysDataSource.RasterBand.GetXSize">
@brief  获取波段宽度
@return int 宽度

</member>
        <member name="M:SysDataSource.RasterBand.GetRasterDataType">
@brief  获取波段数据类型
@return PixelDataType 波段数据类型

</member>
        <member name="M:SysDataSource.RasterBand.SetHistogramInfo(SysUtility._ptr_t&lt;SysDataSource.StatsHistogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置直方图信息
@param[in] ptrHistogram 直方图对象
@return void

</member>
        <member name="M:SysDataSource.RasterBand.IsHistogramInfoCalculated">
@brief  是否计算直方图信息
@return bool  是 true，否 false 

</member>
        <member name="M:SysDataSource.RasterBand.GetHistogramInfo">
@brief  获取直方图信息
@return StatsHistogramPtr  直方图对象 

</member>
        <member name="M:SysDataSource.RasterBand.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterBand.SetColorTable(SysUtility._ptr_t&lt;SysDataSource.ColorTable&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置颜色表信息
@param[in] ColorTablePtr ptrColorTable 颜色表信息
@return void

</member>
        <member name="M:SysDataSource.RasterBand.GetColorTable">
@brief  获取颜色表信息
@return ColorTablePtr 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.SetNoDataValue(System.Double)">
@brief 设置当前波段中的无效数据值
@param[in] double 当前波段的无效值
@return void

</member>
        <member name="M:SysDataSource.RasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入宽度
@param [in] nHei 写入高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 写入数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距  ---
@return

</member>
        <member name="M:SysDataSource.RasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取宽度
@param [in] nHei 读取高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 读取数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterBand.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterBand.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.RasterBand">
@brief 类的前置声明 和 智能指针定义


@class RasterBand
	* @brief 栅格波段类

</member>
        <member name="T:SysDataSource.RasterDataset">
@brief 类的前置声明 和 智能指针定义


@class RasterDataset
	* @brief  栅格数据集


@brief  类的前置声明 和智能指针定义

</member>
        <member name="D:SysDataSource.StatsHistogramPtr">
@brief 直方图对象类 智能指针

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStep">
@brief 梯度

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMax">
@brief ENVI方式%拉伸的对应范围最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMin">
@brief ENVI方式%拉伸的对应范围最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_iMatchBandIndex">
@brief 匹配的波段序号

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bStats">
@brief 是否具有统计信息

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bHistogram">
@brief 是否有直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppOutStatsHistogram">
@brief 输出直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppHistogram">
@brief 直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMax">
@brief 直方图最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMin">
@brief 直方图最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStdDev">
@brief 方差

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMean">
@brief 均值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMax">
@brief 统计最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMin">
@brief 统计最小值

</member>
        <member name="M:SysDataSource.StatsHistogram.GetStep">
@brief 获取梯度
@return  double 梯度

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStep(System.Double)">
@brief 设置梯度
@param [in] dStep 梯度
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetLinearStretch(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取线性拉伸参数
@param [in out] dStretchMin 拉伸最小值
@param [in out] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetLinearStretch(System.Double,System.Double)">
@brief 设置线性拉伸参数
@param [in] dStretchMin 拉伸最小值
@param [in] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetMatchBandIndex(System.Int32)">
@brief 设置匹配的波段索引
@param [in] iBandIndex 波段索引
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetMatchBandIndex">
@brief 获取匹配的波段索引
@return  int 波段索引

</member>
        <member name="M:SysDataSource.StatsHistogram.GetOutStatsHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取输出直方图
@param [in out] ppdHistogram 直方图信息 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram">
@brief 获取直方图信息
@return  double**  直方图信息

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图 
@param [in out] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetOutStatsHistogram(System.Double**)">
@brief 设置输出直方图信息 
@param [in out] ppdHistogram   直方图信息
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogram(System.Double**)">
@brief 设置直方图信息 
@param [in] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Update">
@brief 刷新直方图(重新赋值后均需调Update)
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryStats(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取统计信息
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@param [in out] dMean   均值 
@param [in out] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryHistogramMinmax(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图最小最大值
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogramMinMax(System.Double,System.Double)">
@brief 设置直方图最小最大值
@param [in] dMin    最小值
@param [in] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStats(System.Double,System.Double,System.Double,System.Double)">
@brief 设置统计信息 
@param [in] dMin    最小值 
@param [in] dMax    最大值 
@param [in] dMean   均值 
@param [in] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.HasStats">
@brief 判断StatsHistogram类是否具有统计信息 
@return  bool 是否具有统计信息

</member>
        <member name="M:SysDataSource.StatsHistogram.HasHistogram">
@brief 判断StatsHistogram类是否具有直方图 
@return  bool 是否具有直方图

</member>
        <member name="M:SysDataSource.StatsHistogram.Empty">
@brief 清空直方图信息使其失效
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Accumulate(System.Double,System.Int32)">
@brief 赋于直方图dValue值的个数 
@param [in] dValue 值
@param [in] nCount 统计个数
@return  void 

</member>
        <member name="M:SysDataSource.StatsHistogram.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.StatsHistogram.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.StatsHistogram">
@class StatsHistogram
	* @brief  直方图对象类

</member>
        <member name="D:SysDataSource.PixelBufferPtr">
@brief 图片渲染缓冲类 智能指针

</member>
        <member name="F:SysDataSource.PixelBuffer.m_ePixelDataType">
@brief 图片渲染数据类型

</member>
        <member name="F:SysDataSource.PixelBuffer.m_vecBandMap">
@brief 地图波段BandMap集合

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nHei">
@brief 高度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nWid">
@brief 宽度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_pData">
@brief  数据指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetHeight">
@brief 获取高
@return int 高度

</member>
        <member name="M:SysDataSource.PixelBuffer.GetWidth">
@brief 获取宽
@return int 宽度

</member>
        <member name="M:SysDataSource.PixelBuffer.SetData(SysDataSource.PixelDataType,System.Void*)">
@brief 设置数据指针
@param [in] eType 图片渲染数据类型
@param [in] pData 数据
@return

</member>
        <member name="M:SysDataSource.PixelBuffer.GetData">
@brief 获取数据指针
@return void* 数据内存指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetDataType">
@brief 获取类型
@return PixelDataType 类型

</member>
        <member name="M:SysDataSource.PixelBuffer.GetBandMap">
@brief 获取BandMap
@return 地图波段BandMap的集合

</member>
        <member name="M:SysDataSource.PixelBuffer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType,System.Void*)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型
@param [in] pData 数据

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型

</member>
        <member name="T:SysDataSource.PixelBuffer">
@class  PixelBuffer 
@brief  图片渲染缓冲类

</member>
        <member name="F:SysDataSource.ColorTable.m_vecColorEntry">
@brief 颜色表项集合

</member>
        <member name="M:SysDataSource.ColorTable.Clone">
@brief 克隆
@return ColorTablePtr  克隆对象

</member>
        <member name="M:SysDataSource.ColorTable.ClearColorEntry">
@brief  清空颜色表
@return void

</member>
        <member name="M:SysDataSource.ColorTable.AddColorEntry(SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加颜色表项
@param [in] ptrColorEntry 颜色表项
@return void

</member>
        <member name="M:SysDataSource.ColorTable.SetColorEntry(System.Int32,SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色表项
@param [in] nIndex 颜色表项编号
@param [in] ptrColorEntry 颜色表项
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntry(System.Int32)">
@brief 获取颜色表项
@param [in] nIndex 颜色表项编号
@return ColorEntryPtr 颜色表项

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntryCount">
@brief 获取颜色表项个数
@return int 颜色表项个数

</member>
        <member name="M:SysDataSource.ColorTable.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorTable.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorTable">
@brief 类的前置声明和智能指针定义


@class ColorTable
	* @brief 颜色表ColorTable对象类

</member>
        <member name="M:SysDataSource.ColorEntry.Clone">
@brief 克隆
@return ColorEntryPtr 克隆对象

</member>
        <member name="M:SysDataSource.ColorEntry.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
@brief 有参构造函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorEntry">
@brief 类的前置声明和智能指针定义


@class ColorEntry
	* @brief 颜色表项ColorEntry对象类

</member>
        <member name="D:SysCarto.ActiveViewPtr">
@brief  活动视图 智能指针对象

</member>
        <member name="F:SysCarto.ActiveView.m_bZooming">
@brief  是否正在缩放，从滚轮第一次滚动开始，到屏幕范围内瓦片缓存准备完毕结束

</member>
        <member name="F:SysCarto.ActiveView.m_ptrZoomImgEnv">
@brief  缩放时图像范围

</member>
        <member name="F:SysCarto.ActiveView.m_pTempImage">
@brief  临时图片对象指针

</member>
        <member name="F:SysCarto.ActiveView.m_Image">
@brief  图片

</member>
        <member name="F:SysCarto.ActiveView.m_ptrTrackerCancel">
@brief  取消追踪

</member>
        <member name="F:SysCarto.ActiveView.m_bShowSelection">
@brief  是否显示选择

</member>
        <member name="F:SysCarto.ActiveView.m_ptrExtentStack">
@brief  范围栈

</member>
        <member name="F:SysCarto.ActiveView.m_ptrTempDisplayTrans">
@brief 临时信息转换

</member>
        <member name="F:SysCarto.ActiveView.m_ptrDisplayTrans">
@brief 显示转换

</member>
        <member name="F:SysCarto.ActiveView.m_ptrDefaultTempLayer">
@brief 临时制图

</member>
        <member name="F:SysCarto.ActiveView.m_ptrCurrLayer">
@brief 当前图层

</member>
        <member name="F:SysCarto.ActiveView.m_bActivate">
@brief 是否是激活的

</member>
        <member name="F:SysCarto.ActiveView.m_pPaintDevice">
@brief 绘图设备

</member>
        <member name="M:SysCarto.ActiveView.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.ActiveView.Output(SysUtility._ptr_t&lt;SysCarto.IExporter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief 输出
@param [in] exporter 导出标会
@param [in] nDpi 每英寸点数
@param [in] pixelBounds  像素点边界
@param [in] ptrVisBounds  包络范围
@param [in] ptrTracker 取消追踪
@return void

</member>
        <member name="M:SysCarto.ActiveView.PanTo(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 视图平移到以指定点未中心
@param [in] ptrPoint 点对象
@return void

</member>
        <member name="M:SysCarto.ActiveView.ZoomTo(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 视图缩放到几何对象范围
@param [in] ptrGeo 几何对象
@return void

</member>
        <member name="M:SysCarto.ActiveView.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.ActiveView.WaitForRenderFinished">
@brief 延时渲染完成
@return void

</member>
        <member name="M:SysCarto.ActiveView.StopRender">
@brief 停止渲染
@return void

</member>
        <member name="M:SysCarto.ActiveView.PanRefresh(System.Boolean)">
@brief 漫游刷新
@param [in] bForceActive  是否强制刷新
@return void

</member>
        <member name="M:SysCarto.ActiveView.Refresh(System.Boolean,System.Boolean)">
@brief 刷新
@param [in] bClearCache  是否清空缓存
@param [in] bFroceRefresh  是否强制刷新
@return  void

</member>
        <member name="M:SysCarto.ActiveView.PartialRefresh(SysCarto.ViewDrawPhaseType,System.Boolean)">
@brief 局部刷新
@param [in] dpType  视图刷新类型
@param [in] bForce  是否强制刷新
@return void

</member>
        <member name="M:SysCarto.ActiveView.DrawElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制元素
@param [in] ptrElemnt  元素对象
@return void

</member>
        <member name="M:SysCarto.ActiveView.DrawGeometry(SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制几何图形
@param [in] ptrSymbol  符号对象
@param [in] ptrGeo     几何对象
@return void

</member>
        <member name="M:SysCarto.ActiveView.ZoomAction(QPoint,System.Double,System.Double)">
@brief 缩放行为
@param [in] deltaX  X轴漫游大小
@param [in] deltaY  Y轴漫游大小
@return void

</member>
        <member name="M:SysCarto.ActiveView.PanAction(System.Double,System.Double)">
@brief  漫游行为
@param [in] deltaX  X轴漫游大小
@param [in] deltaY  Y轴漫游大小
@return void

</member>
        <member name="M:SysCarto.ActiveView.FinishDrawing">
@brief 完成绘制
@return void

</member>
        <member name="M:SysCarto.ActiveView.StartDrawing">
@brief 开始绘制
@return void

</member>
        <member name="M:SysCarto.ActiveView.ZoomByFactor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 通过因素缩放
@param [in]  ptrCenter  几何中心点
@param [in]   dScaleX    X轴方向缩放
@param [in]  dScaleY    Y轴方向缩放
@return void

</member>
        <member name="M:SysCarto.ActiveView.GetTrackerCancel">
@brief 获取取消追踪
@return  SysDisplay::DisplayTransformationPtr  显示转换

</member>
        <member name="M:SysCarto.ActiveView.SetShowSelection(System.Boolean)">
@brief 设置显示选择
@param [in]  bool bShow 是否设置
@return void

</member>
        <member name="M:SysCarto.ActiveView.IsShowSelection">
@brief 是否显示选择
@return bool 是否显示

</member>
        <member name="M:SysCarto.ActiveView.GetDisplayTransformation">
@brief 获取显示转换
@return  SysDisplay::DisplayTransformationPtr  显示转换

</member>
        <member name="M:SysCarto.ActiveView.SetCurrentLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置当前图层
@param [in]  ptrLayer 图层
@return void

</member>
        <member name="M:SysCarto.ActiveView.GetCurrentLayer">
@brief 获取当前图层
@return  LayerPtr  当前图层

</member>
        <member name="M:SysCarto.ActiveView.GetGraphicsContainer">
@brief 获取制图容器
@return  IGraphicsContainer*  制图容器

</member>
        <member name="M:SysCarto.ActiveView.GetDefaultTempLayer">
@brief 获取临时图层
@return  GraphicsLayerPtr  临时图层

</member>
        <member name="M:SysCarto.ActiveView.HitTestMap(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点击地图测试
@param [in]  point 几何点
@return MapPtr 地图

</member>
        <member name="M:SysCarto.ActiveView.SetFocusMap(SysUtility._ptr_t&lt;SysCarto.Map&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置焦点地图
@param [in]  ptrMap 地图
@return void

</member>
        <member name="M:SysCarto.ActiveView.GetFocusMap">
@brief 获取焦点地图
@return  MapPtr  地图

</member>
        <member name="M:SysCarto.ActiveView.GetExtentStack">
@brief 获取范围栈
@return  ExtentStackPtr  范围栈

</member>
        <member name="M:SysCarto.ActiveView.SetFullExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地图范围
@param [in]  SysGeometry::EnvelopePtr ptrEnv 地图范围
@return void

</member>
        <member name="M:SysCarto.ActiveView.GetFullExtent">
@brief 获取地图范围
@return  SysGeometry::EnvelopePtr  地图范围

</member>
        <member name="M:SysCarto.ActiveView.SetExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置范围
@param [in] SysGeometry::EnvelopePtr  范围
@return void 

</member>
        <member name="M:SysCarto.ActiveView.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr  范围

</member>
        <member name="M:SysCarto.ActiveView.GetExportFrame">
@brief 获取输出框架
@return QRect 矩形框

</member>
        <member name="M:SysCarto.ActiveView.IsActived">
@brief 视图是否激活状态
@return bool 是否为激活状态

</member>
        <member name="M:SysCarto.ActiveView.DeActivate">
@brief 取消视图激活状态
@return void

</member>
        <member name="M:SysCarto.ActiveView.Activate(QPaintDevice*)">
@brief 激活视图
@param [in] pDevice 视图绘制设备对象
@return  void

</member>
        <member name="M:SysCarto.ActiveView.Dispose">
@brief 析构函数

</member>
        <member name="D:SysCarto.IExporterPtr">
@brief  输出接口 智能指针对象

</member>
        <member name="F:SysCarto.IExporter.m_ptrTracker">
@brief  取消追踪

</member>
        <member name="F:SysCarto.IExporter.m_BGColor">
@brief  背景颜色

</member>
        <member name="F:SysCarto.IExporter.m_nHeight">
@brief  高度

</member>
        <member name="F:SysCarto.IExporter.m_nWidth">
@brief  宽度

</member>
        <member name="F:SysCarto.IExporter.m_dpi">
@brief  每英寸点数

</member>
        <member name="M:SysCarto.IExporter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.IExporter.FinishExporting">
@brief 完成导出
@return void

</member>
        <member name="M:SysCarto.IExporter.StartExporting">
@brief 开始导出
@return void

</member>
        <member name="M:SysCarto.IExporter.SetTrackerCancel(SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置取消追踪
@param [in] ptrTracker  取消追踪
@return void

</member>
        <member name="M:SysCarto.IExporter.GetTrackerCancel">
@brief 获取取消追踪
@return   SysUI::TrackerCancelPtr  取消追踪

</member>
        <member name="M:SysCarto.IExporter.GetDevice">
@brief 获取绘图设备
@return   QPaintDevice*  绘图设备

</member>
        <member name="M:SysCarto.IExporter.SetBackgroundColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置背景颜色
@param [in] color  背景颜色
@return void

</member>
        <member name="M:SysCarto.IExporter.GetBackgroundColor">
@brief 获取背景颜色
@return  QColor  背景颜色

</member>
        <member name="M:SysCarto.IExporter.SetHeight(System.Int32)">
@brief 设置高度
@param [in] nHeight  高度
@return void

</member>
        <member name="M:SysCarto.IExporter.GetHeight">
@brief 获取高度
@return  int  获取高度

</member>
        <member name="M:SysCarto.IExporter.SetWidth(System.Int32)">
@brief 设置宽度
@param [in] nWidth  宽度
@return void

</member>
        <member name="M:SysCarto.IExporter.GetWidth">
@brief 获取宽度
@return  int  获取宽度

</member>
        <member name="M:SysCarto.IExporter.SetDpi(System.Double)">
@brief 设置dpi（ 每英寸点数）
@param [in] dpi  每英寸点数
@return void

</member>
        <member name="M:SysCarto.IExporter.GetDpi">
@brief 获取dpi（ 每英寸点数）
@return double  输出文件名字

</member>
        <member name="M:SysCarto.IExporter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IExporter">
@class IExporter
@brief  输出接口

</member>
        <member name="F:SysCarto.IActiveViewEvents.NotifyUpdate">
@brief 通知更新信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.CurrentLayerChanged">
@brief 当前图层改变信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeforeCurrentLayerChanging">
@brief 当前图层改变之前信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.AfterDraw">
@brief 绘制之后信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeginDraw">
@brief 开始绘制信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.ViewRefreshed">
@brief 视图刷新信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.SpatialReferenceChanged">
@brief 空间参考改变信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.FeaturesSelectionChanged">
@brief 选中要素集改变 信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.ContentsCleared">
@brief 内容清空信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.ContentsChanged">
@brief 内容改变信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.FocusMapChanged">
@brief 焦点地图改变信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.LayersDeleted">
@brief 删除图层集信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.LayersAdded">
@brief 添加图层集信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.LayerReordered">
@brief 图层重构信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.LayerDeleted">
@brief 删除图层信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.LayerAdded">
@brief 添加图层信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeforeLayersDeleting">
@brief 删除图层集之前的信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeforeLayersAdding">
@brief 添加图层集之前的信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeforeLayerDeleting">
@brief 删除图层之前的信号

</member>
        <member name="F:SysCarto.IActiveViewEvents.BeforeLayerAdding">
@brief 添加图层之前的信号

</member>
        <member name="T:SysCarto.IActiveViewEvents.ActiveView">
@brief 类的前置声明和智能指针定义

</member>
        <member name="T:SysCarto.IActiveViewEvents">
@class IActiveViewEvents
@brief 活动视图事件

</member>
        <member name="T:SysCarto.ViewDrawPhaseType">
@class  ViewDrawPhaseType
@brief  视图绘制相应类型  枚举

</member>
        <member name="F:ViewAll">
@brief  所有视图

</member>
        <member name="F:ViewInitialized">
@brief  初始化

</member>
        <member name="F:ViewForeground">
@brief  前景

</member>
        <member name="F:ViewGraphicSelection">
@brief  制图选择

</member>
        <member name="F:ViewGraphics">
@brief  制图

</member>
        <member name="F:ViewGeoSelection">
@brief  地理选择

</member>
        <member name="F:ViewGeography">
@brief  地理

</member>
        <member name="F:ViewBackground">
@brief  背景

</member>
        <member name="F:ViewNone">
@brief  无

</member>
        <member name="D:SysCarto.GraphicsLayerPtr">
@brief   图形图层  智能指针对象

</member>
        <member name="M:SysCarto.GraphicsLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.GraphicsLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.GraphicsLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] dpType  类型
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.GraphicsLayer.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysCarto.GraphicsLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.GraphicsLayer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.GraphicsLayer">
@class GraphicsLayer
	* @brief  图形图层

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_ptrNodeEditElem">
@brief  当前编辑的元素

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_lstSelIDs">
@brief  ID集合

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_vecElems">
@brief 元素集合

</member>
        <member name="M:SysCarto.IGraphicsContainer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SendToBack(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 向后一层 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SendBackward(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 低端显示 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.BringToFront(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 顶端显示 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.BringForward(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 向前一层 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UpdateElement(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新Element
@param [in]  strID ID标号
@param [in]  ptrNewElem 新元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SetNodeEditElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置当前编辑的Element 
@param [in]  ptrElem 元素
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.GetNodeEditElement">
@brief 获得当前编辑的Element 
@return  ElementPtr 元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.FindElementByName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过name查找Element
@param [in]  strName 名称
@return  ElementPtr 元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.FindElementByID(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过ID查找Element 
@param [in]  strID ID编号
@return  ElementPtr 元素 

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 反向选择Elements
@param [in] listElems 元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 反向选择Element 
@param [in] ptrElem 元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectAllElements">
@brief 取消所有Element的选择 
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectionBounds">
@brief 获取选中的边界
@return  SysGeometry::EnvelopePtr  选中的边界

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElementsByGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
@brief 通过几何范围选择元素
@param [in] ptrFilterGeo 几何范围
@param [in] clearSrc 是否清除之前选择 
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获得所有选中的元素
@param [in] listElems 元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获得选中的元素
@param [in] ptrElem 元素
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectedElement(System.Int32)">
@brief 获得选中的元素
@param [in] index 索引编号 
@return  ElementPtr 选中的元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectAllElements">
@brief 选中所有元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.ElementSelectionCount">
@brief 获得选中元素数量
@return  int  选中元素数量

</member>
        <member name="M:SysCarto.IGraphicsContainer.IsElementSelected(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 元素是否选中
@param [in] ptrElem 元素对象
@return  bool 是否选中

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteAllElements">
@brief 删除所有的元素
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteElement(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] strID 元素ID
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] ptrElement 元素
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.InsertElement(System.Int32,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入元素到容器
@param [in] ptrElement 元素对象
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.AddElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素集到容器
@param [in] vecElems 元素对象集合
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.AddElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素到容器
@param [in] ptrElement 元素对象
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.GetElementCount">
@brief 获取元素数量
@return  int 元素数量

</member>
        <member name="M:SysCarto.IGraphicsContainer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IGraphicsContainer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.ElementOrderOperation">
@brief 声明友元类

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsReordered">
@brief 元素集重排序信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementUpdated">
@brief 更新元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.AllElementsDeleted">
@brief 删除所有元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsDeleted">
@brief 删除元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementDeleted">
@brief 删除元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsAdded">
@brief 添加元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementAdded">
@brief 添加元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsSelectionChanged">
@brief 选中元素集变化信号

</member>
        <member name="T:SysCarto.IGraphicsContainerEvents">
@class IGraphicsContainerEvents
@brief 图元容器事件接口

</member>
        <member name="D:SysCarto.ExtentStackPtr">
@brief 范围栈 智能指针对象

</member>
        <member name="F:SysCarto.ExtentStack.m_listEnvs">
@brief  范围栈

</member>
        <member name="F:SysCarto.ExtentStack.m_pActiveView">
@brief 活跃视图

</member>
        <member name="F:SysCarto.ExtentStack.m_nCurrIndex">
@brief 当前索引

</member>
        <member name="M:SysCarto.ExtentStack.ResetExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 重置范围
@param [in] ptrEnv 包络线范围
@return void

</member>
        <member name="M:SysCarto.ExtentStack.Reset">
@brief 重置
@return void

</member>
        <member name="M:SysCarto.ExtentStack.Undo">
@brief 撤销重做
@return void

</member>
        <member name="M:SysCarto.ExtentStack.Redo">
@brief 重做
@return void

</member>
        <member name="M:SysCarto.ExtentStack.GetItem(System.Int32)">
@brief 获取条目
@param [in] index 索引
@return SysGeometry::EnvelopePtr  包络线对象

</member>
        <member name="M:SysCarto.ExtentStack.Do(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 执行
@param [in] ptrEnv 包络线对象
@return void

</member>
        <member name="M:SysCarto.ExtentStack.Count">
@brief 获取数量
@return int 数量

</member>
        <member name="M:SysCarto.ExtentStack.CanUndo">
@brief 是否撤销
@return bool 是否成功

</member>
        <member name="M:SysCarto.ExtentStack.CanRedo">
@brief 是否重做
@return bool 是否成功

</member>
        <member name="M:SysCarto.ExtentStack.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.ExtentStack.#ctor(SysCarto.ActiveView*)">
@brief 构造函数
@param [in] pActiveView 活动视图

</member>
        <member name="T:SysCarto.ExtentStack">
@class ExtentStack
@brief  范围栈

</member>
        <member name="T:SysCarto.ActiveView">
@brief 类的前置声明


@class ActiveView
@brief  活动视图

</member>
        <member name="D:SysCarto.MultiLayerPtr">
@brief  多图层  智能指针对象

</member>
        <member name="F:SysCarto.MultiLayer.m_ptrDataset">
@brief 多数据集

</member>
        <member name="F:SysCarto.MultiLayer.m_bExpanded">
@brief 是否展开

</member>
        <member name="F:SysCarto.MultiLayer.m_vecLayers">
@brief 图层集合

</member>
        <member name="M:SysCarto.MultiLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param[in] Layer* Layer对象

</member>
        <member name="M:SysCarto.MultiLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTransform 显示转换对象
@param [in] dpType 图层绘制阶段类型
@param [in] ptrTrackerCancel 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.MultiLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.MultiLayer.Clear">
@brief 清空图层
@return void

</member>
        <member name="M:SysCarto.MultiLayer.SetExpanded(System.Boolean)">
@brief 设置是否展开图层
@param [in] bExpanded  是否展开
@return void

</member>
        <member name="M:SysCarto.MultiLayer.GetExpanded">
@brief 获取是否展开图层 
@return  bool  是否成功

</member>
        <member name="M:SysCarto.MultiLayer.GetLayerCount">
@brief 获取图层数量
@return  int  图层数量

</member>
        <member name="M:SysCarto.MultiLayer.GetLayer(System.Int32)">
@brief 获取图层
@param [in] index    索引
@return  LayerPtr    图层

</member>
        <member name="M:SysCarto.MultiLayer.MoveLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 移动图层
@param [in] ptrLayer 图层
@param [in] index    索引
@return void

</member>
        <member name="M:SysCarto.MultiLayer.Delete(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除图层
@param [in] ptrLayer 图层
@return bool 是否成功

</member>
        <member name="M:SysCarto.MultiLayer.DeleteLayer(System.Int32)">
@brief 删除图层
@param [in] index    索引
@return void

</member>
        <member name="M:SysCarto.MultiLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 添加图层
@param [in] ptrLayer 图层
@param [in] index    索引
@return void

</member>
        <member name="M:SysCarto.MultiLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加图层
@param [in] ptrLayer 图层
@return void

</member>
        <member name="M:SysCarto.MultiLayer.SetDataset(SysUtility._ptr_t&lt;SysDataSource.MultiDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置数据集
@param [in] ptrDataset 多数据集
@return void

</member>
        <member name="M:SysCarto.MultiLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.MultiLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.MultiLayer.#ctor">
@brief 构造函数

</member>
        <member name="D:SysDataSource.MultiDatasetPtr">
@brief 多数据集 智能指针

</member>
        <member name="F:SysDataSource.MultiDataset.m_vecDataset">
@brief 数据集集合

</member>
        <member name="M:SysDataSource.MultiDataset.DeleteDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除数据集
@param [in] strName 数据集名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.MultiDataset.DeleteDataset(System.Int32)">
@brief 删除数据集
@param [in] nIndex 数据集索引号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.MultiDataset.GetDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据名称查找数据集
@param [in] strName 名称
@return  SysDataSource::DatasetPtr 数据集

</member>
        <member name="M:SysDataSource.MultiDataset.GetDataset(System.Int32)">
@brief 根据索引查找数据集
@param [in] nIndex  索引
@return  SysDataSource::DatasetPtr 数据集

</member>
        <member name="M:SysDataSource.MultiDataset.GetDatasetCount">
@brief 获取数据集个数
@return int 数据集个数

</member>
        <member name="M:SysDataSource.MultiDataset.AddDataset(SysUtility._ptr_t&lt;SysDataSource.Dataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加数据集
@param [in] ptrDatset  数据集
@return void

</member>
        <member name="M:SysDataSource.MultiDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 打开
@param [in] strPath 
@return 

</member>
        <member name="M:SysDataSource.MultiDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.MultiDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.MultiDataset">
@class MultiDataset
	* @brief 多数据集

</member>
        <member name="D:SysCarto.GroupLayerPtr">
@brief   组图层  智能指针对象

</member>
        <member name="F:SysCarto.GroupLayer.m_bExpanded">
@brief 是否展开

</member>
        <member name="F:SysCarto.GroupLayer.m_vecLayers">
@brief 图层集合

</member>
        <member name="M:SysCarto.GroupLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.GroupLayer.Refresh">
@brief 刷新
@return void

</member>
        <member name="M:SysCarto.GroupLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.GroupLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType    类型
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.GroupLayer.Clear">
@brief  清空
@return void

</member>
        <member name="M:SysCarto.GroupLayer.SetExpanded(System.Boolean)">
@brief  设置是否展开图层 
@param  [in] bExpanded  是否展开
@return void

</member>
        <member name="M:SysCarto.GroupLayer.GetExpanded">
@brief  获取是否展开图层 
@return bool 是 true,否 false

</member>
        <member name="M:SysCarto.GroupLayer.GetLayer(System.Int32)">
@brief  获取图层
@param  [in] toIndex   图层索引
@return LayerPtr  图层

</member>
        <member name="M:SysCarto.GroupLayer.GetLayerCount">
@brief  获取图层数量
@return int 图层数量

</member>
        <member name="M:SysCarto.GroupLayer.MoveLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  移动图层
@param  [in] ptrLayer  图层对象
@param  [in] toIndex   图层索引
@return void

</member>
        <member name="M:SysCarto.GroupLayer.Delete(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  删除图层
@param [in] ptrLayer  图层对象
@return void

</member>
        <member name="M:SysCarto.GroupLayer.DeleteLayer(System.Int32)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@param [in] index     索引编号
@return void

</member>
        <member name="M:SysCarto.GroupLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@param [in] index     索引编号
@return void

</member>
        <member name="M:SysCarto.GroupLayer.AddLayer(SysUtility._ptr_t&lt;SysCarto.Layer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加图层
@param [in] ptrLayer  图层对象
@return void

</member>
        <member name="M:SysCarto.GroupLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 包络线范围

</member>
        <member name="M:SysCarto.GroupLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.GroupLayer.#ctor">
@brief 构造函数

</member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.get_Symbol">
            <summary>
获取或设置图层注记文本
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.set_MinimumScale(System.Double)">
            <summary>
设置图层注记可见最小比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.get_MinimumScale">
            <summary>
获取图层注记可见最小比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.set_MaximumScale(System.Double)">
            <summary>
设置图层注记可见可见最大比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.get_MaximumScale">
            <summary>
获取图层注记可见可见最大比例尺
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.set_AnnoField(System.String)">
            <summary>
设置图层注记字段
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.get_AnnoField">
            <summary>
获取图层注记字段
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.set_FeatureLayer(PIE.Carto.IFeatureLayer)">
            <summary>
设置图层注记矢量图层
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.get_FeatureLayer">
            <summary>
获取图层注记矢量图层
</summary>
        </member>
        <member name="F:PIE.Carto.FeatureLayer.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.#ctor(SysUtility._ptr_t&lt;SysCarto.FeatureLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.Carto.FeatureLayer.m_FeatureClass">
            <summary>
数据集
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.DrawAnnotations(System.Drawing.Graphics,System.Collections.Generic.IList`1{PIE.Geometry.IPolygon}@,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制图层注记
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="polygon">面要素</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="trackerCancel">TrackerCancel</param>
            <summary>
绘制图层注记
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="polygon">面要素</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.RaiseRenderChanged">
            <summary>
增强渲染
</summary>
            <summary>
增强渲染
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.AnnoProperties">
            <summary>
获取或者设置图层注记属性
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.DisplayAnnotation">
            <summary>
获取或设置图层是否显示注记
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.Render">
            <summary>
获取或者设置矢量图层渲染
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.Selectable">
            <summary>
获取或设置图层是否选中
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.DisplayField">
            <summary>
获取或设置图层显示字段
</summary>
        </member>
        <member name="P:PIE.Carto.FeatureLayer.FeatureClass">
            <summary>
获取或者设置矢量数据集
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.FeatureLayer.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureLayer">
            <summary>
矢量图层类
</summary>
        </member>
        <member name="D:SysCarto.FeatureLayerPtr">
@brief 矢量图层 智能指针

</member>
        <member name="F:SysCarto.FeatureLayer.m_bAnnoDisplay">
@brief  是否显示注记变量

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrAnnoProps">
@brief  图层注记属性

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrRender">
@brief  矢量要素渲染

</member>
        <member name="F:SysCarto.FeatureLayer.m_strDisplayField">
@brief  显示字段

</member>
        <member name="F:SysCarto.FeatureLayer.m_bIsSelectable">
@brief  是否可以选择

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrFeatureClass">
@brief  矢量要素类

</member>
        <member name="M:SysCarto.FeatureLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.FeatureLayer.UnRegisterEvents">
@brief  移除注册事件
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.RegisterEvents">
@brief  注册事件
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.OnDataChanged(SysDataSource.Feature*,SysDataSource.Feature*)">
@brief  数据变化槽函数
@param [in] pFeatureOld  旧的要素
@param [in] pFeatureNew  新的要素
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPoint(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层点注记
@param [in] listElement  元素集合
@param [in] ptrPoint   点对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPolygon(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层面注记
@param [in] listElement  元素集合
@param [in] ptrPolygon   面对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPolyline(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Polyline&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层线注记
@param [in] listElement  元素集合
@param [in] ptrPolyline   线对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotation(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层注记
@param [in] listElement  元素集合
@param [in] ptrGeometry   几何对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.UpdateSelectionByType(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType)">
		* @brief  通过类型更新选择
	    * @param [in] lstFIDs  最后一次FID
		* @param [in] selType  选择结果类型
		* @return  void

</member>
        <member name="F:SysCarto.FeatureLayer.LabelProgressSignal">
@brief  标签进度信号

</member>
        <member name="M:SysCarto.FeatureLayer.GetAnnotationElements(QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  获取图层注记元素集
@param [in] listPolygon  多面类型集合
@param [in] listElement  元素集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void 

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotations(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层注记 
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void 

</member>
        <member name="M:SysCarto.FeatureLayer.GetSelectionFeatures">
@brief  获取选择要素集合
@return  要素集合

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType,System.Boolean)">
@brief  选择要素集
@param [in] ptrFilter  文件过滤器
@param [in] selType    选择结果类型
@param [in] bJustOne   是否仅仅是一个
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素集
@param [in] lstFeatures  要素ptrFeature集合
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素
@param [in] ptrFeature  要素ptrFeature
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素集
@param [in] lstFIDs  编号fid集合
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeature(System.Int64)">
@brief  选择要素 
@param [in] fid  编号fid
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.Refresh">
@brief   刷新

</member>
        <member name="M:SysCarto.FeatureLayer.SetAnnoProperties(SysUtility._ptr_t&lt;SysCarto.AnnotateLayerProperties&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置图层注记属性
@param [in] ptrAnnoProps 图层注记属性
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.GetAnnoProperties">
@brief   获取图层注记属性
@return  AnnotateLayerPropertiesPtr 图层注记属性

</member>
        <member name="M:SysCarto.FeatureLayer.SetDisplayAnnotation(System.Boolean)">
@brief  设置图层是否显示注记
@param [in] bDisplay 是否显示注记
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.IsDisplayAnnotation">
@brief  获取图层是否显示注记 
@return  bool 是否标记

</member>
        <member name="M:SysCarto.FeatureLayer.IsValid">
@brief 是否是有效图层
@return  bool 是否有效

</member>
        <member name="M:SysCarto.FeatureLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.FeatureLayer.RaiseRenderChanged">
@brief  增强渲染
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SetRender(SysUtility._ptr_t&lt;SysCarto.FeatureRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置渲染
@param [in] ptrRender  矢量要素渲染
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.GetRender">
@brief  获取渲染
@return 矢量要素渲染

</member>
        <member name="M:SysCarto.FeatureLayer.SetSelectable(System.Boolean)">
@brief  设置图层是否选中 
@param [in] bSel  是否选中
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.IsSelectable">
@brief  获取图层是否选中 
@return bool 是否选中 

</member>
        <member name="M:SysCarto.FeatureLayer.SetDisplayField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置图层显示字段
@param [in] strField  图层显示字段
@return void 

</member>
        <member name="M:SysCarto.FeatureLayer.GetDisplayField">
@brief  获取图层显示字段
@return QString 图层显示字段

</member>
        <member name="M:SysCarto.FeatureLayer.SetFeatureClass(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置矢量要素类
@param [in] ptrFClass  矢量要素类
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.GetFeatureClass">
@brief  获取矢量要素类
@return SysDataSource::FeatureClassPtr 矢量要素类

</member>
        <member name="M:SysCarto.FeatureLayer.GetExtent">
@brief  获取范围
@return SysGeometry::EnvelopePtr  范围

</member>
        <member name="M:SysCarto.FeatureLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureLayer.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.Element.m_bLocked">
@brief  是否加锁变量

</member>
        <member name="F:SysCarto.Element.m_bFixedSize">
@brief  是否按原比例大小变量

</member>
        <member name="F:SysCarto.Element.m_AnchorPoint">
@brief  锚点

</member>
        <member name="F:SysCarto.Element.m_bRatioed">
@brief  是否按纵横比缩放变量

</member>
        <member name="F:SysCarto.Element.m_CusomerProperty">
@brief  用户属性

</member>
        <member name="F:SysCarto.Element.m_ptrGeometry">
@brief  几何对象

</member>
        <member name="F:SysCarto.Element.m_ElementType">
@brief  元素类型

</member>
        <member name="F:SysCarto.Element.m_bVisible">
@brief  是否可视化变量

</member>
        <member name="F:SysCarto.Element.m_bCanRotate">
@brief  是否可以旋转变量

</member>
        <member name="F:SysCarto.Element.m_strName">
@brief  名称

</member>
        <member name="F:SysCarto.Element.m_strID">
@brief  ID

</member>
        <member name="M:SysCarto.Element.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Element.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.Element.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="M:SysCarto.Element.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.Element.GetAnchorPoint">
@brief 获取锚点
@return 

</member>
        <member name="M:SysCarto.Element.SetAnchorPoint(SysCarto.pieAnchorPointEnum)">
@brief 设置锚点
@param [in] pos 
@return 

</member>
        <member name="M:SysCarto.Element.SetLocked(System.Boolean)">
@brief 设置是否被锁定
@param [in] bLocked  是否被锁定
@return void

</member>
        <member name="M:SysCarto.Element.IsLocked">
@brief 是否被锁定。被锁定之后无法被选中。
@return bool 是否被锁定

</member>
        <member name="M:SysCarto.Element.GetFixedSize">
@brief 获取原比例大小
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.SetFixedAspectRatio(System.Boolean)">
@brief 设置是否按原比例缩放 
@param [in] bRatioed 是否设置
@return void 

</member>
        <member name="M:SysCarto.Element.GetFixedAspectRatio">
@brief 获取是否按原比例缩放 
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] PointPtr originPoint 参照点
@param [in] double sx x方向缩放
@param [in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] PointPtr originPoint 参照点
@param [in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Move(System.Double,System.Double)">
@brief 移动
@param [in] double dx x方向的偏移
@param [in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询边界
@param [in] ptrTrasform  显示转换对象
@return  SysGeometry::EnvelopePtr  包络线对象

</member>
        <member name="M:SysCarto.Element.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.Element.HitTest(System.Double,System.Double,System.Double)">
@brief 点击测试
@param [in]  x  X坐标值
@param [in]  y  Y坐标值
@param [in]  tolerance  偏差量
@return bool  是否成功

</member>
        <member name="M:SysCarto.Element.SetVisibility(System.Boolean)">
@brief  设置可见
@param [in] bVisible 是否设置可见
@return void

</member>
        <member name="M:SysCarto.Element.IsVisible">
@brief 是否可见
@return bool 是 true, 否 false

</member>
        <member name="M:SysCarto.Element.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysCarto.Element.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置几何类型
@param [in] ptrGeometry 几何类型
@return void

</member>
        <member name="M:SysCarto.Element.GetGeometry">
@brief 获取几何类型
@return SysGeometry::GeometryPtr  几何类型

</member>
        <member name="M:SysCarto.Element.SetCusomerProperty(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置用户属性
@param [in] prop 万能数据类型(QT内置数据类型）
@return void

</member>
        <member name="M:SysCarto.Element.GetCustomerProperty">
@brief 获取用户属性
@return QVariant 用户属性

</member>
        <member name="M:SysCarto.Element.CanRotate">
@brief 是否可以旋转
@return bool 是true,否 false

</member>
        <member name="M:SysCarto.Element.GetElementType">
@brief 获取元素类型
@return ElementType 元素类型

</member>
        <member name="M:SysCarto.Element.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in] name 名字
@return void

</member>
        <member name="M:SysCarto.Element.GetName">
@brief 获取名字
@return QString 名字

</member>
        <member name="M:SysCarto.Element.GetID">
@brief 获取ID
@return QString ID

</member>
        <member name="T:SysCarto.IGraphicsContainer">
@brief 声明友元类


@class IGraphicsContainer
@brief 图元容器接口

</member>
        <member name="T:SysCarto.Element">
@brief 类的前置声明和智能指针定义


@class Element
@brief 元素


@brief   类的前置声明和智能指针定义

</member>
        <member name="T:SysCarto.ElementType">
@class  ElementType
@brief  元素类型 枚举

</member>
        <member name="F:ElementScrew">
@brief 螺旋形

</member>
        <member name="F:ElementLineArrow">
@brief 线箭头

</member>
        <member name="F:ElementArrow">
@brief 箭头

</member>
        <member name="F:ElementCurve">
@brief 曲线

</member>
        <member name="F:ElementMapSurroundFrame">
@brief 圆

</member>
        <member name="F:ElementMapFrame">
@brief 地图框架

</member>
        <member name="F:ElementGroup">
@brief 组

</member>
        <member name="F:ElementText">
@brief 文本

</member>
        <member name="F:ElementFrame">
@brief 框架

</member>
        <member name="F:ElementPicture">
@brief 图片

</member>
        <member name="F:ElementRectangle">
@brief 矩形

</member>
        <member name="F:ElementCircle">
@brief 圆

</member>
        <member name="F:ElementEllipse">
@brief 椭圆

</member>
        <member name="F:ElementPolygon">
@brief 面

</member>
        <member name="F:ElementPolyline">
@brief 线

</member>
        <member name="F:ElementMarker">
@brief 点

</member>
        <member name="F:ElementUnknown">
@brief 无类型

</member>
        <member name="F:SysCarto.IFeatureSelection.m_selType">
@brief 选择结果类型枚举变量

</member>
        <member name="F:SysCarto.IFeatureSelection.m_lstSelIDs">
@brief 选中要素集合

</member>
        <member name="M:SysCarto.IFeatureSelection.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.IFeatureSelection.SelectionChanged">
@brief  信号

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素集集
@param [in] lstFeatures   要素集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSlectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素
@param [in] ptrFeature   要素
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素集
@param [in] lstFIDs   FID编号集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeature(System.Int64)">
@brief 取消选中要素
@param [in] fid   FID编号
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SetCombinationMethod(SysCarto.SelectionResultType)">
@brief   设置联合方法
@param [in]  selType   选择结果类型
@return  void 

</member>
        <member name="M:SysCarto.IFeatureSelection.GetCombinationMethod">
@brief   获取联合方法
@return  SelectionResultType   选择结果类型

</member>
        <member name="M:SysCarto.IFeatureSelection.ClearSelectionFeatures">
@brief 清除选中要素集
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectionFeatureCount">
@brief 选中要素数量
@return int

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType,System.Boolean)">
@brief 选中要素集
@param [in] ptrFilter  文件查询过滤器
@param [in] selType    选择结果类型
@param [in] bJustOne   仅仅是一个
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选中要素集
@param [in] lstFeatures  要素集集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选择要素
@param [in] ptrFeature  要素
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选择要素集
@param [in] lstFIDs  FID集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeature(System.Int64)">
@brief 选择要素
@param [in] fid  FID编号
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IFeatureSelection">
@class  IFeatureSelection
@brief  矢量选择器

</member>
        <member name="T:SysCarto.SelectionResultType">
@class  SelectionResultType
@brief  选择结果类型 枚举

</member>
        <member name="F:SelectionResultXOR">
@brief 选择结果求异或

</member>
        <member name="F:SelectionResultAnd">
@brief 选择结果求交集

</member>
        <member name="F:SelectionResultSubtract">
@brief 减少选择结果

</member>
        <member name="F:SelectionResultAdd">
@brief 添加选择结果

</member>
        <member name="F:SelectionResultNew">
@brief 新选择结果

</member>
        <member name="F:SysCarto.FeatureRender.m_Transparency">
@brief 透明度

</member>
        <member name="F:SysCarto.FeatureRender.m_Type">
@brief 要素渲染类型

</member>
        <member name="F:SysCarto.FeatureRender.m_bCanRender">
@brief 是否可以渲染变量

</member>
        <member name="M:SysCarto.FeatureRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureRender.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.FeatureRender.ProgressSignal">
@brief  进度条信号

</member>
        <member name="M:SysCarto.FeatureRender.GetProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 得到属性
@return QVariant 属性

</member>
        <member name="M:SysCarto.FeatureRender.SetProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置属性
@return QVariant 属性

</member>
        <member name="M:SysCarto.FeatureRender.Clone">
@brief 克隆
@return  FeatureRenderPtr 矢量渲染器对象

</member>
        <member name="M:SysCarto.FeatureRender.Draw(SysUtility._ptr_t&lt;SysDataSource.FeatureCursor&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制
@param [in] ptrFeatureCursor 要素游标
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return void                                             

</member>
        <member name="M:SysCarto.FeatureRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return 符号对象

</member>
        <member name="M:SysCarto.FeatureRender.SetTransparency(System.Int32)">
@brief 设置透明度百分比（0-100）
@param [in] transparency  透明度百分比（0-100）
@return void

</member>
        <member name="M:SysCarto.FeatureRender.GetTransparency">
@brief 获得透明度百分比（0-100）
@return int 透明度百分比（0-100）

</member>
        <member name="M:SysCarto.FeatureRender.GetType">
@brief   获得渲染类型
@return  FeatureRenderType  渲染类型

</member>
        <member name="M:SysCarto.FeatureRender.CanRender">
@brief 是否可使用此渲染器进行渲染
@return bool 是 true,否 false

</member>
        <member name="T:SysCarto.FeatureRenderSerializer">
@brief  声明矢量要素序列化渲染类为当前类的友元类


@brief  声明矢量要素序列化渲染类为当前类的友元类


@brief  声明矢量要素序列化渲染类为当前类的友元类


@brief  声明矢量要素序列化渲染类为当前类的友元类

</member>
        <member name="T:SysCarto.FeatureRender">
@brief 类的前置声明和智能指针定义


@class FeatureRender
@brief 矢量渲染器基类

</member>
        <member name="T:SysCarto.FeatureRenderType">
@class FeatureRenderType
@brief 矢量渲染器 枚举类型

</member>
        <member name="F:FRT_MixedSimpleSymbolRender">
@brief 混合简单符号渲染

</member>
        <member name="F:FRT_ChartRender">
@brief Chart渲染

</member>
        <member name="F:FRT_BreaksRender">
@brief 分级渲染

</member>
        <member name="F:FRT_UniqueValueRender">
@brief 唯一值渲染

</member>
        <member name="F:FRT_SimpleSymbolRender">
@brief 简单符号渲染

</member>
        <member name="F:FRT_Unknown">
@brief 未知渲染类型

</member>
        <member name="D:SysDataSource.FeatureClassPtr">
@brief 要素类 智能指针

</member>
        <member name="F:SysDataSource.FeatureClass.m_pConnectString">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_nSubDatasetIndex">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_mutexEdit">
@brief  互斥锁

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrExtent">
@brief  Envelope包络范围对象

</member>
        <member name="F:SysDataSource.FeatureClass.m_mapFeatureEdit">
@brief  要素编辑集合

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrFeatureDataset">
@brief  要素数据集

</member>
        <member name="F:SysDataSource.FeatureClass.m_nFeatureCount">
@brief  要素数量

</member>
        <member name="F:SysDataSource.FeatureClass.m_listFid">
@brief  编号FID集合

</member>
        <member name="M:SysDataSource.FeatureClass.GetPolygonFromEllipse(SysUtility._ptr_t&lt;SysGeometry.Ellipse&gt;)">
@brief 从椭圆中获取面对像
@param [in] ptrEllipse 椭圆对象
@return SysGeometry::PolygonPtr 面对像

</member>
        <member name="M:SysDataSource.FeatureClass.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 重置要素读取位置
@return void

@brief 设置查询过滤
@param [in] ptrFilter 查询过滤
@return void

@brief 是否是有效的要素
@param [in] ptrFeature 要素对象
@return bool 是否有效

</member>
        <member name="M:SysDataSource.FeatureClass.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 修改空间参考
@param [in] ptrSpatialRef 空间参考
@return 

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID  编号FID
@return FeaturePtr  要素

</member>
        <member name="M:SysDataSource.FeatureClass.Search(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查找
@param [in] ptrFilter 查询过滤
@return FeatureCursorPtr  要素游标

</member>
        <member name="M:SysDataSource.FeatureClass.IsBeingEdited">
@brief 数据是否已经被编辑过
@return  bool  是否已经被编辑过

</member>
        <member name="M:SysDataSource.FeatureClass.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 创建的要素对象

</member>
        <member name="M:SysDataSource.FeatureClass.AbortEdit">
**
**
@brief 退出编辑
@return void 

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFields">
@brief 获取字段定义
@return FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.FeatureClass.GetGeomType">
@brief 获取几何类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureClass.Save">
@brief 保存编辑内容
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.RecomputeExtent">
@brief 重新计算范围 
@return bool 计算范围是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureCount">
@brief 获取过滤器 
@return QueryFilterPtr 过滤器

@brief 获取下一个要素
@return FeaturePtr 下一个要素

@brief 获取要素个数
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureDataset">
@brief 获取挂载的矢量数据集
@return FeatureDatasetPtr 矢量数据集

</member>
        <member name="M:SysDataSource.FeatureClass.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.FeatureClass.GetFullName">
@brief 获取路径
@return QString 路径

</member>
        <member name="M:SysDataSource.FeatureClass.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureClass.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureDataset 要素数据集对象

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_ptrFeature">
@brief 要素对象指针

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_eumEditMode">
@brief 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetEditType">
@brief 获取编辑类型
@return IEditModeType 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetFeature">
@brief 获取Feature
@return 要素对象指针

</member>
        <member name="M:SysDataSource.FeatureEditInfo.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor">
@brief 构造函数
@param [in] Edit_Update 初始化参数 Edit_Update

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;,SysDataSource.IEditModeType)">
@brief 构造函数
@param [in] ptrFeature 要素对象
@param [in] eType  编辑类型

</member>
        <member name="T:SysDataSource.FeatureEditInfo">
@class FeatureEditInfo
@brief 要素编辑信息类

</member>
        <member name="T:SysDataSource.IEditModeType">
@brief 要素编辑 枚举类型

</member>
        <member name="T:SysDataSource.ConnectString">
@brief 类的前置声明和智能指针定义

</member>
        <member name="D:SysDataSource.FeatureCursorPtr">
@brief  要素游标 智能指针对象

</member>
        <member name="F:SysDataSource.FeatureCursor.m_nCurReadIndex">
@brief  当前读取的索引

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrConnection">
@brief  连接指针

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrQueryFilter">
@brief  查询过滤器

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrFeatureClass">
@brief  要素类

</member>
        <member name="M:SysDataSource.FeatureCursor.Close">
@brief 关闭
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeatureNoLock">
@brief 下一个要素不加锁
@return  SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 是否为有效要素
@param [in] ptrFeature 要素
@return  bool  是否有效

</member>
        <member name="M:SysDataSource.FeatureCursor.SetFieldIgnored(System.Boolean)">
@brief 设置字段忽略
@param [in] bValue 是否忽略
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeature">
@brief 下一个要素
@return SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureCursor.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureClass 要素类
@param [in] ptrFilter   查询过滤器

</member>
        <member name="T:SysDataSource.FeatureCursor">
@class FeatureCursor
@brief 要素游标


@brief 声明友元类

</member>
        <member name="D:SysGeometry.EllipsePtr">
@brief 椭圆的智能指针对象

</member>
        <member name="F:SysGeometry.Ellipse.m_RotationAngle">
@brief 旋转角度

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMinor">
@brief 短半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMajor">
@brief 长半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterY">
@brief 中心点Y

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterX">
@brief 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Ellipse.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Ellipse.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ellipse.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ellipse.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ellipse.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ellipse.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ellipse.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ellipse.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ellipse.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ellipse.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ellipse.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Ellipse.PutCoords(System.Double,System.Double)">
@brief 设置中心点坐标
@param[in] double centerX x坐标
@param[in] double centerY y坐标
@return void

</member>
        <member name="M:SysGeometry.Ellipse.SetRotationAngle(System.Double)">
@brief 设置旋转角度
@param[in] double angel 设置旋转角度
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetRotationAngle">
@brief 获取旋转角度
@return double 旋转角度

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterY(System.Double)">
@brief 设置中心点Y
@param[in] double y 设置中心点Y
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterY">
@brief 获取中心点Y
@return double 中心点Y

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterX(System.Double)">
@brief 设置中心点X
@param[in] double x 设置中心点X
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterX">
@brief 获取中心点X坐标
@return double 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMinor(System.Double)">
@brief 设置短半轴
@param[in] double semiMinor 短半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMinor">
@brief 获取短半轴
@return double 短半轴

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMajor(System.Double)">
@brief 设置长半轴
@param[in] double semiMajor 长半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMajor">
@brief 获取长半轴
@return double 长半轴

</member>
        <member name="M:SysGeometry.Ellipse.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ellipse.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ellipse">
@class Ellipse
	* @brief 椭圆

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureDeleted">
@brief 删除要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureUpdated">
@brief 更新要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureAdded">
@brief 添加要素

</member>
        <member name="T:SysDataSource.IFeatureClassEvents">
@class IFeatureClassEvents
@brief 要素类事件

</member>
        <member name="D:SysDataSource.FeatureDatasetPtr">
@brief 要素数据集 智能指针

</member>
        <member name="F:SysDataSource.FeatureDataset.m_sTextCodec">
@brief 字符编码

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrQueryFilter">
@brief 查询过滤对象

</member>
        <member name="F:SysDataSource.FeatureDataset.m_eGeometryType">
@brief 几何类型

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrFields">
@brief 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFields">
@brief 获取字段
@return FieldsPtr 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetGeomType">
@brief 获取类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateSpatialIndex(System.Int32)">
@brief 创建空间索引
@param [in] nDepth 空间索引的级别。最大12
@return 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.CanCreateSpatialIndex">
@brief 是否能创建空间索引
@return 是否能

</member>
        <member name="M:SysDataSource.FeatureDataset.GetEncoding">
@brief 获取字符编码
@return QString 字符编码

</member>
        <member name="M:SysDataSource.FeatureDataset.SetEncoding(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字符编码
@param [in] strEncoding  字符编码
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetFieldIgnored(System.Boolean)">
@brief 设置是否忽略字段
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsFieldIgnored">
@brief  是否忽略字段的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.SetGeometryIgnored(System.Boolean)">
@brief 设置是否忽略Geometry的加载
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsGeometryIgnored">
@brief 是否忽略Geometry的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.RecomputeExtent">
@brief 重新计算范围
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.SetNextByIndex(System.Int64)">
@brief 通过索引设置下一个要素数据集
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 要素

</member>
        <member name="M:SysDataSource.FeatureDataset.AlterFieldDefn(System.Int32,SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldAlterType)">
@brief 修改字段
@param [in] iField 编号FID
@param [in] ptrNewField  新的字段
@param [in] eAlterType 修改的类型
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 -----------------
		* @brief 添加字段
		* @param [in] strName 字段名称
		* @param [in] eType   字段类型 
		* @return bool 是否成功

@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Save">
@brief 保存
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeatureCount">
@brief 获取要素数量
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID 编号nFID 
@return  FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetNextFeature">
@brief 获取下一个要素
@return FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.ResetReading">
@brief 重置要素读取位置 
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetQueryFilter(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置查询过滤
@param [in] ptrFilter 过滤器
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.GetQueryFilter">
@brief 获取过滤器
@return QueryFilterPtr 过滤器对象

</member>
        <member name="M:SysDataSource.FeatureDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 读写类型
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FieldAlterType">
@brief 字段更改类型 枚举

</member>
        <member name="F:Alter_All_Flag">
Alter all parameters of field definition.

</member>
        <member name="F:Alter_Default_Flag">
Alter field DEFAULT value.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Nullable_Flag">
Alter field NOT NULL constraint.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Width_Precision_Flag">
Alter field width and precision.

</member>
        <member name="F:Alter_Type_Flag">
Alter field type.

</member>
        <member name="F:Alter_Name_Flag">
Alter field name.

</member>
        <member name="D:SysDataSource.QueryFilterPtr">
@brief 查询类 智能指针

</member>
        <member name="F:SysDataSource.QueryFilter.m_ptrGeometryQuery">
@brief 空间查询条件

</member>
        <member name="F:SysDataSource.QueryFilter.m_strQuery">
@brief 查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetQueryGeometry">
@brief 获取空间查询条件
@return SysGeometry::GeometryPtr 空间查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetAttributeQueryString">
@brief 获取属性查询条件
@return QString 属性查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.SetSpatialQuery(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间查询条件
@param [in] ptrGeometryQuery 几何查询
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.SetAttributeQuery(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置属性查询条件
@param [in] strQuery 查询条件
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.QueryFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.QueryFilter">
@class  QueryFilter
@brief  查询类

</member>
        <member name="F:SysDataSource.Dataset.m_bCanWrite">
@brief 是否可以写入 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_bCanCopy">
@brief 是否可以拷贝 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_ptrSpatialReference">
@brief 控件参考

</member>
        <member name="F:SysDataSource.Dataset.m_eDatasetType">
@brief 数据集类型

</member>
        <member name="F:SysDataSource.Dataset.m_strFullName">
@brief 全名

</member>
        <member name="F:SysDataSource.Dataset.m_strName">
@brief 名称

</member>
        <member name="M:SysDataSource.Dataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Dataset.#ctor">
@brief 构造函数

</member>
        <member name="M:SysDataSource.Dataset.CloneMemDataset">
@brief 对内存数据集进行Clone. 如果不是内存数据集，返回空
@return

</member>
        <member name="M:SysDataSource.Dataset.ClearInternalData">
@brief 清除内部缓存
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取元数据
@param [in] const QString 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataDomainList">
@brief 获取数据域列表
@return

</member>
        <member name="M:SysDataSource.Dataset.SetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.Dataset.SetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据
@param [in] papszMetadata ** 输入信息
@para  [in] const char * pszDomain 域

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据
@param [in] const char * 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetInternalHandle">
@brief 获取内部句柄
@return void* 内部句柄指针

</member>
        <member name="M:SysDataSource.Dataset.CanCopy">
@brief 是否可以进行文件级复制
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.CanWrite">
@brief 是否可写
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.Copy(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 复制为指定路径下
@param [in] strFullName 文件路径名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param ptrSpatialRef  空间参考对象指针
@return void 

</member>
        <member name="M:SysDataSource.Dataset.GetSpatialReference">
@brief 获取空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDataSource.Dataset.GetDataSourceType">
@brief 获取数据源类型
@return QString 数据源类型

</member>
        <member name="M:SysDataSource.Dataset.GetType">
@brief 获取数据集类型 
@return DatasetType 数据集类型

</member>
        <member name="M:SysDataSource.Dataset.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strName 名称 
@return void

</member>
        <member name="M:SysDataSource.Dataset.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Dataset.GetFullName">
@brief 获取全路径名
@return QString 全路径名

</member>
        <member name="T:SysDataSource.Dataset">
@brief 类的前置声明和智能指针定义


@class Dataset
@brief 数据集基类

</member>
        <member name="F:SysDataSource.Feature.m_pFeatureClass">
@brief 要素类对象指针

</member>
        <member name="F:SysDataSource.Feature.m_vecField">
@brief 字段集合

</member>
        <member name="F:SysDataSource.Feature.m_ptrGeometry">
@brief 几何对象

</member>
        <member name="F:SysDataSource.Feature.m_ptrFields">
@brief 字段

</member>
        <member name="F:SysDataSource.Feature.m_nFID">
@brief FID值

</member>
        <member name="M:SysDataSource.Feature.GetFeatureClass">
@brief 获取要素类
@return FeatureClass* 要素类对象指针

</member>
        <member name="M:SysDataSource.Feature.Clone">
@brief 克隆
@return FeaturePtr 克隆成果

</member>
        <member name="M:SysDataSource.Feature.GetFields">
@brief 获取字段定义
@return  FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.Feature.IsValueNull(System.Int32)">
@brief 字段是否为空
@param [in] nIndex 字段索引
@return bool  是否为空

</member>
        <member name="M:SysDataSource.Feature.GetValueAsString(System.Int32)">
@brief 获取字段值的字符串
@param [in] nIndex 索引
@return  QString  字符串

</member>
        <member name="M:SysDataSource.Feature.GetValue(System.Int32)">
@brief 获取字段值
@param [in] nIndex 索引
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.GetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段值
@param [in] strFieldName 字段名
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.SetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] strFieldName 字段名称
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetValue(System.Int32,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] nIndex 字段索引
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetFID(System.Int64)">
@brief 设置FID
@param [in] nFID
@return void

</member>
        <member name="M:SysDataSource.Feature.GetFID">
@brief 获取FID
@return  qlonglong 获取FID

</member>
        <member name="M:SysDataSource.Feature.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Feature.GetFieldName(System.Int32)">
@brief 获取字段名
@param [in] nIndex 索引号
@return QString字段名

</member>
        <member name="M:SysDataSource.Feature.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引
@param [in] strName 字段名
@return  int字段索引

</member>
        <member name="M:SysDataSource.Feature.GetFieldCount">
@brief 获取字段数量
@return int 字段数量

</member>
        <member name="M:SysDataSource.Feature.GetGeometry">
@brief 获取几何对象Geometry
@return   几何对象Geometry

</member>
        <member name="M:SysDataSource.Feature.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置几何对象Geometry
@param [in] ptrGeometry 几何对象
@return void

</member>
        <member name="M:SysDataSource.Feature.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Feature.#ctor(SysUtility._ptr_t&lt;SysDataSource.Fields&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数

</member>
        <member name="T:SysDataSource.Feature">
@class Feature
	* @brief 矢量类


@brief 类的前置声明

</member>
        <member name="T:SysDataSource.FeatureClass">
@brief 类的前置声明和智能指针定义


@brief 定义友元类


@brief 类的前置声明和智能指针定义


@class FeatureClass
@brief  要素类

</member>
        <member name="D:SysDataSource.FieldsPtr">
@brief 字段集类 智能指针

</member>
        <member name="F:SysDataSource.Fields.m_bFieldIgnored">
@brief  是否忽略字段

</member>
        <member name="F:SysDataSource.Fields.m_bGeometryIgnored">
@brief  是否忽略Geometry 

</member>
        <member name="F:SysDataSource.Fields.m_vecField">
@brief  字段集合

</member>
        <member name="M:SysDataSource.Fields.SetPrecision(System.Int32,System.Int32)">
@brief  设置精度
@param [in] nIndex 索引号
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Fields.GetPrecision(System.Int32)">
@brief  获取精度
@param [in] nIndex 索引号
@return int 精度

</member>
        <member name="M:SysDataSource.Fields.SetWidth(System.Int32,System.Int32)">
@brief  设置宽度
@param [in] nIndex 索引号
@param [in] nWidth 宽度
@return void 

</member>
        <member name="M:SysDataSource.Fields.GetWidth(System.Int32)">
@brief  获取宽度
@param [in] nIndex 索引号
@return int 宽度

</member>
        <member name="M:SysDataSource.Fields.IsFieldIgnored">
@brief  是否忽略字段
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.IsGeometryIgnored">
@brief 是否忽略Geometry 
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.DeleteField(System.Int32)">
@brief 删除字段 
@param [in] nIndex 字段索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.DeleteField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] strName 字段名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加字段
@param [in] ptrField 字段
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 添加字段
@param [in] strName 字段名称
@param [in] eType 字段类型
@param [in] nWidth 字段长度，以字节为单位
@param [in] nPrecision 字段精度
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引号
@param [in] strName 字段名称
@return int 字段索引号

</member>
        <member name="M:SysDataSource.Fields.GetFieldCount">
@brief 获取字段数
@return int 字段数

</member>
        <member name="M:SysDataSource.Fields.GetFieldName(System.Int32)">
@brief 获取字段名称
@param [in] nIndex 索引
@return  QString 字段名称

</member>
        <member name="M:SysDataSource.Fields.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Fields.DeleteField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] nIndex 字段对象
@return void

</member>
        <member name="M:SysDataSource.Fields.GetField(System.Int32)">
@brief 根据索引获取字段对象
@param [in] nIndex 索引
@return FieldPtr 字段对象

</member>
        <member name="M:SysDataSource.Fields.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Fields.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FeatureDataset">
@brief  要素数据集


@class FeatureDataset
	* @brief  要素数据集类

</member>
        <member name="T:SysDataSource.Fields">
@class Fields
	* @brief  字段集类

</member>
        <member name="F:SysDataSource.Field.m_nPrecision">
@brief 精度

</member>
        <member name="F:SysDataSource.Field.m_nWidth">
@brief 宽度

</member>
        <member name="F:SysDataSource.Field.m_enumFieldType">
@brief 字段类型  枚举变量

</member>
        <member name="F:SysDataSource.Field.m_DefaultValue">
@brief 默认值

</member>
        <member name="F:SysDataSource.Field.m_strAliasName">
@brief 别名

</member>
        <member name="F:SysDataSource.Field.m_strName">
@brief 名字

</member>
        <member name="M:SysDataSource.Field.Clone">
@brief 克隆
@return  FieldPtr 克隆结果 字段对象指针

</member>
        <member name="M:SysDataSource.Field.SetPrecision(System.Int32)">
@brief 设置精度
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Field.GetPrecision">
@brief 获取精度
@return  int 精度

</member>
        <member name="M:SysDataSource.Field.SetWidth(System.Int32)">
@brief 设置宽度
@param [in] nWidth 宽度
@return void

</member>
        <member name="M:SysDataSource.Field.GetWidth">
@brief 获取宽度
@return  int 宽度

</member>
        <member name="M:SysDataSource.Field.SetFieldType(SysDataSource.FieldType)">
@brief 设置字段类型
@param [in] type 字段类型
@return void

</member>
        <member name="M:SysDataSource.Field.GetFieldType">
@brief 获取字段类型
@return FieldType  字段类型

</member>
        <member name="M:SysDataSource.Field.SetDefaultValue(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认值
@param [in] value  默认值
@return void 

</member>
        <member name="M:SysDataSource.Field.GetDefaultValue">
@brief 获取默认值
@return QVariant  默认值

</member>
        <member name="M:SysDataSource.Field.SetAliasName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置别名
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetAliasName">
@brief 获取别名
@return QString 字段别名

</member>
        <member name="M:SysDataSource.Field.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Field.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Field.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 有参构造函数
@param [in] strName 名称
@param [in] eType   类型
@param [in] nWidth  宽度
@param [in] nPrecision 精度

</member>
        <member name="T:SysDataSource.Field">
@brief 类的前置声明和智能指针定义


@class Field
	* @brief 字段类

</member>
        <member name="T:SysDataSource.DadaSampleType">
@class DadaSampleType
	* @brief  数据样式类型 枚举

</member>
        <member name="D:SysGeometry.PolygonPtr">
@brief 面对象 智能指针对象

</member>
        <member name="F:SysGeometry.Polygon.m_ExteriorRing">
@brief 外环

</member>
        <member name="F:SysGeometry.Polygon.m_InteriorRings">
@brief 内环集合

</member>
        <member name="M:SysGeometry.Polygon.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Polygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polygon.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polygon.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polygon.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polygon.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polygon.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polygon.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polygon.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Polygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Polygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polygon.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetZ(System.Int32)">
@brief 通过索引获得点的Z值
@param[in] int index 编号
@return double 编号为index的点的Z值

</member>
        <member name="M:SysGeometry.Polygon.GetY(System.Int32)">
@brief 通过索引获得点的Y值
@param[in] int index 编号
@return double 编号为index的点的Y值

</member>
        <member name="M:SysGeometry.Polygon.GetX(System.Int32)">
@brief 通过索引获得点的X值
@param[in] int index 编号
@return double 编号为index的点的X值

</member>
        <member name="M:SysGeometry.Polygon.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.Polygon.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 要赋值点的数量
@param[in] double* px  X坐标的数组中的值
@param[in] double* py  Y坐标的数组中的值
@param[in] double* pz = NULL   Z坐标的数组中的值  默认为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x  X坐标
@param[in] double y  Y坐标
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPointCount">
@brief 获得点数目
@return int 点的数目

</member>
        <member name="M:SysGeometry.Polygon.GetExteriorRing">
@brief 获得外环
@return RingPtr 外环

</member>
        <member name="M:SysGeometry.Polygon.SetExteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置外环
@param[in] RingPtr interiorRing 外环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingCount">
@brief 得到内环个数
@return int 内环个数

</member>
        <member name="M:SysGeometry.Polygon.ClearInteriorRings">
@brief 清除内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemoveInteriorRing(System.Int32)">
@brief 移除内环
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingByIndex(System.Int32)">
@brief 通过编号获得内环
@param[in] int index 编号
@return RingPtr 内环

</member>
        <member name="M:SysGeometry.Polygon.AddInteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加内环
@param[in] RingPtr interiorRing 内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.CloseRings">
@brief 关闭所有的Ring
@return

</member>
        <member name="M:SysGeometry.Polygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polygon">
@class Polygon
	* @brief 面对象

</member>
        <member name="D:SysGeometry.RingPtr">
@brief 闭合环 智能指针对象

</member>
        <member name="M:SysGeometry.Ring.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@return PointPtr  获得的点对象指针

</member>
        <member name="M:SysGeometry.Ring.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Ring.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Ring.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Ring.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ring.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ring.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ring.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ring.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ring.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ring.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ring.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ring.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ring.SetEmpty">
@brief 设置为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.IsPointInRing(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 点是否在环里边
@param[in] SysGeometry::PointPtr ptrPoint 点
@return bool 是否在环里边

</member>
        <member name="M:SysGeometry.Ring.Close">
@brief 闭合
@return

</member>
        <member name="M:SysGeometry.Ring.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ring.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ring">
@class Ring
	* @brief 闭合环

</member>
        <member name="D:SysGeometry.SurfacePtr">
@brief  表面对象的智能指针对象

</member>
        <member name="M:SysGeometry.Surface.GetLength(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Surface.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Surface.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Surface.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysGeometry.Surface.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Surface">
@class Surface
	* @brief 表面对象

</member>
        <member name="D:SysGeometry.PolylinePtr">
@brief 单线段 智能指针对象

</member>
        <member name="M:SysGeometry.Polyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Polyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Polyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Polyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Polyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polyline.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polyline.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polyline.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polyline.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polyline.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polyline.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polyline.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polyline">
@class Polyline
	* @brief 单线段

</member>
        <member name="D:SysGeometry.PointCollectionPtr">
@brief 点集合对象 智能指针对象

</member>
        <member name="M:SysGeometry.PointCollection.IsValidIndex(System.Int32,System.Boolean)">
@brief Index是否有效
@param[in] int index 编号
@param[in] bool bInsert 是否是插入
@return bool 是否有效

</member>
        <member name="F:SysGeometry.PointCollection.m_vecPoint">
@brief 点集合

</member>
        <member name="M:SysGeometry.PointCollection.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetZ(System.Int32)">
@brief 通过索引获得点的Z坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetY(System.Int32)">
@brief 通过索引获得点的Y坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetX(System.Int32)">
@brief 通过索引获得点的X坐标值
@param[in] int index 索引编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.PointCollection.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.PointCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PointCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.PointCollection">
@class PointCollection
	* @brief 点集合对象


@brief 类的前期声明和智能指针的定义

</member>
        <member name="T:SysGeometry.RawPoint">
@brief 点的初始化结构体

</member>
        <member name="D:SysGeometry.CurvePtr">
@brief 曲线的智能指针对象

</member>
        <member name="M:SysGeometry.Curve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Curve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Curve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Curve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Curve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Curve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Curve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Curve">
@class Curve
	* @brief 曲线对象

</member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRMapSurround(System.Void*)">
            <summary>
创建IMapSurround
</summary>
            <param name="pMapSurround">MapSurround对象C++</param>
            <returns>MapSurround对象CLR</returns>
            <summary>
创建IMapSurround
</summary>
            <param name="pMapSurround">MapSurround对象C++</param>
            <returns>MapSurround对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRElement(System.Void*)">
            <summary>
创建IElement
</summary>
            <param name="pElement">Element对象C++</param>
            <returns>Element对象CLR</returns>
            <summary>
创建IElement
</summary>
            <param name="pElement">Element对象C++</param>
            <returns>Element对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRMultiLayer(System.Void*)">
            <summary>
创建MultiLayer
</summary>
            <param name="pMultiLayer">MultiLayer对象C++</param>
            <returns>MultiLayer对象CLR</returns>
            <summary>
创建MultiLayer
</summary>
            <param name="pMultiLayer">MultiLayer对象C++</param>
            <returns>MultiLayer对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRFeatureLayer(System.Void*)">
            <summary>
创建FeatureLayer
</summary>
            <param name="pfeatureLayer">FeatureLayer对象C++</param>
            <returns>FeatureLayer对象CLR</returns>
            <summary>
创建FeatureLayer
</summary>
            <param name="pfeatureLayer">FeatureLayer对象C++</param>
            <returns>FeatureLayer对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRRasterLayer(System.Void*)">
            <summary>
创建RasterLayer
</summary>
            <param name="pRasterLayer">RasterLayer对象C++</param>
            <returns>RasterLayer对象CLR</returns>
            <summary>
创建RasterLayer
</summary>
            <param name="pRasterLayer">RasterLayer对象C++</param>
            <returns>RasterLayer对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRLayer(System.Void*)">
            <summary>
创建Layer
</summary>
            <param name="pLayer">Layer对象C++</param>
            <returns>Layer对象CLR</returns>
            <summary>
创建Layer
</summary>
            <param name="pLayer">Layer对象C++</param>
            <returns>Layer对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRAfterRasterFilter(System.Void*)">
            <summary>
创建AfterRasterFilter
</summary>
            <param name="pAfterRasterFilter">AfterRasterFilter对象C++</param>
            <returns>AfterRasterFilter对象CLR</returns>
            <summary>
创建AfterRasterFilter
</summary>
            <param name="pAfterRasterFilter">AfterRasterFilter对象C++</param>
            <returns>AfterRasterFilter对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRPreRasterFilter(System.Void*)">
            <summary>
创建PreRasterFilter
</summary>
            <param name="pPreRasterFilter">PreRasterFilter对象C++</param>
            <returns>PreRasterFilter对象CLR</returns>
            <summary>
创建PreRasterFilter
</summary>
            <param name="pPreRasterFilter">PreRasterFilter对象C++</param>
            <returns>PreRasterFilter对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRRasterRender(System.Void*)">
            <summary>
创建RasterRender
</summary>
            <param name="pRasterRender">RasterRender对象C++</param>
            <returns>RasterRender对象CLR</returns>
            <summary>
创建RasterRender
</summary>
            <param name="pRasterRender">RasterRender对象C++</param>
            <returns>RasterRender对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRFeatureRender(System.Void*)">
            <summary>
创建FeatureRender
</summary>
            <param name="pfeatureRender">FeatureRender对象C++</param>
            <returns>FeatureRender对象CLR</returns>
            <summary>
创建FeatureRender
</summary>
            <param name="pfeatureRender">FeatureRender对象C++</param>
            <returns>FeatureRender对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRMapFrameElement(System.Void*)">
            <summary>
创建IMapFrameElement
</summary>
            <param name="pMapFrameElement">MapFrameElement对象C++</param>
            <returns>MapFrameElement对象CLR</returns>
            <summary>
创建IMapFrameElement
</summary>
            <param name="pMapFrameElement">MapFrameElement对象C++</param>
            <returns>MapFrameElement对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRPageLayout(System.Void*)">
            <summary>
创建IPageLayout
</summary>
            <param name="pPageLayout">PageLayout对象C++</param>
            <returns>PageLayout对象CLR</returns>
            <summary>
创建IPageLayout
</summary>
            <param name="pPageLayout">PageLayout对象C++</param>
            <returns>PageLayout对象CLR</returns>
        </member>
        <member name="M:PIE.Carto.CartoFactory.ConstructCLRMap(System.Void*)">
            <summary>
创建IMap
</summary>
            <param name="pMap">Map对象C++</param>
            <returns>Map对象CLR</returns>
            <summary>
创建IMap
</summary>
            <param name="pMap">Map对象C++</param>
            <returns>Map对象CLR</returns>
        </member>
        <member name="T:PIE.Carto.CartoFactory">
            <summary>
CartoFactory类
</summary>
        </member>
        <member name="M:PIE.Carto.IMapSurround.Refresh">
            <summary>
刷新
</summary>
        </member>
        <member name="M:PIE.Carto.IMapSurround.GetType">
            <summary>
获取MapSurround类型
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.IMapSurround.Map">
            <summary>
获取或设置map对象
</summary>
        </member>
        <member name="M:PIE.Carto.IMapSurround.FitToBounds(PIE.Display.IDisplayTransformation,PIE.Geometry.IEnvelope)">
            <summary>
填充MapSurround对象使其适应边界大小
</summary>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrBounds">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.IMapSurround.QuerySize(PIE.Display.IDisplayTransformation,System.Double@,System.Double@)">
            <summary>
查询MapSurround大小
</summary>
            <param name="ptrDisTrans">转换对象</param>
            <param name="width">返回宽度</param>
            <param name="height">返回高度</param>
        </member>
        <member name="M:PIE.Carto.IMapSurround.Draw(System.Drawing.Graphics,PIE.Geometry.IEnvelope,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrEnv">外接多边形</param>
            <param name="ptrTrasform">转换对象</param>
            <param name="ptrTracker">多进程对象</param>
        </member>
        <member name="M:PIE.Carto.IMapSurround.CreateItemGraphics(PIE.Display.IDisplayTransformation)">
            <summary>
创建Graphics
</summary>
            <param name="ptrDisTrans">转换对象</param>
        </member>
        <member name="M:PIE.Carto.IMapSurround.GetGraphics">
            <summary>
获取Graphics
</summary>
            <returns>返回MapSurround对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapSurround.Clone">
            <summary>
克隆
</summary>
            <returns>返回MapSurround对象</returns>
        </member>
        <member name="T:PIE.Carto.IMapSurround">
            <summary>
IMapSurround接口
</summary>
        </member>
        <member name="T:PIE.Carto.MapSurroundType">
            <summary>
MapSurround类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundScaleText">
            <summary>
比例尺Text
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundNorthArrow">
            <summary>
指北针
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundLegend">
            <summary>
图例
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundAlternatingScaleBar">
            <summary>
A map surround for displaying a single alternating scale bar. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundScaleLine">
            <summary>
比例尺Line
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.MapSurroundUnknown">
            <summary>
无类型
</summary>
        </member>
        <member name="M:PIE.Carto.IAfterRasterFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="P:PIE.Carto.IAfterRasterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.IAfterRasterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.IAfterRasterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.IAfterRasterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="T:PIE.Carto.IAfterRasterFilter">
            <summary>
IAfterRasterFilter接口
</summary>
        </member>
        <member name="M:PIE.Carto.IPreRasterFilter.Filter(PIE.DataSource.IPixelBuffer,System.Object,PIE.Geometry.IEnvelope)">
            <summary>
过滤
</summary>
            <param name="pixelBuffer">过滤后的数据</param>
            <param name="dataMask">是否透明的掩码显示</param>
            <param name="envelope">显示的范围</param>
        </member>
        <member name="M:PIE.Carto.IPreRasterFilter.FilterExtent(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32)">
            <summary>
范围过滤
</summary>
            <param name="rasterDataset">要过滤的栅格数据源</param>
            <param name="envelope">要过滤的范围</param>
            <param name="width">显示宽度（可确定过滤的金字塔级别）</param>
            <param name="height">显示高度（可确定过滤的金字塔级别）</param>
        </member>
        <member name="P:PIE.Carto.IPreRasterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.IPreRasterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.IPreRasterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.IPreRasterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="T:PIE.Carto.IPreRasterFilter">
            <summary>
IRasterFilter接口
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterFilter.IsUsing">
            <summary>
获取或设置栅格过滤器是否可用
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterFilter.FilterType">
            <summary>
获取图层栅格过滤器类型
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterFilter.Description">
            <summary>
获取或设置栅格过滤器描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterFilter.Name">
            <summary>
获取或设置栅格过滤器名称
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterFilter">
            <summary>
IRasterFilter栅格滤波接口
</summary>
        </member>
        <member name="T:PIE.Carto.RasterFilterType">
            <summary>
栅格数据过滤器类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RasterFilterType_After">
            <summary>
后置栅格数据过滤器类型-控制显示
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RasterFilterType_Pre">
            <summary>
前置栅格数据过滤器类型-控制原始数据
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RasterFilterType_UnKnown">
            <summary>
未知的栅格数据过滤器类型
</summary>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.Clear">
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层对象</returns>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IMultiLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.IMultiLayer.Layers">
            <summary>
获取图层
</summary>
        </member>
        <member name="P:PIE.Carto.IMultiLayer.Dataset">
            <summary>
获取或者设置数据集
</summary>
        </member>
        <member name="P:PIE.Carto.IMultiLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.IMultiLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="T:PIE.Carto.IMultiLayer">
            <summary>
多图层接口
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterLayer.IsValid">
            <summary>
是否是有效图层
</summary>
            <returns>是否是有效图层</returns>
        </member>
        <member name="M:PIE.Carto.IRasterLayer.RaiseRenderChanged">
            <summary>
触发渲染变化事件
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterLayer.Render">
            <summary>
获取或者设置栅格渲染
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterLayer.Dataset">
            <summary>
获取或者设置栅格数据集
</summary>
        </member>
        <member name="T:PIE.Carto.IRasterLayer">
            <summary>
栅格图层接口
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterRender.GetRenderBytes(PIE.DataSource.IRasterDataset,PIE.Geometry.IEnvelope,System.Int32,System.Int32,PIE.SystemUI.ITrackerCancel)">
            <summary>
获得渲染后数据
</summary>
            <param name="rasterDataset">要读取的数据</param>
            <param name="envelope">读取的范围</param>
            <param name="width">目标宽度</param>
            <param name="height">目标高度</param>
            <param name="trackCancel">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.IRasterRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.IRasterRender.Draw(PIE.DataSource.IRasterDataset,System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="rasterDataset">已设置过查询条件的栅格数据集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="P:PIE.Carto.IRasterRender.ResamplingType">
            <summary>
获取或设置栅格重采样类型
</summary>
        </member>
        <member name="P:PIE.Carto.IRasterRender.DisplayResolutionFactor">
            <summary>
获取或设置分辨率因子
</summary>
        </member>
        <member name="M:PIE.Carto.IRasterRender.CanRender">
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Carto.IRasterRender.Description">
            <summary>
获得渲染描述信息
</summary>
            <returns>渲染描述信息</returns>
        </member>
        <member name="P:PIE.Carto.IRasterRender.Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="P:PIE.Carto.IRasterRender.Name">
            <summary>
获得渲染名称
</summary>
            <returns>渲染名称</returns>
        </member>
        <member name="T:PIE.Carto.IRasterRender">
            <summary>
栅格渲染器接口
</summary>
        </member>
        <member name="T:PIE.Carto.RasterRenderType">
            <summary>
RasterRenderType类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterDiscreteColorRender">
            <summary>
 点密度渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterColormapRender">
            <summary>
颜色对照表渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterUniqueValueRender">
            <summary>
 唯一值渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterClassifyColorRampRender">
            <summary>
分级渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterStretchColorRampRender">
            <summary>
拉伸颜色带渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_RasterRGBRender">
            <summary>
RGB渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RRT_Unknown">
            <summary>
未知渲染类型
</summary>
        </member>
        <member name="T:PIE.Carto.RasterResamplingType">
            <summary>
RasterResamplingType类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_BilinearGaussBlurPlus">
            <summary>
BilinearGaussBlurPlus法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_BilinearGaussBlur">
            <summary>
BilinearGaussBlur法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_BilinearInterpolationPlus">
            <summary>
BilinearInterpolationPlus法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_Majority">
            <summary>
majority值法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_CubicConvolution">
            <summary>
卷及运算法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_BilinearInterpolation">
            <summary>
双线性内插法
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.RSP_NearestNeighbor">
            <summary>
邻近值法
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureLayer.DrawAnnotations(System.Drawing.Graphics,System.Collections.Generic.IList`1{PIE.Geometry.IPolygon}@,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制图层注记
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="polygon">面要素</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.IFeatureLayer.RaiseRenderChanged">
            <summary>
渲染改变
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.AnnoProperties">
            <summary>
获取或者设置图层注记属性
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.DisplayAnnotation">
            <summary>
获取或设置图层是否显示注记
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.Render">
            <summary>
获取或者设置矢量图层渲染
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.Selectable">
            <summary>
获取或设置图层是否选中
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.DisplayField">
            <summary>
获取或设置图层显示字段
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureLayer.FeatureClass">
            <summary>
获取或者设置矢量数据集
</summary>
        </member>
        <member name="T:PIE.Carto.IFeatureLayer">
            <summary>
矢量图层接口
</summary>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.Clone">
            <summary>
克隆
</summary>
            <returns>矢量渲染器对象</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.Draw(PIE.DataSource.IFeatureClass,System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制
</summary>
            <param name="ptrFClass">已设置过查询条件的要素集</param>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="dpType">注释类型</param>
            <param name="tracker">tracker取消</param>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.GetSymbolByFeature(PIE.DataSource.IFeature)">
            <summary>
根据要素获得对应渲染符号
</summary>
            <param name="feature">要素对象</param>
            <returns>渲染符号ISymbol</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.SetProperty(System.String,System.Object)">
            <summary>
设置属性值
</summary>
            <param name="propertyName">属性名称</param>
            <param name="propertyValue">属性值</param>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.GetProperty(System.String)">
            <summary>
获得属性值
</summary>
            <param name="propertyName">属性名称</param>
            <returns>属性值</returns>
        </member>
        <member name="P:PIE.Carto.IFeatureRender.Transparency">
            <summary>
获取或设置透明度百分比（0-100）
</summary>
        </member>
        <member name="P:PIE.Carto.IFeatureRender.Type">
            <summary>
获得渲染类型
</summary>
            <returns>渲染类型</returns>
        </member>
        <member name="M:PIE.Carto.IFeatureRender.CanRender">
            <summary>
是否可使用此渲染器进行渲染
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Carto.IFeatureRender">
            <summary>
矢量渲染器接口
</summary>
        </member>
        <member name="T:PIE.Carto.FeatureRenderType">
            <summary>
FeatureRenderType类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FRT_ChartRender">
            <summary>
 Chart渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FRT_BreaksRender">
            <summary>
分级渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FRT_UniqueValueRender">
            <summary>
唯一值渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FRT_SimpleSymbolRender">
            <summary>
简单符号渲染
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FRT_Unknown">
            <summary>
未知渲染类型
</summary>
        </member>
        <member name="F:PIE.Carto.Layer.m_pCInstance">
            <summary>
C++对象Layer
</summary>
        </member>
        <member name="F:PIE.Carto.Layer.m_OnPropertyChangedEventHandler">
            <summary>
属性变化事件EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Layer.m_OnRenderChangedEventHandler">
            <summary>
渲染变化事件EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Layer.m_OnVisibilityChangedEventHandler">
            <summary>
图层可见性变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Carto.Layer.m_Tag">
            <summary>
Tag
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Carto.Layer.OnPropertyChanged">
            <summary>
属性变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.Layer.OnRenderChanged">
            <summary>
渲染变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.Layer.OnVisibilityChanged">
            <summary>
可视化变化事件
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.Layer.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制图层
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.Layer.RaisePropertyChanged">
            <summary>
触发属性变化事件(当属性变化时，调用此方法触发属性变化事件)
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.IsRequireRefresh">
            <summary>
是否需要刷新视图
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.IsValid">
            <summary>
是否是有效图层
</summary>
        </member>
        <member name="M:PIE.Carto.Layer.GetOffset(System.Double@,System.Double@)">
            <summary>
获取偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
            <summary>
获取偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
        </member>
        <member name="M:PIE.Carto.Layer.SetOffset(System.Double,System.Double)">
            <summary>
设置偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
            <summary>
设置偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
        </member>
        <member name="P:PIE.Carto.Layer.Tag">
            <summary>
获取或设置Tag
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.SpatialReference">
            <summary>
获取图层空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.MinimumScale">
            <summary>
获取或设置图层可见最小比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.MaximumScale">
            <summary>
获取或设置图层可见最大比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.AreaOfInterest">
            <summary>
设置可见区域
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.Extent">
            <summary>
获得图层范围
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.Visibility">
            <summary>
获取或设置图层可见性
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.LayerType">
            <summary>
获取图层类型
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.Description">
            <summary>
获取或设置图层描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.DataSourcePath">
            <summary>
获得数据路径
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.Name">
            <summary>
获取或设置图层名称
</summary>
        </member>
        <member name="P:PIE.Carto.Layer.ID">
            <summary>
获取图层ID
</summary>
        </member>
        <member name="T:PIE.Carto.Layer">
            <summary>
图层基类
</summary>
        </member>
        <member name="E:PIE.Carto.ILayerEvents.OnPropertyChanged">
            <summary>
属性变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.ILayerEvents.OnRenderChanged">
            <summary>
渲染变化事件
</summary>
        </member>
        <member name="E:PIE.Carto.ILayerEvents.OnVisibilityChanged">
            <summary>
可视化变化事件
</summary>
        </member>
        <member name="T:PIE.Carto.ILayerEvents">
            <summary>
ILayerEvents图层事件接口
</summary>
        </member>
        <member name="T:PIE.Carto.OnPropertyChangedEventHandler">
            <summary>
属性变化事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="T:PIE.Carto.OnRenderChangedEventHandler">
            <summary>
渲染变化事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="T:PIE.Carto.OnVisibilityChangedEventHandler">
            <summary>
可视化变化事件句柄
</summary>
            <param name="layer">Layer对象</param>
        </member>
        <member name="F:SysCarto.Layer.m_pCacheModel">
@brief 线程缓存模型

</member>
        <member name="F:SysCarto.Layer.m_bRequireRefresh">
@brief 是否刷新视图

</member>
        <member name="F:SysCarto.Layer.m_ptrSRef">
@brief 图层空间参考

</member>
        <member name="F:SysCarto.Layer.m_ptrAreaOfInterestEnv">
@brief 可见区域

</member>
        <member name="F:SysCarto.Layer.m_dMinimumScale">
@brief 最小比例尺

</member>
        <member name="F:SysCarto.Layer.m_dMaximumScale">
@brief 最大比例尺

</member>
        <member name="F:SysCarto.Layer.m_bIsVisible">
@brief 图层是否可见

</member>
        <member name="F:SysCarto.Layer.m_bIsValid">
@brief 是否是有效图层

</member>
        <member name="F:SysCarto.Layer.m_strDesc">
@brief 图层描述信息

</member>
        <member name="F:SysCarto.Layer.m_layerType">
@brief 图层类型

</member>
        <member name="F:SysCarto.Layer.m_strDataSourcePath">
@brief 数据路径

</member>
        <member name="F:SysCarto.Layer.m_strName">
@brief 图层名称

</member>
        <member name="F:SysCarto.Layer.m_strID">
@brief  图层ID

</member>
        <member name="M:SysCarto.Layer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.Layer.GetOffset(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取渲染位移。
@return void

</member>
        <member name="M:SysCarto.Layer.SetOffset(System.Double,System.Double)">
@brief 设置渲染位移。只影响图层的渲染位置。单位与map可见范围的单位相同
@return void

</member>
        <member name="M:SysCarto.Layer.Refresh">
@brief  刷新图层
@return void 

</member>
        <member name="M:SysCarto.Layer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.Layer.RaisePropertyChanged">
@brief 触发属性变化事件
@return void 
@remark 当属性变化时，调用此方法触发属性变化事件

</member>
        <member name="M:SysCarto.Layer.IsRequireRefresh">
@brief 是否需要刷新视图
@return  bool  是否刷洗

</member>
        <member name="M:SysCarto.Layer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制图层
@param [in] painter 绘图设备对象
@param [in] ptrTransform 显示转换对象
@param [in] dpType 绘图类型
@param [in] ptrTrackerCancel  取消轨迹
@return  void

</member>
        <member name="M:SysCarto.Layer.GetSpatialReference">
@brief 获得图层空间参考
@return SysGeometry::SpatialReferencePtr 空间参考对象

</member>
        <member name="M:SysCarto.Layer.SetMinimumScale(System.Double)">
@brief 设置图层可见最小比例尺
@param[in] double scale  最小比例尺
@return void

</member>
        <member name="M:SysCarto.Layer.GetMinimumScale">
@brief 获得图层可见最小比例尺
@return  double 最小比例尺

</member>
        <member name="M:SysCarto.Layer.SetMaximumScale(System.Double)">
@brief 设置图层可见最大比例尺
@param[in] double scale 最大比例尺
@return  void

</member>
        <member name="M:SysCarto.Layer.GetMaximumScale">
@brief  获得图层可见最大比例尺
@return double 最大比例尺

</member>
        <member name="M:SysCarto.Layer.SetAreaOfInterest(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可见区域
@param[in] SysGeometry::EnvelopePtr ptrEnv  包络线范围
@return  void

</member>
        <member name="M:SysCarto.Layer.GetExtent">
@brief 获得图层范围
@return  SysGeometry::EnvelopePtr 图层范围  

</member>
        <member name="M:SysCarto.Layer.SetVisibility(System.Boolean)">
@brief 设置图层可见性
@param[in] bool visible 是否可见
@return void

</member>
        <member name="M:SysCarto.Layer.GetVisibility">
@brief 获取图层可见性
@return  bool  是否可见

</member>
        <member name="M:SysCarto.Layer.IsValid">
@brief 是否是有效图层
@return  bool  是否有效

</member>
        <member name="M:SysCarto.Layer.GetLayerType">
@brief 获取图层类型
@return  LayerType 图层类型

</member>
        <member name="M:SysCarto.Layer.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图层描述信息
@param [in] strDesc 图层描述信息
@return void

</member>
        <member name="M:SysCarto.Layer.GetDescription">
@brief 获得图层描述信息
@return QString 图层描述信息

</member>
        <member name="M:SysCarto.Layer.GetDataSourcePath">
@brief 获得数据路径
@return QString 数据路径

</member>
        <member name="M:SysCarto.Layer.GetName">
@brief 获得图层名称 
@return  QString 图层名称

</member>
        <member name="M:SysCarto.Layer.GetID">
@brief 获得图层ID
@return  QString  图层ID

</member>
        <member name="M:SysCarto.Layer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Layer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MultiLayer">
@brief 声明多数据集图层为当前类的友元类


@class MultiLayer
@brief 多图层

</member>
        <member name="T:SysCarto.GroupLayer">
@brief 声明图层组图层为当前类的友元类


@class GroupLayer
@brief  组图层

</member>
        <member name="T:SysCarto.AnimationLayer">
@brief 声明动画图层为当前类的友元类


@class AnimationLayer
@brief  动画图层

</member>
        <member name="T:SysCarto.LayerConstructInfo">
@brief 声明图层创建类为当前类的友元类

</member>
        <member name="T:SysCarto.Map">
@brief 声明地图类为当前类的友元类


@brief 类的前置声明和智能指针定义


@class Map
@brief 地图


@brief  类的前置声明和智能指针定义

</member>
        <member name="T:SysCarto.LayerSerializer">
@brief 声明图层序列化类为当前类的友元类

</member>
        <member name="T:SysCarto.ViewState">
@class  ViewState
@brief  视图状态  枚举

</member>
        <member name="F:ViewStateRenderCompleted">
@brief  渲染完成

</member>
        <member name="F:ViewStateDataLoaded">
@brief  数据加载完成

</member>
        <member name="F:ViewStateNone">
@brief  无

</member>
        <member name="T:SysCarto.LayerCacheModelType">
@class  LayerCacheModelType
@brief  图层缓存类型

</member>
        <member name="F:LayerCacheModelType_LabelCacheModel">
@brief  注记缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageTileModel">
@brief  瓦片图像缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageModel">
@brief  普通图像缓存模型

</member>
        <member name="F:LayerCacheModelType_Unkown">
@brief  普通图像缓存模型

</member>
        <member name="T:SysCarto.LayerType">
@class  LayerType
@brief  图层类型 枚举

</member>
        <member name="F:LayerTypeAnimationLayer">
@brief  动画图层类型

</member>
        <member name="F:LayerTypeTiledLayer">
@brief  瓦片图层类型

</member>
        <member name="F:LayerTypeMultiLayer">
@brief  多图层类型

</member>
        <member name="F:LayerTypeGroupLayer">
@brief  组图层类型

</member>
        <member name="F:LayerTypeGraphicsLayer">
@brief  图形图层类型

</member>
        <member name="F:LayerTypeFeatureLayer">
@brief  矢量要素图层类型

</member>
        <member name="F:LayerTypeRasterLayer">
@brief  栅格图层类型

</member>
        <member name="F:LayerTypeUnknown">
@brief  未知类型

</member>
        <member name="F:SysCarto.ILayerEvents.PropertyChanged">
@brief  属性改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.RenderChanged">
@brief  渲染改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.VisibilityChanged">
@brief  可见性改变信号

</member>
        <member name="T:SysCarto.ILayerEvents">
@class ILayerEvents
@brief  图层事件

</member>
        <member name="T:SysCarto.Layer">
@brief   类的前置声明


@brief 类的前置声明和智能指针对象


@class Layer
@brief 图层基类

</member>
        <member name="D:SysUI.TrackerCancelPtr">
@brief 取消追踪器类智能指针

</member>
        <member name="F:SysUI.TrackerCancel.m_mutex">
@brief 互斥锁

</member>
        <member name="F:SysUI.TrackerCancel.m_State">
@brief 状态

</member>
        <member name="M:SysUI.TrackerCancel.Reset">
@brief 重置
@return

</member>
        <member name="M:SysUI.TrackerCancel.IsCanced">
@brief 是否已经取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Cancel">
@brief 取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysUI.TrackerCancel.#ctor">
@brief 构造函数

</member>
        <member name="T:SysUI.TrackerCancel">
@class TrackerCancel
	* @brief  取消追踪器类

</member>
        <member name="T:SysUI.LayerDrawPhaseType">
@class DrawPhaseType
	* @brief 绘图类型

</member>
        <member name="F:DPSelection">
@brief  选择集

</member>
        <member name="F:DPAnnotation">
@brief  标注

</member>
        <member name="F:DPGeography">
@brief  Geo图形

</member>
        <member name="M:PIE.Carto.IPageLayout.OutputJPG(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出JPG
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.OutputPNG(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出PNG
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.OutputTIF(System.String,System.Int32,PIE.SystemUI.ITrackerCancel,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
打印输出TIF
</summary>
            <param name="strPath">输出路径</param>
            <param name="nDPI">输出分辨率</param>
            <param name="ptrTracker">控制多线程对象</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.QueryOutputSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
获取打印输出地图大小
</summary>
            <param name="nOutputDPI">？？</param>
            <param name="nWid">返回宽度</param>
            <param name="nHei">返回高度</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetMaps(System.Collections.Generic.IList`1{PIE.Carto.IMap}@)">
            <summary>
获得Maps
</summary>
            <param name="listMap">Map列表</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetFocusMapFrameElement">
            <summary>
获取焦点地图框要素
</summary>
            <returns>焦点地图的地图框要素</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetDefaultScaleBarEnvelope">
            <summary>
获取比例尺外接多边形
</summary>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetDefaultDataFrameEnvelope">
            <summary>
获取数据框默认外接多边形
</summary>
            <returns>外边框</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.RenderGraphicsContainerSelections(System.Drawing.Graphics)">
            <summary>
？？？
</summary>
            <param name="painter">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
对函数进行描述说明
</summary>
            <param name="ptrPoint">对参数进行描述说明</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.FromMapPoint(PIE.Carto.IMap,PIE.Geometry.IPoint)">
            <summary>
从指定地图坐标点转化为页面坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="ptrPoint">地图点</param>
            <returns>页面点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ToMapPoint(System.Drawing.Point)">
            <summary>
从页面坐标点转化为指定地图坐标点
</summary>
            <param name="point">页面点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ToMapPoint(PIE.Carto.IMap,System.Drawing.Point)">
            <summary>
从页面坐标点转化为指定地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="point">页面点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.MapToPagePoint(PIE.Carto.IMap,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
从地图坐标点转化为页面点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">地图点X</param>
            <param name="dPageY">地图点Y</param>
            <param name="dMapX">返回页面点X</param>
            <param name="dMapY">返回页面点Y</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.PageToMapPoint(PIE.Carto.IMap,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
从页面点转化为地图坐标点
</summary>
            <param name="ptrMap">指定地图对象</param>
            <param name="dPageX">页面点X</param>
            <param name="dPageY">页面点Y</param>
            <param name="dMapX">返回地图点X</param>
            <param name="dMapY">返回地图点Y</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.FromPagePoint(PIE.Geometry.IPoint)">
            <summary>
从页面点转化为设备点
</summary>
            <param name="ptrPoint">页面点</param>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ToPagePoint(System.Drawing.Point)">
            <summary>
从设备点转化为页面点
</summary>
            <param name="point">设备点</param>
            <returns>页面点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.SetShowRulers(System.Boolean)">
            <summary>
设置是否显示标尺
</summary>
            <param name="bShow">是否显示标尺</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.IsShowRulers">
            <summary>
获取是否显示标尺
</summary>
            <returns>是否显示标尺</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ZoomToWidth">
            <summary>
缩放到页宽
</summary>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ZoomToWhole">
            <summary>
整个页面显示
</summary>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ZoomToPercent(System.Double)">
            <summary>
缩放到百分比
</summary>
            <param name="percent">百分比</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ZoomPercent">
            <summary>
获得制图比例（百分比）
</summary>
        </member>
        <member name="M:PIE.Carto.IPageLayout.FocusNextMapFrame">
            <summary>
把下一个地图设置为激活MapFrame
</summary>
        </member>
        <member name="M:PIE.Carto.IPageLayout.FocusPreviousMapFrame">
            <summary>
把上一个地图设置为激活MapFrame
</summary>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ReplaceMaps(System.Collections.Generic.IList`1{PIE.Carto.IMap})">
            <summary>
替换地图
</summary>
            <param name="listMap">地图集合</param>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetRulerSettings">
            <summary>
获取标尺对象
</summary>
            <returns>IRulerSettings对象</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.Printer">
            <summary>
获取打印对象
</summary>
            <returns>IPrinter对象</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetPage">
            <summary>
获取打印页面
</summary>
            <returns>IPage对象</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.GetContentImage">
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.IPageLayout.ClearContent">
            <summary>
清空内容
</summary>
        </member>
        <member name="P:PIE.Carto.IPageLayout.GraphicContainer">
            <summary>
获取GraphicsContainer
</summary>
        </member>
        <member name="T:PIE.Carto.IPageLayout">
            <summary>
IPageLayout接口
</summary>
        </member>
        <member name="M:PIE.Carto.IRulerSettings.GetDeflateWid">
            <summary>
获取标尺线距边界线间隔
</summary>
            <returns>int</returns>
        </member>
        <member name="M:PIE.Carto.IRulerSettings.GetWidth">
            <summary>
获取标尺宽度
</summary>
            <returns>int</returns>
        </member>
        <member name="T:PIE.Carto.IRulerSettings">
            <summary>
标尺对象接口
</summary>
        </member>
        <member name="M:PIE.Carto.IPage.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制
</summary>
            <param name="painter">对参数进行描述说明</param>
            <param name="ptrTransform">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.IPage.DrawPrintableArea(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印可视区域
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.IPage.DrawPaper(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印页面
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.IPage.DrawBorder(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制页面边框
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.IPage.DrawBackground(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制打印页面背景
</summary>
            <param name="painter">制图对象</param>
            <param name="ptrTransform">转换对象</param>
        </member>
        <member name="M:PIE.Carto.IPage.QuerySize(System.Double@,System.Double@)">
            <summary>
获取页面大小
</summary>
            <param name="dWidth">返回页面宽度</param>
            <param name="dHeight">返回页面高度</param>
        </member>
        <member name="M:PIE.Carto.IPage.PutCustomSize(System.Double,System.Double)">
            <summary>
？？？
</summary>
            <param name="dWidth">对参数进行描述说明</param>
            <param name="dHeight">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.IPage.GetPrinterPageCount(PIE.Carto.IPrinter)">
            <summary>
获取打印页数
</summary>
            <param name="pPrinter">？？</param>
            <returns>打印页数</returns>
        </member>
        <member name="M:PIE.Carto.IPage.GetPrintableBounds">
            <summary>
获取打印页面外接多边形
</summary>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.IPage.GetPageBounds(PIE.Carto.IPrinter,System.Int16,System.Double,System.Double)">
            <summary>
获取打印页面外接多边形
</summary>
            <param name="pPrinter">IPrinter</param>
            <param name="currentPage">？？</param>
            <param name="dOverlap">？？</param>
            <param name="dResolution">打印分辨率</param>
            <returns>打印页面外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.IPage.GetDeviceBounds(PIE.Carto.IPrinter,System.Int16,System.Double,System.Double)">
            <summary>
暂时未用到
</summary>
            <param name="pPrinter">对参数进行描述说明</param>
            <param name="currentPage">对参数进行描述说明</param>
            <param name="dOverlap">对参数进行描述说明</param>
            <param name="dResolution">对参数进行描述说明</param>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.IPage.Orientation">
            <summary>
打印方向1 纵向 2 横向
</summary>
        </member>
        <member name="P:PIE.Carto.IPage.PrintableAreaVisible">
            <summary>
获取或设置打印页面是否显示边界
</summary>
        </member>
        <member name="P:PIE.Carto.IPage.StretchGraphicsWithPage">
            <summary>
获取或设置制图对象是否随页面拉伸
</summary>
        </member>
        <member name="P:PIE.Carto.IPage.FormID">
            <summary>
获取或设置纸张尺寸编号
</summary>
        </member>
        <member name="P:PIE.Carto.IPage.Units">
            <summary>
获取或设置制图单位
</summary>
        </member>
        <member name="T:PIE.Carto.IPage">
            <summary>
IPage页接口
</summary>
        </member>
        <member name="M:PIE.Carto.IPrinter.VerifyDriverSettings">
            <summary>
？？？
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.Units">
            <summary>
获取制图单位
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.StartPrinting(PIE.Geometry.IEnvelope)">
            <summary>
开始打印
</summary>
            <param name="ptrPixelBounds">？？</param>
        </member>
        <member name="M:PIE.Carto.IPrinter.SetSpoolFileName(System.String!System.Runtime.CompilerServices.IsConst)">
            <summary>
？？？
</summary>
            <param name="strName">对参数进行描述说明</param>
        </member>
        <member name="M:PIE.Carto.IPrinter.GetSpoolFileName">
            <summary>
？？？
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.IPrinter.Resolution">
            <summary>
获取或设置分辨率
</summary>
            <returns>分辨率大小</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.QueryPaperSize(System.Double@,System.Double@)">
            <summary>
查询打印纸张边界大小
</summary>
            <param name="dWidth">返回宽度</param>
            <param name="dHeight">返回高度</param>
        </member>
        <member name="M:PIE.Carto.IPrinter.PrintableBounds">
            <summary>
？？
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.FinishPrinting">
            <summary>
打印结束
</summary>
        </member>
        <member name="M:PIE.Carto.IPrinter.Filter">
            <summary>
？？
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.FileExtension">
            <summary>
？？
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.DriverName">
            <summary>
获取驱动名称
</summary>
            <returns>名字字符串</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.GetName">
            <summary>
获取名称
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IPrinter.DoesDriverSupportPrinter(System.String!System.Runtime.CompilerServices.IsConst)">
            <summary>
？？？
</summary>
            <param name="strPrinterName">对参数进行描述说明</param>
            <returns>返回值说明</returns>
        </member>
        <member name="P:PIE.Carto.IPrinter.Paper">
            <summary>
获取或设置Paper对象
</summary>
        </member>
        <member name="P:PIE.Carto.IPrinter.PrintFileName">
            <summary>
获取或设置打印机名
</summary>
        </member>
        <member name="T:PIE.Carto.IPrinter">
            <summary>
Printer对象接口
</summary>
        </member>
        <member name="P:PIE.Carto.IPaper.Units">
            <summary>
获取或设置制图单位
</summary>
        </member>
        <member name="M:PIE.Carto.IPaper.QueryPaperSize(System.Double@,System.Double@)">
            <summary>
查询纸张大小
</summary>
            <param name="dWidth">返回纸张宽度</param>
            <param name="dHeight">返回纸张高度</param>
        </member>
        <member name="P:PIE.Carto.IPaper.FormID">
            <summary>
获取或设置纸张大小编号
</summary>
        </member>
        <member name="T:PIE.Carto.IPaper">
            <summary>
Paper对象接口
</summary>
        </member>
        <member name="T:PIE.Carto.PageFormID">
            <summary>
打印纸张编号
</summary>
        </member>
        <member name="P:PIE.Carto.IMapFrameElement.Map">
            <summary>
Map
</summary>
        </member>
        <member name="M:PIE.Carto.IMapFrameElement.Clone">
            <summary>
克隆
</summary>
            <returns>元素对象</returns>
        </member>
        <member name="M:PIE.Carto.IMapFrameElement.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel!System.Runtime.CompilerServices.IsConst)">
            <summary>
绘制MapFrameElement
</summary>
            <param name="graphic">制图对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="ptrTracker">TrackerCancel控制对象</param>
        </member>
        <member name="T:PIE.Carto.IMapFrameElement">
            <summary>
IMapFrameElement元素接口
</summary>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制元素
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SendToBack(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向后一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SendBackward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
低端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.BringToFront(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
顶端显示
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.BringForward(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
向前一层
</summary>
            <param name="elements">element集合</param>
        </member>
        <member name="P:PIE.Carto.IGraphicsContainer.NodeEditElement">
            <summary>
获得或设置当前编辑的Element
</summary>
            <returns>element对象</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.UpdateElement(System.String,PIE.Carto.IElement)">
            <summary>
更新Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.UnSelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
反向选择Elements
</summary>
            <param name="elements">elements集合</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.UnSelectElement(PIE.Carto.IElement)">
            <summary>
反向选择Element
</summary>
            <param name="element">element对象</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.UnSelectAllElements">
            <summary>
取消所有Element的选择
</summary>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.GetSelectionBounds">
            <summary>
选中的Element的范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.GetSelectedElements">
            <summary>
选中的Element
</summary>
            <returns>选中Elements</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SelectedElement(System.Int32)">
            <summary>
获得选中的Element
</summary>
            <param name="index">编号</param>
            <returns>选中的Element</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SelectElementsByGeometry(PIE.Geometry.IGeometry,System.Boolean)">
            <summary>
通过Geometry选择Elements
</summary>
            <param name="geometry">geometry</param>
            <param name="clearSrc">是否清除之前选择</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SelectElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
选择Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SelectElement(PIE.Carto.IElement)">
            <summary>
选择Element
</summary>
            <param name="element">element</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.SelectAllElements">
            <summary>
选择所有的Element
</summary>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.IsElementSelected(PIE.Carto.IElement)">
            <summary>
Element是否选中
</summary>
            <param name="ptrElem">element</param>
            <returns>是否选中</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.QueryElementsByPoint(PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint,System.Double)">
            <summary>
通过点查询Element
</summary>
            <param name="ptrTransform">参考系</param>
            <param name="filterGeo">点</param>
            <param name="dTolrance">缓冲距离</param>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.FindElementByName(System.String)">
            <summary>
通过Name查找Element
</summary>
            <param name="strName">element名称</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.FindElementByID(System.String)">
            <summary>
通过ID查找Element
</summary>
            <param name="elementID">elementID</param>
            <returns>Element</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.QueryElements(PIE.Geometry.IGeometry)">
            <summary>
查询Element
</summary>
            <param name="filterGeo">范围</param>
            <returns>查询Element集合</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.DeleteAllElements">
            <summary>
删除Element集合
</summary>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.DeleteElement(PIE.Carto.IElement)">
            <summary>
删除所有Element
</summary>
            <param name="element">Element</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.GetAllElements">
            <summary>
获得所有的Elements
</summary>
            <returns>所有的Elements</returns>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.AddElements(System.Collections.Generic.IList`1{PIE.Carto.IElement})">
            <summary>
添加Elements
</summary>
            <param name="elements">elements</param>
        </member>
        <member name="M:PIE.Carto.IGraphicsContainer.AddElement(PIE.Carto.IElement)">
            <summary>
添加
</summary>
            <param name="element">元素对象</param>
        </member>
        <member name="P:PIE.Carto.IGraphicsContainer.ElementSelectionCount">
            <summary>
获得选中ElementCount
</summary>
        </member>
        <member name="P:PIE.Carto.IGraphicsContainer.ElementCount">
            <summary>
获得Element的个数
</summary>
        </member>
        <member name="T:PIE.Carto.IGraphicsContainer">
            <summary>
IGraphicsContainer接口
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.IElement.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放</param>
            <param name="sy">y方向缩放</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IElement.Rotate(PIE.Geometry.IPoint,System.Double)">
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">旋转角度</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IElement.Move(System.Double,System.Double)">
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IElement.QueryBounds(PIE.Display.IDisplayTransformation)">
            <summary>
查询外接多边形
</summary>
            <param name="trasform">转换对象</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Carto.IElement.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="trasform">转换对象</param>
            <param name="tracker">TrackerCancel对象</param>
        </member>
        <member name="M:PIE.Carto.IElement.HitTest(System.Double,System.Double,System.Double)">
            <summary>
是否HitTest
</summary>
            <param name="x">x值</param>
            <param name="y">y值</param>
            <param name="tolerance">容差值</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Carto.IElement.SetVisibility(System.Boolean)">
            <summary>
设置是否可见
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.IsVisible">
            <summary>
是否可见
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.GetExtent">
            <summary>
获取范围
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.CanRotate">
            <summary>
是否可以旋转
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.GetFixedSize">
            <summary>
获取固定缩放比大小
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.GetElementType">
            <summary>
获取要素类型
</summary>
        </member>
        <member name="P:PIE.Carto.IElement.FixedAspectRatio">
            <summary>
获取或设置是否按原比例缩放
</summary>
        </member>
        <member name="P:PIE.Carto.IElement.Geometry">
            <summary>
获取或设置Geometry
</summary>
        </member>
        <member name="P:PIE.Carto.IElement.CustomerProperty">
            <summary>
获取或设置属性
</summary>
        </member>
        <member name="P:PIE.Carto.IElement.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Carto.IElement.GetID">
            <summary>
获取ID
</summary>
            <returns>字符串</returns>
        </member>
        <member name="T:PIE.Carto.IElement">
            <summary>
元素接口
</summary>
        </member>
        <member name="T:PIE.Carto.ElementType">
            <summary>
ElementType元素类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementScrew">
            <summary>
螺旋线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementLineArrow">
            <summary>
线条箭头
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementArrow">
            <summary>
箭头
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementCurve">
            <summary>
曲线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementMapSurroundFrame">
            <summary>
地图框
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementMapFrame">
            <summary>
地图框
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementGroup">
            <summary>
组
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementText">
            <summary>
文本
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementFrame">
            <summary>
框
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementPicture">
            <summary>
图片
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementRectangle">
            <summary>
长方形
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementCircle">
            <summary>
圆
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementEllipse">
            <summary>
椭圆
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementPolygon">
            <summary>
面
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementPolyline">
            <summary>
线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementMarker">
            <summary>
点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ElementUnknown">
            <summary>
未知类型
</summary>
        </member>
        <member name="M:PIE.Carto.IMap.UnSelectFeatures(System.String,System.Collections.Generic.IList`1{System.Int64})">
            <summary>
取消选择集
</summary>
            <param name="layerID">图层ID</param>
            <param name="lstFIDs">要素ID集</param>
        </member>
        <member name="M:PIE.Carto.IMap.UnSelectFeature(System.String,System.Int64)">
            <summary>
取消选择
</summary>
            <param name="layerID">图层编号</param>
            <param name="fid">要素ID</param>
        </member>
        <member name="M:PIE.Carto.IMap.UnSelectFeatures(PIE.Carto.ILayer,System.Collections.Generic.IList`1{PIE.DataSource.IFeature})">
            <summary>
取消选择集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
        </member>
        <member name="M:PIE.Carto.IMap.UnSlectFeature(PIE.Carto.ILayer,PIE.DataSource.IFeature)">
            <summary>
取消选择
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
        </member>
        <member name="M:PIE.Carto.IMap.ClearSelectionFeatures">
            <summary>
清除选择
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.SelectionFeatureCount">
            <summary>
选中要素个数
</summary>
        </member>
        <member name="M:PIE.Carto.IMap.GetLayerSelectionFeatures(PIE.Carto.ILayer)">
            <summary>
得到某个图层下要素的选择集合
</summary>
            <param name="layer">图层</param>
            <returns>选择集合</returns>
        </member>
        <member name="M:PIE.Carto.IMap.GetSelectionFeatures">
            <summary>
获得选中要素
</summary>
            <returns>选中要素集合</returns>
        </member>
        <member name="M:PIE.Carto.IMap.SelectFeatures(System.String,System.Collections.Generic.IList`1{System.Int64})">
            <summary>
选择要素集
</summary>
            <param name="layerID">图层Id</param>
            <param name="lstFIDs">要素集的ID集</param>
        </member>
        <member name="M:PIE.Carto.IMap.SelectFeatures(PIE.Carto.ILayer,System.Collections.Generic.IList`1{PIE.DataSource.IFeature})">
            <summary>
选择要素集
</summary>
            <param name="layer">图层</param>
            <param name="features">要素集</param>
        </member>
        <member name="M:PIE.Carto.IMap.SelectFeature(System.String,System.Int64)">
            <summary>
选择要素
</summary>
            <param name="layerID">图层</param>
            <param name="fid">要素编号</param>
        </member>
        <member name="M:PIE.Carto.IMap.SelectFeature(PIE.Carto.ILayer,PIE.DataSource.IFeature)">
            <summary>
选择要素
</summary>
            <param name="layer">图层</param>
            <param name="feature">要素</param>
        </member>
        <member name="M:PIE.Carto.IMap.SelectFeatureByShape(PIE.Geometry.IGeometry,System.Collections.Generic.IList`1{PIE.Carto.ILayer},System.Boolean,System.Boolean)">
            <summary>
选择要素
</summary>
            <param name="geometry">范围</param>
            <param name="queryLayers">图层集</param>
            <param name="clearBefore">是否清除之前选择集</param>
            <param name="justOne">是否只选择一个</param>
        </member>
        <member name="M:PIE.Carto.IMap.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.IMap.ToMapPoint(System.Drawing.Point)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <returns>地图点</returns>
        </member>
        <member name="M:PIE.Carto.IMap.IsRendering">
            <summary>
是否在渲染
</summary>
            <returns>是或否</returns>
        </member>
        <member name="M:PIE.Carto.IMap.GetContentImage">
            <summary>
获得显示Image
</summary>
            <returns>设备点</returns>
        </member>
        <member name="M:PIE.Carto.IMap.InvalidLayerCache(PIE.Carto.ILayer)">
            <summary>
清除无效图层缓存
</summary>
            <param name="layer">选中的图层</param>
        </member>
        <member name="M:PIE.Carto.IMap.SwipeLayer(PIE.Carto.ILayer!System.Runtime.CompilerServices.IsConst,System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
卷帘
</summary>
            <param name="layer">选中的图层</param>
            <param name="startPos">起始点</param>
            <param name="currPoint">当前点</param>
            <param name="direction">方向</param>
        </member>
        <member name="M:PIE.Carto.IMap.FindLayerByID(System.String)">
            <summary>
通过编号获得图层
</summary>
            <param name="layerID">图层ID</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.IMap.GetSubLayers(PIE.Carto.ILayer)">
            <summary>
获得Layer下所有的Layers
</summary>
            <param name="layer">图层组</param>
            <returns>Layers</returns>
        </member>
        <member name="M:PIE.Carto.IMap.GetAllLayer">
            <summary>
获得所有图层
</summary>
            <returns>所有图层</returns>
        </member>
        <member name="M:PIE.Carto.IMap.GetLayer(System.Int32)">
            <summary>
获得图层
</summary>
            <param name="index">图层编号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.IMap.MoveLayerEx(PIE.Carto.IGroupLayer,PIE.Carto.IGroupLayer,PIE.Carto.ILayer,System.Int32)">
            <summary>
移动图层
</summary>
            <param name="fromGLayer">来源图层组</param>
            <param name="toGLayer">目标图层组</param>
            <param name="layer">图层</param>
            <param name="position">移动的位置</param>
        </member>
        <member name="M:PIE.Carto.IMap.MoveLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
移动图层
</summary>
            <param name="layer">图层</param>
            <param name="toIndex">移动的位置</param>
        </member>
        <member name="M:PIE.Carto.IMap.Contains(PIE.Carto.ILayer)">
            <summary>
地图是否包含图层
</summary>
            <param name="layer">图层</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:PIE.Carto.IMap.ClearLayers">
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.IMap.DeleteLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer})">
            <summary>
删除图层组
</summary>
            <param name="layers">图层组</param>
        </member>
        <member name="M:PIE.Carto.IMap.DeleteLayer(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="M:PIE.Carto.IMap.DeleteLayer(System.Int32)">
            <summary>
删除图层
</summary>
            <param name="index">图层位置</param>
        </member>
        <member name="M:PIE.Carto.IMap.AddLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer},System.Int32)">
            <summary>
添加图层组到指定位置
</summary>
            <param name="layers">图层组</param>
            <param name="index">指定位置</param>
        </member>
        <member name="M:PIE.Carto.IMap.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
添加图层到指定位置
</summary>
            <param name="layer">图层</param>
            <param name="index">指定位置</param>
        </member>
        <member name="M:PIE.Carto.IMap.AddLayers(System.Collections.Generic.IList`1{PIE.Carto.ILayer})">
            <summary>
添加图层组
</summary>
            <param name="layers">图层组</param>
        </member>
        <member name="M:PIE.Carto.IMap.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="M:PIE.Carto.IMap.Clone">
            <summary>
克隆
</summary>
            <returns>Map克隆对象</returns>
        </member>
        <member name="P:PIE.Carto.IMap.LayerCount">
            <summary>
获取地图图层数目
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.ClipGeometry">
            <summary>
获取或设置地图ClipGeometry
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.ReferenceScale">
            <summary>
获取或设置地图ReferenceScale
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.MapUnits">
            <summary>
获取或设置地图单位
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.SpatialReference">
            <summary>
获取或设置坐标参考
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.Name">
            <summary>
获取或设置地图名称
</summary>
        </member>
        <member name="P:PIE.Carto.IMap.ID">
            <summary>
获取地图ID
</summary>
        </member>
        <member name="T:PIE.Carto.IMap">
            <summary>
IMap地图接口
</summary>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.Clear">
            <summary>
清除图层
</summary>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.GetLayer(System.Int32)">
            <summary>
按索引获取图层
</summary>
            <param name="index">索引号</param>
            <returns>图层</returns>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.Delete(PIE.Carto.ILayer)">
            <summary>
删除图层
</summary>
            <param name="layer">图层</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.DeleteLayer(System.Int32)">
            <summary>
按索引删除图层
</summary>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.AddLayer(PIE.Carto.ILayer,System.Int32)">
            <summary>
按索引添加图层
</summary>
            <param name="layer">图层</param>
            <param name="index">索引号</param>
        </member>
        <member name="M:PIE.Carto.IGroupLayer.AddLayer(PIE.Carto.ILayer)">
            <summary>
添加图层
</summary>
            <param name="layer">图层</param>
        </member>
        <member name="P:PIE.Carto.IGroupLayer.Expanded">
            <summary>
获取或者设置是否展开图层
</summary>
        </member>
        <member name="P:PIE.Carto.IGroupLayer.LayerCount">
            <summary>
获取图层数量
</summary>
        </member>
        <member name="T:PIE.Carto.IGroupLayer">
            <summary>
图层组接口
</summary>
        </member>
        <member name="M:PIE.Carto.ILayer.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Carto.ILayer.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,&lt;unknown type&gt;,PIE.SystemUI.ITrackerCancel)">
            <summary>
绘制图层
</summary>
            <param name="graphics">绘图设备对象</param>
            <param name="displayTransformation">显示转换对象</param>
            <param name="dpType">绘图类型</param>
            <param name="trackerCancel">TrackerCancel</param>
        </member>
        <member name="M:PIE.Carto.ILayer.RaisePropertyChanged">
            <summary>
触发属性变化事件(当属性变化时，调用此方法触发属性变化事件)
</summary>
        </member>
        <member name="M:PIE.Carto.ILayer.IsRequireRefresh">
            <summary>
是否需要刷新视图
</summary>
        </member>
        <member name="M:PIE.Carto.ILayer.IsValid">
            <summary>
是否是有效图层
</summary>
        </member>
        <member name="M:PIE.Carto.ILayer.GetOffset(System.Double@,System.Double@)">
            <summary>
获取偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
        </member>
        <member name="M:PIE.Carto.ILayer.SetOffset(System.Double,System.Double)">
            <summary>
设置偏移
</summary>
            <param name="dx">X方向偏移</param>
            <param name="dy">Y方向偏移</param>
        </member>
        <member name="P:PIE.Carto.ILayer.Tag">
            <summary>
获取或设置Tag
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.SpatialReference">
            <summary>
获取图层空间参考
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.MinimumScale">
            <summary>
获取或设置图层可见最小比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.MaximumScale">
            <summary>
获取或设置图层可见最大比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.AreaOfInterest">
            <summary>
设置可见区域
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.Extent">
            <summary>
获得图层范围
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.Visibility">
            <summary>
获取或设置图层可见性
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.LayerType">
            <summary>
获取图层类型
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.Description">
            <summary>
获取或设置图层描述信息
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.DataSourcePath">
            <summary>
获得数据路径
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.Name">
            <summary>
获取或设置图层名称
</summary>
        </member>
        <member name="P:PIE.Carto.ILayer.ID">
            <summary>
获取图层ID
</summary>
        </member>
        <member name="T:PIE.Carto.ILayer">
            <summary>
ILayer图层接口
</summary>
        </member>
        <member name="T:PIE.Carto.LayerType">
            <summary>
LayerType图层类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LayerTypeAnimationLayer">
@brief  动画图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeTiledLayer">
@brief  瓦片图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeMultiLayer">
@brief  多图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeGroupLayer">
@brief  组图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeGraphicsLayer">
@brief  图形图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeFeatureLayer">
@brief  矢量要素图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeRasterLayer">
@brief  栅格图层类型

</member>
        <member name="F:&lt;unknown type&gt;.LayerTypeUnknown">
@brief  未知类型

</member>
        <member name="F:PIE.Carto.AnnotateLayerProperties.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.#ctor(SysUtility._ptr_t&lt;SysCarto.AnnotateLayerProperties&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.Priority">
            <summary>
获取或设置图层标注的优先级
</summary>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.Symbol">
            <summary>
获取或设置图层注记文本符号
</summary>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.MinimumScale">
            <summary>
获取或设置图层注记可见最小比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.MaximumScale">
            <summary>
获取或设置图层注记可见最大比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.AnnoField">
            <summary>
获取或设置图层注记字段
</summary>
        </member>
        <member name="P:PIE.Carto.AnnotateLayerProperties.FeatureLayer">
            <summary>
获取或设置图层注记矢量图层
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Carto.AnnotateLayerProperties.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Carto.AnnotateLayerProperties">
            <summary>
图层注记属性类
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.Priority">
            <summary>
获取或设置图层标注的优先级
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.Symbol">
            <summary>
获取或设置图层注记文本符号
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.MinimumScale">
            <summary>
获取或设置图层注记可见最小比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.MaximumScale">
            <summary>
获取或设置图层注记可见可见最大比例尺
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.AnnoField">
            <summary>
获取或设置图层注记字段
</summary>
        </member>
        <member name="P:PIE.Carto.IAnnotateLayerProperties.FeatureLayer">
            <summary>
获取或设置图层注记矢量图层
</summary>
        </member>
        <member name="T:PIE.Carto.IAnnotateLayerProperties">
            <summary>
图层注记属性接口
</summary>
        </member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_isBlendMode">
@brief  混合标注模式

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_fieldList">
@brief  混合标注模式字段列表

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_operatorList">
@brief  混合标注模式运算符列表

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_enumPointAnnoPos">
@brief  点注记位置

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_nPriority">
@brief  优先权

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_strAnnoField">
@brief  设置注记字段

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_ptrSymbol">
@brief  文本符号

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_dMinimumScale">
@brief  最小比例

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_dMaximumScale">
@brief  最大比例

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_ptrFLayer">
@brief  要素图层

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetBlendElementList">
@brief 获取混合标注模式参与字段列表
@return QStringList--字段列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetBlendOperatorList">
@brief 获取混合标注模式运算符列表
@return QStringList--运算符列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetBlendParam(QStringList,QStringList)">
@brief 设置混合标注模式参数
@return operatorL--运算符列表 fieldL-参与字段列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.IsBlendMode">
@brief 获取图层标注模式
@return TRUE--混合标注 FALSE-正常标注

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetBlendMode(System.Boolean)">
@brief 设置混合图层标注模式 
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.Clone">
@brief 克隆
@return AnnotateLayerPropertiesPtr 图层注记属性

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetPointAnnotationPosition(SysCarto.AnnotateLayerProperties.piePointAnnoPos)">
@brief 设置点矢量注记显示的位置
@param [in] enumPos  位置
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetPointAnnotationPosition">
@brief 获取点矢量注记显示的位置
@return piePointAnnoPos 位置

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol  文本符号
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetSymbol">
@brief 获取符号
@return   SysDisplay::TextSymbolPtr 文本符号

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetPriority">
@brief 获取优先权
@return   int 优先权值

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetPriority(System.Int32)">
@brief 设置优先权
@param [in] nValue  优先权值
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetMinimumScale(System.Double)">
@brief 设置最小比例
@param [in] scale  比例
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetMinimumScale">
@brief 获取最小比例
@return  double 最小比例

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetMaximumScale(System.Double)">
@brief 设置最大比例
@param [in] scale  比例
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetMaximumScale">
@brief 获取最大比例
@return  double 最大比例

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetAnnoField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置注记字段 
@param [in] strField  注记字段 
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetAnnoField">
@brief 获取注记字段 
@return  QString 注记字段

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetFeatureLayer(SysUtility._ptr_t&lt;SysCarto.FeatureLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置要素图层
@param [in] ptrFLayer  要素图层
@return void  

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetFeatureLayer">
@brief 获取要素图层
@return  FeatureLayerPtr 要素图层

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.AnnotateLayerProperties">
@brief 类的前置声明和智能指针定义


@class AnnotateLayerProperties
@brief  图层注记属性

</member>
        <member name="T:SysCarto.FeatureLayer">
@brief 类的前置声明和智能指针定义


@brief  声明矢量要素图层类为当前类的友元类


@class FeatureLayer
@brief 矢量图层 

</member>
        <member name="D:SysDisplay.TextSymbolPtr">
@brief  文字符号类 智能指针对象

</member>
        <member name="F:SysDisplay.TextSymbol.m_Alignment">
@brief 文本对齐方式

</member>
        <member name="F:SysDisplay.TextSymbol.m_Text">
@brief 文字内容

</member>
        <member name="F:SysDisplay.TextSymbol.m_Size">
@brief 文字大小

</member>
        <member name="F:SysDisplay.TextSymbol.m_Font">
@brief 文字字体

</member>
        <member name="F:SysDisplay.TextSymbol.m_Color">
@brief 文字颜色

</member>
        <member name="F:SysDisplay.TextSymbol.m_Angle">
@brief 文字旋转角度

</member>
        <member name="M:SysDisplay.TextSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.TextSymbol.SetAlignment(SysDisplay.TextAlignment)">
@brief 设置文本对齐方式
@param[in] SysDisplay::TextAlignment alignment 文本对齐方式
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAlignment">
@brief 获得文本对齐方式
@return SysDisplay::TextAlignment 文本对齐方式

</member>
        <member name="M:SysDisplay.TextSymbol.SetText(QString)">
@brief 设置文字
@param[in] QString text 文字
@returnvoid

</member>
        <member name="M:SysDisplay.TextSymbol.GetText">
@brief 获得文字
@return QString 文字

</member>
        <member name="M:SysDisplay.TextSymbol.SetSize(System.Double)">
@brief 设置大小
@param[in] double size 大小
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetSize">
@brief 获得大小
@return double

</member>
        <member name="M:SysDisplay.TextSymbol.SetFont(QFont)">
@brief 设置字体
@param[in] QFont font 字体
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetFont">
@brief 获得字体
@return QFont 字体

</member>
        <member name="M:SysDisplay.TextSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.TextSymbol.SetAngle(System.Double)">
@brief 设置角度
@param[in] double angle 角度
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAngle">
@brief 获得角度
@return double 角度

</member>
        <member name="M:SysDisplay.TextSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.TextSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.TextSymbol">
@class TextSymbol
	* @brief 文本符号

</member>
        <member name="F:SysDisplay.Symbol.m_SymbolType">
@brief 符号类型

</member>
        <member name="M:SysDisplay.Symbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.Symbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.Symbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.Symbol.Clone">
@brief 克隆
@return SymbolPtr 克隆对象

</member>
        <member name="M:SysDisplay.Symbol.GetType">
@brief 获得符号类型
@return SymbolType 符号类型

</member>
        <member name="T:SysDisplay.Symbol">
@class Symbol
	* @brief 符号

</member>
        <member name="T:SysDisplay.TextAlignment">
@class TextAlignment
	* @brief  文本对齐方式

</member>
        <member name="F:AlignCenter">
@brief 居中对齐

</member>
        <member name="F:AlignRight">
@brief 右对齐

</member>
        <member name="F:AlignLeft">
@brief 左对齐

</member>
        <member name="T:SysDisplay.TextBackgroundType">
@class TextBackgroundType
	* @brief  文本背景类型

</member>
        <member name="F:TBTBalloonCallout">
@brief 气球

</member>
        <member name="T:SysDisplay.TextDirection">
@class TextDirection
	* @brief  文本方向

</member>
        <member name="F:TDVertical">
@brief 纵向

</member>
        <member name="F:TDAngle">
@brief 按角度

</member>
        <member name="F:TDHorizontal">
@brief 横向

</member>
        <member name="T:SysDisplay.TextCase">
@class TextCase
	* @brief  文本大小写

</member>
        <member name="F:TCSmallCaps">
@brief 小型大写

</member>
        <member name="F:TCAllCaps">
@brief 全部大写

</member>
        <member name="F:TCLowercase">
@brief 全部小写

</member>
        <member name="F:TCNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.TextPositionStyle">
@class TextPosition
	* @brief  文本位置样式

</member>
        <member name="F:TPSubscript">
@brief 下标

</member>
        <member name="F:TPSuperscript">
@brief 上标

</member>
        <member name="F:TPNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.BalloonCalloutStyle">
@class BalloonCalloutStyle
	* @brief  气球注释样式

</member>
        <member name="F:BCSOval">
@brief 椭圆

</member>
        <member name="F:BCSRoundedRectangle">
@brief 圆角矩形

</member>
        <member name="F:BCSRectangle">
@brief 矩形

</member>
        <member name="T:SysDisplay.GradientFillStyle">
@class GradientFillStyle
	* @brief  渐变色填充样式

</member>
        <member name="F:GFSNull">
@brief 无填充

</member>
        <member name="F:GFSBuffered">
@brief 缓冲渐变填充

</member>
        <member name="F:GFSCircular">
@brief 圆形渐变填充

</member>
        <member name="F:GFSRectangular">
@brief 矩形渐变填充

</member>
        <member name="F:GFSLinear">
@brief 线性渐变填充

</member>
        <member name="T:SysDisplay.SimpleFillStyle">
@class SimpleFillStyle
	* @brief  简单填充样式

</member>
        <member name="F:SFSDense7Pattern">
@brief 方式7

</member>
        <member name="F:SFSDense6Pattern">
@brief 方式6

</member>
        <member name="F:SFSDense5Pattern">
@brief 方式5

</member>
        <member name="F:SFSDense4Pattern">
@brief 方式4

</member>
        <member name="F:SFSDense3Pattern">
@brief 方式3

</member>
        <member name="F:SFSDense2Pattern">
@brief 方式2

</member>
        <member name="F:SFSDense1Pattern">
@brief 方式1

</member>
        <member name="F:SFSDiagonalCross">
@brief xxxxxxxxxxxxxxxxxxxx

</member>
        <member name="F:SFSCross">
@brief +++++++++++++++++++

</member>
        <member name="F:SFSBackwardDiagonal">
@brief ////////////////////

</member>
        <member name="F:SFSForwardDiagonal">
@brief \\\\\\\\\\\\\\\\\\\

</member>
        <member name="F:SFSVertical">
@brief ||||||||||||||||||

</member>
        <member name="F:SFSHorizontal">
@brief ------------------

</member>
        <member name="F:SFSNull">
@brief 无填充

</member>
        <member name="F:SFSSolid">
@brief 实体填充

</member>
        <member name="T:SysDisplay.LineCapStyle">
@class LineCapStyle
	* @brief 线帽样式

</member>
        <member name="F:LCSSquare">
@brief 矩形线帽样式包含最后的点

</member>
        <member name="F:LCSRound">
@brief 圆角线帽样式

</member>
        <member name="F:LCSButt">
@brief 矩形线帽样式不包含最后点

</member>
        <member name="T:SysDisplay.LineJoinStyle">
@class LineJoinStyle
	* @brief 线连接样式

</member>
        <member name="F:LJSBevel">
@brief 平角转折

</member>
        <member name="F:LJSRound">
@brief 圆角转折

</member>
        <member name="F:LJSMitre">
@brief 直接相交转折点

</member>
        <member name="T:SysDisplay.SimpleLineStyle">
@enum SimpleLineStyle
	* @brief 简单线样式

</member>
        <member name="F:SLSNull">
@brief 无

</member>
        <member name="F:SLSDashDotDot">
@brief _.._.._.

</member>
        <member name="F:SLSDashDot">
@brief _._._._.

</member>
        <member name="F:SLSDot">
@brief ............

</member>
        <member name="F:SLSDash">
@brief -----------

</member>
        <member name="F:SLSSolid">
@brief 实线

</member>
        <member name="T:SysDisplay.SimpleMarkerStyle">
@enum SimpleMarkerStyle
	* @brief 简单点样式

</member>
        <member name="F:SMSDiamond">
@brief 菱形

</member>
        <member name="F:SMSX">
@brief X叉

</member>
        <member name="F:SMSCross">
@brief 十字叉

</member>
        <member name="F:SMSSquare">
@brief 正方形

</member>
        <member name="F:SMSCircle">
@brief 圆形

</member>
        <member name="T:SysDisplay.SymbolType">
@enum SymbolType
	* @brief 样式符号类型

</member>
        <member name="F:SymbolFormattedTextSymbol">
@brief 格式化文本样式

</member>
        <member name="F:SymbolTextSymbol">
@brief 文本样式

</member>
        <member name="F:SymbolMultiLayerFillSymbol">
@brief 多层填充样式

</member>
        <member name="F:SymbolLineFillSymbol">
@brief 线符号填充样式

</member>
        <member name="F:SymbolMarkerFillSymbol">
@brief 点符号填充样式

</member>
        <member name="F:SymbolPictureFillSymbol">
@brief 图片填充样式

</member>
        <member name="F:SymbolGradientFillSymbol">
@brief 渐变填充样式

</member>
        <member name="F:SymbolSimpleFillSymbol">
@brief 简单填充样式

</member>
        <member name="F:SymbolMultiLayerLineSymbol">
@brief 多层线样式

</member>
        <member name="F:SymbolMarkerLineSymbol">
@brief 点符号线样式

</member>
        <member name="F:SymbolPictureLineSymbol">
@brief 图片线样式

</member>
        <member name="F:SymbolCartographicLineSymbol">
@brief 制图线样式

</member>
        <member name="F:SymbolSimpleLineSymbol">
@brief 简单线样式

</member>
        <member name="F:SymbolMultiLayerMarkerSymbol">
@brief 多层点样式

</member>
        <member name="F:SymbolPictureMarkerSymbol">
@brief 图片点样式

</member>
        <member name="F:SymbolCharacterMarkerSymbol">
@brief 字体点样式

</member>
        <member name="F:SymbolArrowMarkerSymbol">
@brief 箭头点样式

</member>
        <member name="F:SymbolSimpleMarkerSymbol">
@brief 简单点样式

</member>
        <member name="F:SymbolUnknownSymbol">
@brief 未知符号

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_units">
@brief 单位

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_Bounds">
@brief 全图地图范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_FittedBounds">
@brief 地图定制范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_VisibleBounds">
@brief 地图显示范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_pDevice">
@brief 绘图设备对象指针

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DeviceFrame">
@brief 设备框架范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_ptrSpatialReference">
@brief 地图的空间参考

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_dPageScale">
@brief 制图比例

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_MapScale">
@brief 当前地图比例尺

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DPI">
@brief 当前屏幕的DPI

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_Y">
@brief 每设备单位的地图距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_X">
@brief 每设备单位的地图距离X

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_Y">
@brief 每地图单位的设备距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_X">
@brief 每地图单位的设备距离X

</member>
        <member name="M:SysDisplay.DisplayTransformation.CalculateVisibleExtent">
@brief 根据屏幕范围重新计算可视范围
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.Clone">
@brief 克隆
@return DisplayTransformationPtr 克隆成果 显示转换对象指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPaintDevice(QPaintDevice*)">
@brief  设置绘图设备
@param [in] QPaintDevice* pDevice 绘图设备指针对象
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPaintDevice">
@brief  获取绘图设备
@return  QPaintDevice* 绘图设备指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetUnits(SysUI.pieUnits)">
@brief 设置单位值
@param[in] SysUI::pieUnits units 单位值
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetUnits">
@brief 获取单位值
@return SysUI::pieUnits  单位值

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数		
@param[in] double* deveiceX	设备点X集合
@param[in] double* deviceY	设备点Y集合
@param[out] double* mapX	地图点X集合
@param[out] double* mapY	地图点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从设备点转化为地图点
@param[in] QPoint point 设备点
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
@brief 从设备点转化为地图点
@param[in] int x 设备X
@param[in] int y 设备Y
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数
@param[in] double* mapX	地图点X集合
@param[in] double* mapY	地图点Y集合
@param[out] double* deveiceX	设备点X集合
@param[out] double* deviceY	设备点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图点转化为设备点
@param[in] SysGeometry::PointPtr ptrPoint 地图点
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double)">
@brief 从地图点转化为设备点
@param[in] double 地图点X
@param[in] double 地图点Y
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetZoomResolution">
@brief  获取缩放设备每像素的图上距离
@param[in] bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetZoomResolution(System.Boolean)">
@brief  设置缩放设备每像素的图上距离
@param[in] bool bValue 是否为真
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.ZoomToPageScale(System.Double)">
@brief  缩放制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPageScale(System.Double)">
@brief 设置制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPageScale">
@brief 获得制图比例尺
@return 制图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetMapScale(System.Double)">
@brief 设置地图比例尺
@param[in] double mapscale 地图比例尺
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetMapScale">
@brief 获得地图比例尺
@return 地图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDpi(System.Int32)">
@brief 设置屏幕的DPI
@param[in] int dpi X
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDpi">
@brief 获得屏幕的DPI
@return 屏幕DPI

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetResolution">
@brief 获得设备每像素的图上距离
@return 每像素的图上距离

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetExportFrame">
@brief 获得输出范围
@return QRect 输出框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDeviceFrame">
@brief 获得设备范围
@return QRect 设备框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDeviceFrame(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置设备框架
@param[in] QRect deviceFrame 设备框架
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetFittedBounds">
 @brief FittedBounds 设置VisibleBounds后，要根据DeviceFrame的宽高比进行修改，修正后的值，保存在FittedBounds。
		 用户输入的原始值，保存在VisibleBounds
 @return  SysGeometry::EnvelopePtr  Envelope包络范围对象

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetVisibleBounds">
@brief 获得可视范围
@return virtualSysGeometry::EnvelopePtr 可视范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.IsOutValidExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 判断范围是否是有效范围
@param[in] SysGeometry::EnvelopePtr ptrEnv 范围
@return bool 是否有效

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetVisibleBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可视范围
@param[in] SysGeometry::EnvelopePtr ptrVisibleBounds 可视范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetBounds">
@brief 获得全图范围
@return SysGeometry::EnvelopePtr 全图范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全图范围
@param[in] SysGeometry::EnvelopePtr ptrBounds 全图范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetSpatialReference">
@brief 获得空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param[in] SysGeometry::SpatialReferencePtr ptrSReference 空间参考
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysDisplay.ITransformEvents.VisibleBoundsUpdated">
@brief 可视地图范围事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation
@param[out] bool 范围是否变化

</member>
        <member name="F:SysDisplay.ITransformEvents.UnitsUpdated">
@brief 单位更新事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.RotationUpdated">
@brief 地图旋转变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.ResolutionUpdated">
@brief 分辨率变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.DeviceFrameUpdated">
@brief 设备范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.BoundsUpdated">
@brief 地图范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="T:SysDisplay.ITransformEvents">
@class ITransformEvents
@brief 变化事件类

</member>
        <member name="T:SysDisplay.DisplayTransformation">
@brief 类的前置声明


@brief 类的前置声明和智能指针定义
@return


@class DisplayTransformation
	* @brief 显示转换

</member>
        <member name="D:boost.typeindex.type_info">
Depending on a compiler flags, optimal implementation of type_info will be used 
as a default boost::typeindex::type_info.

Could be a std::type_info, boost::typeindex::detail::ctti_data or 
some user defined class.

type_info \b is \b not copyable or default constructible. It is \b not assignable too!
</member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <member name="T:SysUI.pieUnits">
@class pieUnits
	* @brief PIE中长度单位

</member>
        <member name="F:UnitsCount">
@brief 单位数量

</member>
        <member name="F:UnitsDecimeters">
@brief 分米

</member>
        <member name="F:UnitsDecimalDegrees">
@brief 度（十进制）

</member>
        <member name="F:UnitsKilometers">
@brief 千米

</member>
        <member name="F:UnitsMeters">
@brief 米

</member>
        <member name="F:UnitsCentimeters">
@brief 厘米

</member>
        <member name="F:UnitsMillimeters">
@brief 毫米

</member>
        <member name="F:UnitsNauticalMiles">
@brief 海里

</member>
        <member name="F:UnitsMiles">
@brief 英里

</member>
        <member name="F:UnitsYards">
@brief 码

</member>
        <member name="F:UnitsFeet">
@brief 英尺

</member>
        <member name="F:UnitsPoints">
@brief 点

</member>
        <member name="F:UnitsInches">
@brief 英寸

</member>
        <member name="F:UnitsUnknown">
@brief 未知

</member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MapSurround.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.CreateItemGraphics(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.LayerFactory.CreateDefaultLayers(QStringList!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBorder.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetRedBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetGreenBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetBlueBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterStretchColorRampRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolShadow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBorder.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.HTHTTiledLayer.GetHostList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterColormapRender.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterColormapRender.GetColorEntrys”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.UniqueValues.GetValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TransparentPreFilter.GetFilterValue”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SnapGrid.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.Page*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.FeatureClassBreaksRender.GetBackgroundSymbol”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetRedBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetGreenBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRGBRender.GetBlueBandLabel”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterColormapRender.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterColormapRender.GetColorEntrys”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterStretchColorRampRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.UniqueValues.GetValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.SetClassColors(QVector<QColor>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetUniqueValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetLabels”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetUniqueValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetLabelMap”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TextElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TextElement.ConvertDynTxt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MapSurround.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.CreateItemGraphics(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ScrewElement.ForceConstruct”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.HTHTTiledLayer.GetHostList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ScrewElement.ForceConstruct”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IEditTrace.GetBetweenPointes(SysCarto.GeometryNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.GeometryNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SnapGrid.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.Page*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.UniqueValues.GetValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetUniqueValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterUniqueValueRender.GetLabelMap”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TextElement.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TextElement.ConvertDynTxt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolShadow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBorder.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolShadow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MapSurround.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolBorder.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SymbolShadow.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ExporterPNG.GetExportFileName”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.FeatureClassBreaksRender.GetBackgroundSymbol”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysUI.EnvironmentSetting.SetPropertyValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysUI.EnvironmentSetting.GetPropertyValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysUI.EnvironmentSetting.SetTempProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysUI.EnvironmentSetting.GetTempProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.SnapGrid.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.Page*)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IPmdContents.GetCustomerProperty”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MapDocument.GetDocumentFilename”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.UniqueValues.GetValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetClassColors”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.SetClassColors(QVector<QColor>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetUniqueValues”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterClassifyColorRampRender.GetLabels”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MultiLayer.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.ActiveView.SetTrackerCancel(SysUtility._ptr_t<SysUI.TrackerCancel>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayers”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetAllLayer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSubLayers(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Map.GetLayerSelectionFeatures(SysUtility._ptr_t<SysCarto.Layer>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MapSurround.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.CreateItemGraphics(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.MarkerNorthArrow.GetGraphics”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.TransparentPreFilter.GetFilterValue”的格式错误的 XML 文档注释。-->
    </members>
</doc>