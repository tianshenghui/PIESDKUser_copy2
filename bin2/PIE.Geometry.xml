<?xml version="1.0"?>
<doc>
    <assembly>
        "Geometry"
    </assembly>
    <members>
        <member name="M:PIE.Geometry.Datum.get_Spheroid">
            <summary>
获取或设置椭球体
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.get_Name">
            <summary>
获取或设置名字
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_AngularUnit(PIE.Geometry.AngularUnit)">
            <summary>
获取或设置角度单位-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_AngularUnit">
            <summary>
获取或设置角度单位-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_PrimeMeridian(PIE.Geometry.PrimeMeridian)">
            <summary>
获取或设置本初子午线-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_PrimeMeridian">
            <summary>
获取或设置本初子午线-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_Datum(PIE.Geometry.Datum)">
            <summary>
获取或设置大地基准面-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_Datum">
            <summary>
获取或设置大地基准面-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_Remarks(System.String)">
            <summary>
获取或设置备注信息-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_Remarks">
            <summary>
获取或设置备注信息-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_Type">
            <summary>
获取投影类型-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_Alias(System.String)">
            <summary>
获取或设置别名-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_Alias">
            <summary>
获取或设置别名-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.set_RadiansPerUnit(System.Double)">
            <summary>
获取或设置每单位的弧度值-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.get_RadiansPerUnit">
            <summary>
获取或设置每单位的弧度值-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="T:SysGeometry.ProjCSType">
@class GeoCSType
	* @brief 投影坐标系类型

</member>
        <member name="F:ProjCSType_Xian1980_3_Degree_GK_CM_102E">
@brief 西安80

</member>
        <member name="F:ProjCSType_Beijing1954GK_13">
@brief 北京54

</member>
        <member name="F:ProjCSType_WGS1984UTM_1N">
@brief WGS1984

</member>
        <member name="T:SysGeometry.GeoCSType">
@class GeoCSType
	* @brief 地理坐标系类型

</member>
        <member name="F:GeoCSType_Beijing1954">
@brief 北京54

</member>
        <member name="F:GeoCSType_Xian1980">
@brief 西安80

</member>
        <member name="F:GeoCSType_WGS1984">
@brief WGS1984

</member>
        <member name="T:SysGeometry.ProjectionType">
@class ProjectionType
	* @brief

</member>
        <member name="F:Projection_LCC">
@brief 兰伯特等面积圆锥投影

</member>
        <member name="F:Projection_TM">
@brief 横轴墨卡托投影

</member>
        <member name="F:Projection_UTM">
@brief 通用横轴墨卡托投影

</member>
        <member name="T:SysGeometry.LinearUnitType">
@class LinearUnitType
	* @brief

</member>
        <member name="F:LinearUnit_Kilometer">
@brief 千米

</member>
        <member name="F:LinearUnit_Meter">
@brief 米

</member>
        <member name="T:SysGeometry.AngularUnitType">
@class AngularUnitType
	* @brief

</member>
        <member name="F:AngularUnit_Degree">
@brief 度

</member>
        <member name="F:AngularUnit_Radian">
@brief 弧度

</member>
        <member name="T:SysGeometry.PrimeMeridianType">
@class PrimeMeridianType
	* @brief

</member>
        <member name="F:PrimeMeridian_Greenwich">
@brief 格林尼治本初子午线

</member>
        <member name="T:SysGeometry.DatumType">
@class DatumType
	* @brief

</member>
        <member name="F:Datum_WGS1984">
@brief WGS84基准面（WGS84坐标系使用此基准面）

</member>
        <member name="F:Datum_Xian1980">
@brief IAG75（西安80坐标系使用此基准面）

</member>
        <member name="F:Datum_BeiJing1954">
@brief 克拉索夫斯基基准面（北京54坐标系使用此基准面）

</member>
        <member name="T:SysGeometry.SpheroidType">
@class SpheroidType
	* @brief

</member>
        <member name="F:Spheroid_WGS1984">
@brief WGS84椭球体（WGS84坐标系使用此椭球体）

</member>
        <member name="F:Spheroid_IAG75">
@brief IAG75（西安80坐标系使用此椭球体）

</member>
        <member name="F:Spheroid_Krasovsky1940">
@brief 克拉索夫斯基椭球体（北京54坐标系使用此椭球体）

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateProjection(System.Int32)">
@brief				创建投影方法
@param[in] int type	投影方法类型
@return SpheroidPtr	投影方法

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateLinearUnit(System.Int32)">
@brief 创建距离度量单位
@param[in] int type 基准面类型
@return SpheroidPtr 基准面

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateAngularUnit(System.Int32)">
@brief 创建角度度量单位
@param[in] int type 角度度量单位类型
@return SpheroidPtr 角度度量单位

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreatePrimeMeridian(System.Int32)">
@brief 创建子午线
@param[in] int type 子午线类型
@return SpheroidPtr 子午线

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateDatum(System.Int32)">
@brief 创建基准面
@param[in] int type 基准面类型
@return SpheroidPtr 基准面

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateSpheroid(System.Int32)">
@brief 创建椭球体
@param[in] int type 椭球体类型
@return SpheroidPtr 椭球体

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateSpatialReference(System.Int32)">
@brief 创建空间参考
@param[in] int code EPSG编码
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.CreateSpatialReference(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 创建空间参考
@param[in] char* pCharWKT WKT
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialReferenceFactory.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialReferenceFactory">
@class SpatialReferenceFactory
	* @brief 空间参考工厂类

</member>
        <member name="M:PIE.Geometry.Spheroid.get_Flattening">
            <summary>
获取椭球体的扁率
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.get_SemiMinorAxis">
            <summary>
获取椭球体短半轴的值
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.get_SemiMajorAxis">
            <summary>
获取椭球体长半轴的值
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.get_Name">
            <summary>
获取名称
</summary>
        </member>
        <member name="F:PIE.Geometry.GeometryCollection.m_pCInstanceSub">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.#ctor(SysUtility._ptr_t&lt;SysGeometry.GeometryCollection&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.ClearGeometries">
            <summary>
清除
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.GetGeometry(System.Int32)">
            <summary>
获得Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>Geometry指针</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.RemoveGeometry(System.Int32)">
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.InsertGeometry(System.Int32,PIE.Geometry.IGeometry)">
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.AddGeometry(PIE.Geometry.IGeometry)">
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.GetGeometryCount">
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryCollection.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.GeometryCollection">
            <summary>
Geometry对象
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.set_MetersPerUnit(System.Double)">
            <summary>
获取或设置单位长度-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.get_MetersPerUnit">
            <summary>
获取或设置单位长度-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.set_RotationAngle(System.Double)">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.set_CenterY(System.Double)">
            <summary>
获取或设置中心点Y
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.set_CenterX(System.Double)">
            <summary>
获取或设置中心点X
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.set_SemiMinor(System.Double)">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.set_SemiMajor(System.Double)">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.set_YMax(System.Double)">
            <summary>
设置右上角Y坐标
</summary>
            <param name="yMax">右上角Y坐标</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.get_YMax">
            <summary>
获得右上角Y坐标
</summary>
            <returns>获得右上角Y坐标</returns>
        </member>
        <member name="M:PIE.Geometry.Envelope.set_XMax(System.Double)">
            <summary>
设置右上角X坐标
</summary>
            <param name="xMax">右上角X坐标</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.get_XMax">
            <summary>
获得右上角X坐标
</summary>
            <returns>获得右上角X坐标</returns>
        </member>
        <member name="M:PIE.Geometry.Envelope.set_YMin(System.Double)">
            <summary>
左下角Y坐标
</summary>
            <param name="yMin">左下角Y坐标</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.get_YMin">
            <summary>
获得左下角Y坐标
</summary>
            <returns>获得左下角Y坐标</returns>
        </member>
        <member name="M:PIE.Geometry.Envelope.set_XMin(System.Double)">
            <summary>
设置左下角X坐标
</summary>
            <param name="xMin">设置左下角X坐标</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.get_XMin">
            <summary>
获得左下角X坐标
</summary>
            <returns>获得左下角X坐标</returns>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.set_Longitude(System.Double)">
            <summary>
获取或设置设置子午线经度值-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.get_Longitude">
            <summary>
获取或设置设置子午线经度值-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_LatitudeOfOrigin(System.Double)">
            <summary>
获取或初始纬度-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_LatitudeOfOrigin">
            <summary>
获取或初始纬度-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_ScaleFactor(System.Double)">
            <summary>
获取或设置比例参数-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_ScaleFactor">
            <summary>
获取或设置比例参数-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_FalseNorthing(System.Double)">
            <summary>
获取或设置北向伪偏移-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_FalseNorthing">
            <summary>
获取或设置北向伪偏移-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_FalseEasting(System.Double)">
            <summary>
获取或设置东向伪偏移-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_FalseEasting">
            <summary>
获取或设置东向伪偏移-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_CentralMeridian(System.Double)">
            <summary>
获取或设置中央经线-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_CentralMeridian">
            <summary>
获取或设置中央经线-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryOperator.ConvertGeometryToJSON(PIE.Geometry.IGeometry)">
            <summary>
转化几何样式为JSON串
</summary>
            <param name="ptrGeometry">Geometry对象CLR</param>
            <returns>Json字符串</returns>
            <summary>
转化几何样式为JSON串
</summary>
            <param name="ptrGeometry">Geometry对象C++</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryOperator.ConvertGeometryToJSON(PIE.Geometry.IGeometry,System.String@)">
            <summary>
转化几何样式为JSON串
</summary>
            <param name="ptrGeometry">Geometry对象CLR</param>
            <param name="strPointGeomtry">Json字符串</param>
            <returns>是否成功</returns>
            <summary>
转化几何样式为JSON串
</summary>
            <param name="ptrGeometry">Geometry对象C++</param>
            <param name="strPointGeomtry">Json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryOperator.ConvertJSONToGeometry(System.String)">
            <summary>
转化JSON串为几何样式
</summary>
            <param name="geomtryJSON"> Json字符串</param>
            <returns>Geometry对象CLR</returns>
            <summary>
转化JSON串为几何样式
</summary>
            <param name="geomtryJSON"> Json字符串</param>
            <returns>Geometry对象CLR</returns>
        </member>
        <member name="T:PIE.Geometry.GeometryOperator">
            <summary>
几何控制器
</summary>
        </member>
        <member name="T:SysGeometry.GeometryOperator">
@class Geometryperator
	* @brief 几何控制器

</member>
        <member name="M:PIE.Geometry.Geometry.set_SpatialReference(PIE.Geometry.ISpatialReference)">
            <summary>
设置空间参考（如果存在直接覆盖，不是转换）
</summary>
            <param name="spatialReference">空间参考</param>
        </member>
        <member name="M:PIE.Geometry.Geometry.get_SpatialReference">
            <summary>
获得空间参考
</summary>
            <returns>空间参考</returns>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.get_TargetSpatialReference">
            <summary>
获得目标坐标系
</summary>
            <returns>目标坐标系</returns>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.get_SourceSpatialReference">
            <summary>
获得源坐标系
</summary>
            <returns>源坐标系</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateProjection(&lt;unknown type&gt;)">
            <summary>
创建投影方法
</summary>
            <param name="type">投影方法类型</param>
            <returns>投影方法</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateLinearUnit(&lt;unknown type&gt;)">
            <summary>
创建距离度量单位
</summary>
            <param name="type">距离度量单位类型</param>
            <returns>距离度量单位</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateAngularUnit(&lt;unknown type&gt;)">
            <summary>
创建角度度量单位
</summary>
            <param name="type">角度度量单位类型</param>
            <returns>角度度量单位</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreatePrimeMeridian(&lt;unknown type&gt;)">
            <summary>
创建子午线
</summary>
            <param name="type">子午线类型</param>
            <returns>子午线</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateDatum(&lt;unknown type&gt;)">
            <summary>
创建基准面
</summary>
            <param name="type">基准面类型</param>
            <returns>基准面</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateSpheroid(&lt;unknown type&gt;)">
            <summary>
创建椭球体
</summary>
            <param name="type">椭球体类型</param>
            <returns>椭球体</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateSpatialReference(System.Int32)">
            <summary>
创建空间参考
</summary>
            <param name="code">EPSG编码</param>
            <returns>空间参考</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.ConstructCLRISpatialReference(System.Void*)">
            <summary>
创建ISpatialReference
</summary>
            <param name="ptrSpatialReference">SpatialReference对象C++</param>
            <returns>ISpatialReference对象CLR</returns>
            <summary>
创建ISpatialReference
</summary>
            <param name="ptrSpatialReference">SpatialReference对象C++</param>
            <returns>ISpatialReference对象CLR</returns>
        </member>
        <member name="M:PIE.Geometry.SpatialReferenceFactory.CreateSpatialReference(System.String)">
            <summary>
创建空间参考
</summary>
            <param name="strWkt">WKT字符串</param>
            <returns>空间参考</returns>
            <summary>
创建空间参考
</summary>
            <param name="strWkt">WKT字符串</param>
            <returns>空间参考</returns>
        </member>
        <member name="T:PIE.Geometry.SpatialReferenceFactory">
            <summary>
空间参考工厂
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_RotationAngle(System.Double)">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_CenterY(System.Double)">
            <summary>
获取或设置中心点Y坐标
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_CenterX(System.Double)">
            <summary>
获取或设置中心点X坐标
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_SemiMinor(System.Double)">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_SemiMajor(System.Double)">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.get_CentralAngle">
            <summary>
获取中心角度
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_EndAngle(System.Double)">
            <summary>
获取或设置终止角度
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.set_StartAngle(System.Double)">
            <summary>
获取或设置起始角度
</summary>
        </member>
        <member name="M:PIE.Geometry.GeometryFactory.ConstructCLRGeometry(System.Void*)">
            <summary>
创建Geometry
</summary>
            <param name="pGeo">Geometry对象C++</param>
            <returns>Geometry对象CLR</returns>
        </member>
        <member name="M:PIE.Geometry.GeometryFactory.ConstructCLREnvelope(System.Void*)">
            <summary>
创建Envelope
</summary>
            <param name="pEnv">Envelope对象C++</param>
            <returns>Envelope对象CLR</returns>
            <summary>
创建Envelope
</summary>
            <param name="pEnv">Envelope对象C++</param>
            <returns>Envelope对象CLR</returns>
        </member>
        <member name="T:PIE.Geometry.GeometryFactory">
            <summary>
GeometryFactory对象
</summary>
        </member>
        <member name="F:PIE.Geometry.MultiPolygon.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.#ctor(SysUtility._ptr_t&lt;SysGeometry.MultiPolygon&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.IsPointOnSurface(PIE.Geometry.IPoint)">
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.GetArea">
            <summary>
获得面积
</summary>
            <returns>面积</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.GetLength">
            <summary>
获得长度
</summary>
            <returns>长度</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.ClearGeometries">
            <summary>
清除
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.GetGeometry(System.Int32)">
            <summary>
获得Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>Geometry指针</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.RemoveGeometry(System.Int32)">
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.InsertGeometry(System.Int32,PIE.Geometry.IGeometry)">
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.AddGeometry(PIE.Geometry.IGeometry)">
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.GetGeometryCount">
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolygon.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.MultiPolygon">
            <summary>
多面
</summary>
        </member>
        <member name="T:PIE.Geometry.IMultiPolygon">
            <summary>
多面对象接口
</summary>
        </member>
        <member name="D:SysGeometry.MultiPolygonPtr">
@brief 多面对象 智能指针对象

</member>
        <member name="M:SysGeometry.MultiPolygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.MultiPolygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.MultiPolygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.MultiPolygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.MultiPolygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.MultiPolygon.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolygon.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.MultiPolygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.MultiPolygon">
@class MultiPolygon
	* @brief 多面对象

</member>
        <member name="F:PIE.Geometry.MultiPolyline.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.#ctor(SysUtility._ptr_t&lt;SysGeometry.MultiPolyline&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.IsClosed">
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetEndPoint">
            <summary>
获得终止点
</summary>
            <return>终止点</return>
            <summary>
获得终止点
</summary>
            <return>终止点</return>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetStartPoint">
            <summary>
获得起始点
</summary>
            <return>起始点</return>
            <summary>
获得起始点
</summary>
            <return>起始点</return>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetLength">
            <summary>
获得长度
</summary>
            <return>长度</return>
            <summary>
获得距离
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.ClearGeometries">
            <summary>
清除
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetGeometry(System.Int32)">
            <summary>
获得Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>Geometry指针</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.RemoveGeometry(System.Int32)">
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.InsertGeometry(System.Int32,PIE.Geometry.IGeometry)">
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.AddGeometry(PIE.Geometry.IGeometry)">
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.GetGeometryCount">
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPolyline.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.MultiPolyline">
            <summary>
多线
</summary>
        </member>
        <member name="T:PIE.Geometry.IMultiPolyline">
            <summary>
多线对象接口
</summary>
        </member>
        <member name="D:SysGeometry.MultiPolylinePtr">
@brief  多线对象 智能指针对象

</member>
        <member name="M:SysGeometry.MultiPolyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.MultiPolyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance 距离
@return PointPtr 点对象指针

</member>
        <member name="M:SysGeometry.MultiPolyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.MultiPolyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.MultiPolyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.MultiPolyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.MultiPolyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.MultiPolyline.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolyline.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPolyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.MultiPolyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.MultiPolyline">
@class MultiPolyline
	* @brief 多线对象

</member>
        <member name="F:PIE.Geometry.MultiPoint.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.#ctor(SysUtility._ptr_t&lt;SysGeometry.MultiPoint&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.ClearGeometries">
            <summary>
清除
</summary>
            <returns>是否成功</returns>
            <summary>
清除
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetGeometry(System.Int32)">
            <summary>
获得Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>Geometry指针</returns>
            <summary>
获得Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>Geometry指针</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.RemoveGeometry(System.Int32)">
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.InsertGeometry(System.Int32,PIE.Geometry.IGeometry)">
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.AddGeometry(PIE.Geometry.IGeometry)">
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetGeometryCount">
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
            <summary>
清除点
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>值</return>
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <returns>编号为index的点的Z</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <returns>编号为index的点的Y</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <returns>编号为index的点的X</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetPoint(System.Int32)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <return>点</return>
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <returns>点</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
            <summary>
获得点数目
</summary>
            <returns>得点数目</returns>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.MultiPoint.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.MultiPoint">
            <summary>
多点对象
</summary>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.ClearGeometries">
            <summary>
清除
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.GetGeometry(System.Int32)">
            <summary>
获得Geometry对象
</summary>
            <param name="index">获得的编号</param>
            <returns>Geometry指针</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.RemoveGeometry(System.Int32)">
            <summary>
移除Geometry对象
</summary>
            <param name="index">移除的编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.InsertGeometry(System.Int32,PIE.Geometry.IGeometry)">
            <summary>
插入Geometry对象
</summary>
            <param name="index">插入的编号</param>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.AddGeometry(PIE.Geometry.IGeometry)">
            <summary>
增加Geometry对象
</summary>
            <param name="ptrGeo">Geometry智能指针</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometryCollection.GetGeometryCount">
            <summary>
获得Geometry的总个数
</summary>
            <returns>总个数</returns>
        </member>
        <member name="T:PIE.Geometry.IGeometryCollection">
            <summary>
表面对象接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.GetPoint(System.Int32)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="x">赋值点的x值集合</param>
            <param name="y">赋值点的y值集合</param>
            <param name="z">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IMultiPoint.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="T:PIE.Geometry.IMultiPoint">
            <summary>
多点对象接口
</summary>
        </member>
        <member name="D:SysGeometry.MultiPointPtr">
@brief  多点对象 智能指针对象

</member>
        <member name="M:SysGeometry.MultiPoint.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.MultiPoint.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.MultiPoint.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.RemovePoint(System.Int32)">
@brief 删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.GetZ(System.Int32)">
@brief 获得点的Z坐标值
@param[in] int index 编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.MultiPoint.GetY(System.Int32)">
@brief 获得点的Y坐标值
@param[in] int index 编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.MultiPoint.GetX(System.Int32)">
@brief 获得点的X坐标值
@param[in] int index 编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.MultiPoint.GetPoint(System.Int32)">
@brief 获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.MultiPoint.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.MultiPoint.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.MultiPoint.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.MultiPoint.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.MultiPoint">
@class MultiPoint
	* @brief 多点对象

</member>
        <member name="D:SysGeometry.GeometryCollectionPtr">
@brief 图形集合 智能指针对象

</member>
        <member name="F:SysGeometry.GeometryCollection.m_QVectorGeometry">
@brief Geometry集合对象

</member>
        <member name="M:SysGeometry.GeometryCollection.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.GeometryCollection.Centroid">
@brief 获得质点
@return GeometryPtr 质点指针

</member>
        <member name="M:SysGeometry.GeometryCollection.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围对象指针

</member>
        <member name="M:SysGeometry.GeometryCollection.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.GeometryCollection.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.GeometryCollection.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.GeometryCollection.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.GeometryCollection.ClearGeometries">
@brief 清除Geometry
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.GetGeometry(System.Int32)">
@brief 获得Geometry对象
@param[in] int index 移除的编号
@return GeometryPtr Geometry指针

</member>
        <member name="M:SysGeometry.GeometryCollection.RemoveGeometry(System.Int32)">
@brief 移除Geometry对象
@param[in] int index 移除的编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.InsertGeometry(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入Geometry对象
@param[in] int index 插入的编号
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.AddGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 增加Geometry对象
@param[in] GeometryPtr ptrGeo Geometry智能指针
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeometryCollection.GetGeometryCount">
@brief 获得Geometry的总个数
@return int 图形Geometry的总个数

</member>
        <member name="M:SysGeometry.GeometryCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.GeometryCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.GeometryCollection">
@class GeometryCollection
	* @brief 图形集合

</member>
        <member name="F:PIE.Geometry.Ellipse.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.#ctor(SysUtility._ptr_t&lt;SysGeometry.Ellipse&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.IsPointOnSurface(PIE.Geometry.IPoint)">
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
        </member>
        <member name="M:PIE.Geometry.Ellipse.GetArea">
            <summary>
获得面积
</summary>
            <returns>面积</returns>
            <summary>
获得面积
</summary>
            <returns>面积</returns>
        </member>
        <member name="M:PIE.Geometry.Ellipse.GetLength">
            <summary>
获得长度
</summary>
            <returns>长度</returns>
            <summary>
获得长度
</summary>
            <returns>长度</returns>
        </member>
        <member name="M:PIE.Geometry.Ellipse.GetPointsOnEdge(System.Collections.Generic.IList`1{PIE.Geometry.IPoint}@)">
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Ellipse.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
        </member>
        <member name="M:PIE.Geometry.Ellipse.PutCoords(System.Double,System.Double)">
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
        </member>
        <member name="P:PIE.Geometry.Ellipse.RotationAngle">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Geometry.Ellipse.CenterY">
            <summary>
获取或设置中心点Y
</summary>
        </member>
        <member name="P:PIE.Geometry.Ellipse.CenterX">
            <summary>
获取或设置中心点X
</summary>
        </member>
        <member name="P:PIE.Geometry.Ellipse.SemiMinor">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.Ellipse.SemiMajor">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ellipse.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Ellipse">
            <summary>
椭圆
</summary>
        </member>
        <member name="M:PIE.Geometry.IEllipse.GetPointsOnEdge(System.Collections.Generic.IList`1{PIE.Geometry.IPoint}@)">
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IEllipse.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
        </member>
        <member name="M:PIE.Geometry.IEllipse.PutCoords(System.Double,System.Double)">
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
        </member>
        <member name="P:PIE.Geometry.IEllipse.RotationAngle">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Geometry.IEllipse.CenterY">
            <summary>
获取或设置中心点Y
</summary>
        </member>
        <member name="P:PIE.Geometry.IEllipse.CenterX">
            <summary>
获取或设置中心点X
</summary>
        </member>
        <member name="P:PIE.Geometry.IEllipse.SemiMinor">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.IEllipse.SemiMajor">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="T:PIE.Geometry.IEllipse">
            <summary>
IEllipse椭圆接口
</summary>
        </member>
        <member name="D:SysGeometry.EllipsePtr">
@brief 椭圆的智能指针对象

</member>
        <member name="F:SysGeometry.Ellipse.m_RotationAngle">
@brief 旋转角度

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMinor">
@brief 短半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMajor">
@brief 长半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterY">
@brief 中心点Y

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterX">
@brief 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Ellipse.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Ellipse.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ellipse.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ellipse.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ellipse.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ellipse.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ellipse.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ellipse.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ellipse.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ellipse.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ellipse.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Ellipse.PutCoords(System.Double,System.Double)">
@brief 设置中心点坐标
@param[in] double centerX x坐标
@param[in] double centerY y坐标
@return void

</member>
        <member name="M:SysGeometry.Ellipse.SetRotationAngle(System.Double)">
@brief 设置旋转角度
@param[in] double angel 设置旋转角度
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetRotationAngle">
@brief 获取旋转角度
@return double 旋转角度

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterY(System.Double)">
@brief 设置中心点Y
@param[in] double y 设置中心点Y
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterY">
@brief 获取中心点Y
@return double 中心点Y

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterX(System.Double)">
@brief 设置中心点X
@param[in] double x 设置中心点X
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterX">
@brief 获取中心点X坐标
@return double 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMinor(System.Double)">
@brief 设置短半轴
@param[in] double semiMinor 短半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMinor">
@brief 获取短半轴
@return double 短半轴

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMajor(System.Double)">
@brief 设置长半轴
@param[in] double semiMajor 长半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMajor">
@brief 获取长半轴
@return double 长半轴

</member>
        <member name="M:SysGeometry.Ellipse.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ellipse.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ellipse">
@class Ellipse
	* @brief 椭圆

</member>
        <member name="F:PIE.Geometry.Polygon.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Polygon.#ctor(SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polygon.IsPointOnSurface(PIE.Geometry.IPoint)">
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetArea">
            <summary>
获得面积
</summary>
            <returns>面积</returns>
            <summary>
获得面积
</summary>
            <returns>面积</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetLength">
            <summary>
获得长度
</summary>
            <returns>长度</returns>
            <summary>
获得长度
</summary>
            <returns>长度</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">返回X</param>
            <param name="y">返回Y</param>
            <param name="z">返回Z</param>
        </member>
        <member name="M:PIE.Geometry.Polygon.QueryCoords(System.Int32,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
重新设置点
</summary>
            <param name="index">编号</param>
            <param name="dx">X</param>
            <param name="dy">Y</param>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
获取点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">返回X</param>
            <param name="dy">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetPoint(System.Int32)">
            <summary>
获取点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.SetPoints(System.Int32,System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.AddPoint(System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetExteriorRing">
            <summary>
获得外环
</summary>
            <returns>外环</returns>
            <summary>
获得外环
</summary>
            <returns>外环</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.SetExteriorRing(PIE.Geometry.IRing)">
            <summary>
设置外环
</summary>
            <param name="exteriorRing">外环</param>
            <returns>是否成功</returns>
            <summary>
设置外环
</summary>
            <param name="exteriorRing">外环</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetInteriorRingCount">
            <summary>
得到内环个数
</summary>
            <returns>内环个数</returns>
            <summary>
得到内环个数
</summary>
            <returns>内环个数</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.ClearInteriorRings">
            <summary>
清除内环
</summary>
            <returns>是否成功</returns>
            <summary>
清除内环
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.RemoveInteriorRing(System.Int32)">
            <summary>
移除内环
</summary>
            <param name="index">编号</param>
            <returns>是否成功</returns>
            <summary>
移除内环
</summary>
            <param name="index">编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.GetInteriorRingByIndex(System.Int32)">
            <summary>
通过编号获得内环
</summary>
            <param name="index">编号</param>
            <returns>内环</returns>
            <summary>
通过编号获得内环
</summary>
            <param name="index">编号</param>
            <returns>内环</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.AddInteriorRing(PIE.Geometry.IRing)">
            <summary>
添加内环
</summary>
            <param name="interiorRing">内环</param>
            <returns>是否成功</returns>
            <summary>
添加内环
</summary>
            <param name="interiorRing">内环</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Polygon.CloseRings">
            <summary>
关闭所有的Ring
</summary>
            <summary>
关闭所有的Ring
</summary>
        </member>
        <member name="M:PIE.Geometry.Polygon.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polygon.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polygon.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Polygon">
            <summary>
面对象
</summary>
        </member>
        <member name="M:PIE.Geometry.ISurface.IsPointOnSurface(PIE.Geometry.IPoint)">
            <summary>
点是否在面上
</summary>
            <param name="point">点</param>
            <returns>点是否在面上</returns>
        </member>
        <member name="M:PIE.Geometry.ISurface.GetArea">
            <summary>
获得面积
</summary>
            <returns>面积</returns>
        </member>
        <member name="M:PIE.Geometry.ISurface.GetLength">
            <summary>
获得长度
</summary>
            <returns>长度</returns>
        </member>
        <member name="T:PIE.Geometry.ISurface">
            <summary>
表面对象接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IPolygon.GetExteriorRing">
            <summary>
获得外环
</summary>
            <returns>外环</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.SetExteriorRing(PIE.Geometry.IRing)">
            <summary>
设置外环
</summary>
            <param name="exteriorRing">外环</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.GetInteriorRingCount">
            <summary>
得到内环个数
</summary>
            <returns>内环个数</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.ClearInteriorRings">
            <summary>
清除内环
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.RemoveInteriorRing(System.Int32)">
            <summary>
移除内环
</summary>
            <param name="index">编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.GetInteriorRingByIndex(System.Int32)">
            <summary>
通过编号获得内环
</summary>
            <param name="index">编号</param>
            <returns>内环</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.AddInteriorRing(PIE.Geometry.IRing)">
            <summary>
添加内环
</summary>
            <param name="interiorRing">内环</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IPolygon.CloseRings">
            <summary>
关闭所有的Ring
</summary>
        </member>
        <member name="T:PIE.Geometry.IPolygon">
            <summary>
面对象接口
</summary>
        </member>
        <member name="D:SysGeometry.PolygonPtr">
@brief 面对象 智能指针对象

</member>
        <member name="F:SysGeometry.Polygon.m_ExteriorRing">
@brief 外环

</member>
        <member name="F:SysGeometry.Polygon.m_InteriorRings">
@brief 内环集合

</member>
        <member name="M:SysGeometry.Polygon.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Polygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polygon.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polygon.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polygon.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polygon.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polygon.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polygon.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polygon.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Polygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Polygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polygon.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetZ(System.Int32)">
@brief 通过索引获得点的Z值
@param[in] int index 编号
@return double 编号为index的点的Z值

</member>
        <member name="M:SysGeometry.Polygon.GetY(System.Int32)">
@brief 通过索引获得点的Y值
@param[in] int index 编号
@return double 编号为index的点的Y值

</member>
        <member name="M:SysGeometry.Polygon.GetX(System.Int32)">
@brief 通过索引获得点的X值
@param[in] int index 编号
@return double 编号为index的点的X值

</member>
        <member name="M:SysGeometry.Polygon.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.Polygon.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 要赋值点的数量
@param[in] double* px  X坐标的数组中的值
@param[in] double* py  Y坐标的数组中的值
@param[in] double* pz = NULL   Z坐标的数组中的值  默认为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x  X坐标
@param[in] double y  Y坐标
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPointCount">
@brief 获得点数目
@return int 点的数目

</member>
        <member name="M:SysGeometry.Polygon.GetExteriorRing">
@brief 获得外环
@return RingPtr 外环

</member>
        <member name="M:SysGeometry.Polygon.SetExteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置外环
@param[in] RingPtr interiorRing 外环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingCount">
@brief 得到内环个数
@return int 内环个数

</member>
        <member name="M:SysGeometry.Polygon.ClearInteriorRings">
@brief 清除内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemoveInteriorRing(System.Int32)">
@brief 移除内环
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingByIndex(System.Int32)">
@brief 通过编号获得内环
@param[in] int index 编号
@return RingPtr 内环

</member>
        <member name="M:SysGeometry.Polygon.AddInteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加内环
@param[in] RingPtr interiorRing 内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.CloseRings">
@brief 关闭所有的Ring
@return

</member>
        <member name="M:SysGeometry.Polygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polygon">
@class Polygon
	* @brief 面对象

</member>
        <member name="D:SysGeometry.SurfacePtr">
@brief  表面对象的智能指针对象

</member>
        <member name="M:SysGeometry.Surface.GetLength(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Surface.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Surface.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Surface.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysGeometry.Surface.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Surface">
@class Surface
	* @brief 表面对象

</member>
        <member name="F:PIE.Geometry.Envelope.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.Normalize">
            <summary>
规范化（重新配置最大和最小的X和Y）
</summary>
            <summary>
规范化（重新配置最大和最小的X和Y）
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.CenterAt(PIE.Geometry.IPoint)">
            <summary>
重新设置中心点
</summary>
            <param name="point">中心点</param>
            <summary>
重新设置中心点
</summary>
            <param name="point">中心点</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.CenterAt(System.Double,System.Double)">
            <summary>
重新设置中心点
</summary>
            <param name="dx">中心点X</param>
            <param name="dy">中心点Y</param>
            <summary>
重新设置中心点
</summary>
            <param name="dx">中心点X</param>
            <param name="dy">中心点Y</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
            <summary>
缩放
</summary>
            <param name="dx">X方向的缩放参数</param>
            <param name="dy">Y方向的缩放参数</param>
            <param name="asRatio">是否按照比例缩放</param>
            <summary>
投影转换
</summary>
            <param name="dx">X方向的缩放参数</param>
            <param name="dy">Y方向的缩放参数</param>
            <param name="asRatio">是否按照比例缩放</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.QueryCoords(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
获得坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右上角的X</param>
            <param name="yMax">右上角的Y</param>
            <summary>
获得四至坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右下角的X</param>
            <param name="yMax">右下角的Y</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
            <summary>
设置坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右上角的X</param>
            <param name="yMax">右上角的Y</param>
            <summary>
设置四至坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右下角的X</param>
            <param name="yMax">右下角的Y</param>
        </member>
        <member name="M:PIE.Geometry.Envelope.GetHeight">
            <summary>
获得高度
</summary>
            <returns>获得高度</returns>
            <summary>
获得高度
</summary>
            <returns>获得高度</returns>
        </member>
        <member name="M:PIE.Geometry.Envelope.GetWidth">
            <summary>
获得宽度
</summary>
            <returns>获得宽度</returns>
            <summary>
获得宽度
</summary>
            <returns>获得宽度</returns>
        </member>
        <member name="P:PIE.Geometry.Envelope.YMax">
            <summary>
获得右上角Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.Envelope.XMax">
            <summary>
获得右上角X坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.Envelope.YMin">
            <summary>
获得左下角Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.Envelope.XMin">
            <summary>
获得左下角X坐标
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Envelope.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Envelope">
            <summary>
Envelope包络范围
</summary>
        </member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:PIE.Geometry.SplineCurve.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.#ctor(SysUtility._ptr_t&lt;SysGeometry.SplineCurve&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.QueryCoords(System.Int32,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
重新设置点
</summary>
            <param name="index">编号</param>
            <param name="dx">X</param>
            <param name="dy">Y</param>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
获取点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">返回X</param>
            <param name="dy">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetPoint(System.Int32)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.SetPoints(System.Int32,System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.AddPoint(System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetDataPoint(System.Collections.Generic.List`1{PIE.Geometry.IPoint}@)">
            <summary>
获取曲线点集全
</summary>
            <param name="list">点集合</param>
            <summary>
获取曲线点集全
</summary>
            <param name="list">点集合</param>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <returns>返回点</returns>
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <returns>返回点</returns>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.IsClosed">
            <summary>
是否闭合
</summary>
            <returns>是否闭合</returns>
            <summary>
是否闭合
</summary>
            <returns>是否闭合</returns>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetEndPoint">
            <summary>
获得终止点
</summary>
            <returns>终止点</returns>
            <summary>
获得终止点
</summary>
            <returns>终止点</returns>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetStartPoint">
            <summary>
获得起始点
</summary>
            <returns>起始点</returns>
            <summary>
获得起始点
</summary>
            <returns>起始点</returns>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.GetLength">
            <summary>
获得长度
</summary>
            <returns>长度</returns>
            <summary>
获得长度
</summary>
            <returns>长度</returns>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.SplineCurve.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.SplineCurve">
            <summary>
曲线
</summary>
        </member>
        <member name="T:PIE.Geometry.ISplineCurve">
            <summary>
ISplineCurve样条曲线接口
</summary>
        </member>
        <member name="D:SysGeometry.SplineCurvePtr">
@brief  单线段的智能指针对象

</member>
        <member name="M:SysGeometry.SplineCurve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.SplineCurve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.SplineCurve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.SplineCurve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.SplineCurve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.SplineCurve.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.SplineCurve.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SplineCurve.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SplineCurve.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SplineCurve.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SplineCurve.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.SplineCurve.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.SplineCurve.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.SplineCurve.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.SplineCurve.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.SplineCurve.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.SplineCurve.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.SplineCurve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SplineCurve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SplineCurve">
@class SplineCurve
	* @brief 单线段

</member>
        <member name="F:PIE.Geometry.Ring.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Ring.#ctor(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ring.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.Ring.QueryCoords(System.Int32,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.Ring.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Ring.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
重新设置点
</summary>
            <param name="index">编号</param>
            <param name="dx">X</param>
            <param name="dy">Y</param>
        </member>
        <member name="M:PIE.Geometry.Ring.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
获取点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">返回X</param>
            <param name="dy">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.Ring.GetPoint(System.Int32)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Ring.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.SetPoints(System.Int32,System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.AddPoint(System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Ring.IsClosed">
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetEndPoint">
            <summary>
获得终止点
</summary>
            <return>终止点</return>
            <summary>
获得终止点
</summary>
            <return>终止点</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetStartPoint">
            <summary>
获得起始点
</summary>
            <return>起始点</return>
            <summary>
获得起始点
</summary>
            <return>起始点</return>
        </member>
        <member name="M:PIE.Geometry.Ring.GetLength">
            <summary>
获得长度
</summary>
            <return>长度</return>
            <summary>
获得距离
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Ring.IsPointInRing(PIE.Geometry.IPoint)">
            <summary>
点是否在环里边
</summary>
            <param name="point">point 点</param>
            <returns>是否在环里边</returns>
            <summary>
获得中心点坐标
</summary>
            <param name="point">输入点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Ring.Close">
            <summary>
闭合
</summary>
            <summary>
IRing接口
</summary>
        </member>
        <member name="M:PIE.Geometry.Ring.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ring.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Ring.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Ring">
            <summary>
环
</summary>
        </member>
        <member name="M:PIE.Geometry.IRing.IsPointInRing(PIE.Geometry.IPoint)">
            <summary>
点是否在环里边
</summary>
            <param name="point">point 点</param>
            <returns>是否在环里边</returns>
        </member>
        <member name="M:PIE.Geometry.IRing.Close">
            <summary>
闭合
</summary>
        </member>
        <member name="T:PIE.Geometry.IRing">
            <summary>
IRing环接口
</summary>
        </member>
        <member name="D:SysGeometry.RingPtr">
@brief 闭合环 智能指针对象

</member>
        <member name="M:SysGeometry.Ring.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@return PointPtr  获得的点对象指针

</member>
        <member name="M:SysGeometry.Ring.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Ring.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Ring.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Ring.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ring.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ring.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ring.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ring.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ring.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ring.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ring.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ring.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ring.SetEmpty">
@brief 设置为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.IsPointInRing(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 点是否在环里边
@param[in] SysGeometry::PointPtr ptrPoint 点
@return bool 是否在环里边

</member>
        <member name="M:SysGeometry.Ring.Close">
@brief 闭合
@return

</member>
        <member name="M:SysGeometry.Ring.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ring.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ring">
@class Ring
	* @brief 闭合环

</member>
        <member name="F:PIE.Geometry.Polyline.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Polyline.#ctor(SysUtility._ptr_t&lt;SysGeometry.Polyline&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polyline.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">返回X</param>
            <param name="y">返回Y</param>
            <param name="z">返回Z</param>
        </member>
        <member name="M:PIE.Geometry.Polyline.QueryCoords(System.Int32,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">返回X</param>
            <param name="y">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
重新设置点
</summary>
            <param name="index">编号</param>
            <param name="dx">X</param>
            <param name="dy">Y</param>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
获取点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">返回X</param>
            <param name="dy">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetPoint(System.Int32)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.SetPoints(System.Int32,System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.AddPoint(System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.IsClosed">
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetEndPoint">
            <summary>
获得终止点
</summary>
            <return>终止点</return>
            <summary>
获得终止点
</summary>
            <return>终止点</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetStartPoint">
            <summary>
获得起始点
</summary>
            <return>起始点</return>
            <summary>
获得起始点
</summary>
            <return>起始点</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.GetLength">
            <summary>
获得距离
</summary>
            <return>距离</return>
            <summary>
获得距离
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Polyline.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polyline.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Polyline.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Polyline">
            <summary>
线对象
</summary>
        </member>
        <member name="T:PIE.Geometry.IPolyline">
            <summary>
线对象接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.ClearPoints">
            <summary>
清除点
</summary>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.RemovePoint(System.Int32)">
            <summary>
删除点
</summary>
            <param name="index">编号</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.QueryCoords(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
获得点
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.QueryCoords(System.Int32,System.Double@,System.Double@)">
            <summary>
获得点坐标
</summary>
            <param name="index">编号</param>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetZ(System.Int32)">
            <summary>
获得点Z
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetY(System.Int32)">
            <summary>
获得点Y
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetX(System.Int32)">
            <summary>
获得点X
</summary>
            <param name="index">编号</param>
            <return>值</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
重新设置点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">X</param>
            <param name="dy">Y</param>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
获取点坐标
</summary>
            <param name="index">编号</param>
            <param name="dx">返回X</param>
            <param name="dy">返回Y</param>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetPoint(System.Int32)">
            <summary>
获取点
</summary>
            <param name="index">编号</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.InsertPoint(System.Int32,PIE.Geometry.IPoint)">
            <summary>
插入点
</summary>
            <param name="index">编号</param>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.SetPoints(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <param name="zArray">赋值点的z值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.SetPoints(System.Int32,System.Double[],System.Double[])">
            <summary>
给PointCollection中点赋值
</summary>
            <param name="count">需要赋值的点的个数</param>
            <param name="xArray">赋值点的x值集合</param>
            <param name="yArray">赋值点的y值集合</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.AddPoint(System.Double,System.Double)">
            <summary>
添加点
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.AddPoint(PIE.Geometry.IPoint)">
            <summary>
添加点
</summary>
            <param name="point">点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Geometry.IPointCollection.GetPointCount">
            <summary>
获得点数目
</summary>
            <return>得点数目</return>
        </member>
        <member name="T:PIE.Geometry.IPointCollection">
            <summary>
点集合对象接口
</summary>
        </member>
        <member name="D:SysGeometry.PolylinePtr">
@brief 单线段 智能指针对象

</member>
        <member name="M:SysGeometry.Polyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Polyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Polyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Polyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Polyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polyline.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polyline.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polyline.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polyline.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polyline.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polyline.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polyline.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polyline">
@class Polyline
	* @brief 单线段

</member>
        <member name="D:SysGeometry.PointCollectionPtr">
@brief 点集合对象 智能指针对象

</member>
        <member name="M:SysGeometry.PointCollection.IsValidIndex(System.Int32,System.Boolean)">
@brief Index是否有效
@param[in] int index 编号
@param[in] bool bInsert 是否是插入
@return bool 是否有效

</member>
        <member name="F:SysGeometry.PointCollection.m_vecPoint">
@brief 点集合

</member>
        <member name="M:SysGeometry.PointCollection.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetZ(System.Int32)">
@brief 通过索引获得点的Z坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetY(System.Int32)">
@brief 通过索引获得点的Y坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetX(System.Int32)">
@brief 通过索引获得点的X坐标值
@param[in] int index 索引编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.PointCollection.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.PointCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PointCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.PointCollection">
@class PointCollection
	* @brief 点集合对象


@brief 类的前期声明和智能指针的定义

</member>
        <member name="T:SysGeometry.RawPoint">
@brief 点的初始化结构体

</member>
        <member name="F:PIE.Geometry.Arc.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.#ctor(SysUtility._ptr_t&lt;SysGeometry.Arc&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.Arc.IsClosed">
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
        </member>
        <member name="M:PIE.Geometry.Arc.GetEndPoint">
            <summary>
获得终止点
</summary>
            <return>终止点</return>
            <summary>
获得终止点
</summary>
            <return>终止点</return>
        </member>
        <member name="M:PIE.Geometry.Arc.GetStartPoint">
            <summary>
获得起始点
</summary>
            <return>起始点</return>
            <summary>
获得起始点
</summary>
            <return>起始点</return>
        </member>
        <member name="M:PIE.Geometry.Arc.GetLength">
            <summary>
获得距离
</summary>
            <return>距离</return>
            <summary>
获得距离
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Arc.GetPointsOnEdge(System.Collections.Generic.IList`1{PIE.Geometry.IPoint}@)">
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Arc.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
        </member>
        <member name="M:PIE.Geometry.Arc.PutCoords(System.Double,System.Double)">
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
        </member>
        <member name="P:PIE.Geometry.Arc.RotationAngle">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.CenterY">
            <summary>
获取或设置中心点Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.CenterX">
            <summary>
获取或设置中心点X坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.SemiMinor">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.SemiMajor">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.CentralAngle">
            <summary>
获取中心角度
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.EndAngle">
            <summary>
获取或设置终止角度
</summary>
        </member>
        <member name="P:PIE.Geometry.Arc.StartAngle">
            <summary>
获取或设置起始角度
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Arc.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Arc">
            <summary>
弧
</summary>
        </member>
        <member name="M:PIE.Geometry.ICurve.GetPointByDistance(System.Double)">
            <summary>
通过距离获得点
</summary>
            <param name="distance">距离</param>
            <return>点</return>
        </member>
        <member name="M:PIE.Geometry.ICurve.IsClosed">
            <summary>
是否闭合
</summary>
            <return>是否闭合</return>
        </member>
        <member name="M:PIE.Geometry.ICurve.GetEndPoint">
            <summary>
获得终止点
</summary>
            <return>终止点</return>
        </member>
        <member name="M:PIE.Geometry.ICurve.GetStartPoint">
            <summary>
获得起始点
</summary>
            <return>起始点</return>
        </member>
        <member name="M:PIE.Geometry.ICurve.GetLength">
            <summary>
获得距离
</summary>
            <return>距离</return>
        </member>
        <member name="T:PIE.Geometry.ICurve">
            <summary>
ICurve曲线接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IArc.GetPointsOnEdge(System.Collections.Generic.IList`1{PIE.Geometry.IPoint}@)">
            <summary>
获得边界上的点
</summary>
            <param name="pointsOnEdge">pointsOnEdge 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IArc.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得中心点坐标
</summary>
            <param name="centerX">X</param>
            <param name="centerY">Y</param>
        </member>
        <member name="M:PIE.Geometry.IArc.PutCoords(System.Double,System.Double)">
            <summary>
设置中心点坐标
</summary>
            <param name="centerX">x坐标</param>
            <param name="centerY">y坐标</param>
        </member>
        <member name="P:PIE.Geometry.IArc.RotationAngle">
            <summary>
获取或设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.CenterY">
            <summary>
获取或设置中心点Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.CenterX">
            <summary>
获取或设置中心点X坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.SemiMinor">
            <summary>
获取或设置短半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.SemiMajor">
            <summary>
获取或设置长半轴
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.CentralAngle">
            <summary>
获取中心角度
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.EndAngle">
            <summary>
获取或设置终止角度
</summary>
        </member>
        <member name="P:PIE.Geometry.IArc.StartAngle">
            <summary>
获取或设置起始角度
</summary>
        </member>
        <member name="T:PIE.Geometry.IArc">
            <summary>
IArc接口
</summary>
        </member>
        <member name="D:SysGeometry.ArcPtr">
@brief 智能指针对象

</member>
        <member name="F:SysGeometry.Arc.m_RotationAngle">
@brief 旋转角度

</member>
        <member name="F:SysGeometry.Arc.m_SemiMinor">
@brief 短半轴

</member>
        <member name="F:SysGeometry.Arc.m_SemiMajor">
@brief 长半轴

</member>
        <member name="F:SysGeometry.Arc.m_CenterY">
@brief 中心点Y

</member>
        <member name="F:SysGeometry.Arc.m_CenterX">
@brief 中心点X

</member>
        <member name="F:SysGeometry.Arc.m_EndAngle">
@brief 终止角度

</member>
        <member name="F:SysGeometry.Arc.m_StartAngle">
@brief 起始角度

</member>
        <member name="M:SysGeometry.Arc.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Arc.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Arc.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Arc.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Arc.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Arc.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Arc.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Arc.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Arc.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Arc.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Arc.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Arc.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Arc.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Arc.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Arc.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Arc.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Arc.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Arc.PutCoords(System.Double,System.Double)">
@brief 设置中心点坐标
@param[in] double centerX x坐标
@param[in] double centerY y坐标
@return void

</member>
        <member name="M:SysGeometry.Arc.SetRotationAngle(System.Double)">
@brief 设置旋转角度
@param[in] double angel 设置旋转角度
@return void

</member>
        <member name="M:SysGeometry.Arc.GetRotationAngle">
@brief 获取旋转角度
@return double 旋转角度

</member>
        <member name="M:SysGeometry.Arc.SetCenterY(System.Double)">
@brief 设置中心点Y
@param[in] double y 设置中心点Y
@return void

</member>
        <member name="M:SysGeometry.Arc.GetCenterY">
@brief 获取中心点Y
@return double 中心点Y

</member>
        <member name="M:SysGeometry.Arc.SetCenterX(System.Double)">
@brief 设置中心点X
@param[in] double x 设置中心点X
@return void

</member>
        <member name="M:SysGeometry.Arc.GetCenterX">
@brief 获取中心点X坐标
@return double 中心点X

</member>
        <member name="M:SysGeometry.Arc.SetSemiMinor(System.Double)">
@brief 设置短半轴
@param[in] double semiMinor 短半轴
@return void

</member>
        <member name="M:SysGeometry.Arc.GetSemiMinor">
@brief 获取短半轴
@return double 短半轴

</member>
        <member name="M:SysGeometry.Arc.SetSemiMajor(System.Double)">
@brief 设置长半轴
@param[in] double semiMajor 长半轴
@return void

</member>
        <member name="M:SysGeometry.Arc.GetSemiMajor">
@brief 获取长半轴
@return double 长半轴

</member>
        <member name="M:SysGeometry.Arc.GetCentralAngle">
@brief 获取中心角度
@return double 中心角度

</member>
        <member name="M:SysGeometry.Arc.SetEndAngle(System.Double)">
@brief 设置终止角度
@param[in] double endAngle 终止角度
@return void

</member>
        <member name="M:SysGeometry.Arc.SetStartAngle(System.Double)">
@brief 设置起始角度
@param[in] double startAngle 起始角度
@return void

</member>
        <member name="M:SysGeometry.Arc.GetEndAngle">
@brief 获取终止角度
@return double 终止角度

</member>
        <member name="M:SysGeometry.Arc.GetStartAngle">
@brief 获取起始角度
@return double 起始角度

</member>
        <member name="M:SysGeometry.Arc.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Arc.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Arc">
@class Arc
	* @brief 弧对象

</member>
        <member name="D:SysGeometry.CurvePtr">
@brief 曲线的智能指针对象

</member>
        <member name="M:SysGeometry.Curve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Curve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Curve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Curve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Curve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Curve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Curve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Curve">
@class Curve
	* @brief 曲线对象

</member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_LinearUnit(PIE.Geometry.LinearUnit)">
            <summary>
获取或设置距离单位-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_LinearUnit">
            <summary>
获取或设置距离单位-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_Projection(PIE.Geometry.Projection)">
            <summary>
获取或设置本初子午线-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_Projection">
            <summary>
获取或设置本初子午线-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_GeographicCoordinateSystem(PIE.Geometry.GeographicCoordinateSystem)">
            <summary>
获取或设置地理坐标系-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_GeographicCoordinateSystem">
            <summary>
获取或设置地理坐标系-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_Remarks(System.String)">
            <summary>
获取或设置备注信息-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_Remarks">
            <summary>
获取或设置备注信息-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_Type">
            <summary>
获取投影类型-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_Alias(System.String)">
            <summary>
获取或设置别名-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_Alias">
            <summary>
获取或设置别名-Get
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.set_Name(System.String)">
            <summary>
获取或设置名称-Set
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.get_Name">
            <summary>
获取或设置名称-Get
</summary>
        </member>
        <member name="F:PIE.Geometry.ProjectedCoordinateSystem.m_pCInstance">
            <summary>
地理空间参考对象
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.#ctor(SysUtility._ptr_t&lt;SysGeometry.ProjectedCoordinateSystem&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.LinearUnit">
            <summary>
获取或设置距离单位
</summary>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.Projection">
            <summary>
获取或设置投影方式
</summary>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
获取或设置地理坐标系
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.IsSame(PIE.Geometry.ISpatialReference)">
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.MorphFromESRI">
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.MorphToESRI">
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ImportFromESRI(System.String)">
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ExportToProj4">
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ImportFromProj4(System.String)">
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ExportToPrettyWkt">
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ExportToWkt">
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ImportFromUserInput(System.String)">
            <summary>
从用户输入字符串导入
</summary>
            <param name="strWkT">字符串</param>
            <returns>是否成功</returns>
            <summary>
从用户输入字符串导入
</summary>
            <param name="strWkT">字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.ImportFromWkt(System.String)">
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.GetFactoryCode">
            <summary>
获得编码
</summary>
            <returns>编码</returns>
            <summary>
获得编码
</summary>
            <returns>编码</returns>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.Remarks">
            <summary>
获取或设置备注信息
</summary>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.Type">
            <summary>
获取投影类型
</summary>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.Alias">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.Geometry.ProjectedCoordinateSystem.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.ProjectedCoordinateSystem.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.ProjectedCoordinateSystem">
            <summary>
投影坐标系
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.LinearUnit">
            <summary>
获取或设置距离单位
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.Projection">
            <summary>
获取或设置投影方式
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
获取或设置地理坐标系
</summary>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.IsSame(PIE.Geometry.ISpatialReference)">
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.MorphFromESRI">
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.MorphToESRI">
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ImportFromESRI(System.String)">
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ExportToProj4">
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ImportFromProj4(System.String)">
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ExportToPrettyWkt">
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ExportToWkt">
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.ImportFromWkt(System.String)">
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IProjectedCoordinateSystem.GetFactoryCode">
            <summary>
获得编码
</summary>
            <returns>编码</returns>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.Remarks">
            <summary>
获取或设置备注信息
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.Type">
            <summary>
获取投影类型
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.Alias">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjectedCoordinateSystem.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.IProjectedCoordinateSystem">
            <summary>
投影坐标系接口
</summary>
        </member>
        <member name="F:PIE.Geometry.GeographicCoordinateSystem.m_pCInstance">
            <summary>
地理空间参考对象
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.#ctor(SysUtility._ptr_t&lt;SysGeometry.GeographicCoordinateSystem&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.SetWellKnownGeogCS(System.String)">
            <summary>
设置常用的地理坐标系
</summary>
            <param name="strWKGeoCSName">常用的地理坐标系的名称</param>
            <returns>是否成功</returns>
            <summary>
设置常用的地理坐标系
</summary>
            <param name="strWKGeoCSName">常用的地理坐标系的名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.AngularUnit">
            <summary>
获取或设置角度单位
</summary>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.PrimeMeridian">
            <summary>
获取或设置本初子午线
</summary>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.Datum">
            <summary>
获取或设置大地基准面
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.IsSame(PIE.Geometry.ISpatialReference)">
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.MorphFromESRI">
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.MorphToESRI">
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ImportFromESRI(System.String)">
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ExportToProj4">
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ImportFromProj4(System.String)">
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ExportToPrettyWkt">
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ExportToWkt">
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ImportFromUserInput(System.String)">
            <summary>
从用户输入字符串导入
</summary>
            <param name="strWkT">字符串</param>
            <returns>是否成功</returns>
            <summary>
从用户输入字符串导入
</summary>
            <param name="strWkT">字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.ImportFromWkt(System.String)">
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.GetFactoryCode">
            <summary>
获得编码
</summary>
            <returns>编码</returns>
            <summary>
获得编码
</summary>
            <returns>编码</returns>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.Remarks">
            <summary>
获取或设置备注信息
</summary>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.Type">
            <summary>
获取投影类型
</summary>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.Alias">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.Geometry.GeographicCoordinateSystem.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.GeographicCoordinateSystem.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.GeographicCoordinateSystem">
            <summary>
地理坐标系
</summary>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.SetWellKnownGeogCS(System.String)">
            <summary>
设置常用的地理坐标系
</summary>
            <param name="strWKGeoCSName">常用坐标系的名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.AngularUnit">
            <summary>
获取或设置角度单位
</summary>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.PrimeMeridian">
            <summary>
获取或设置本初子午线
</summary>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.Datum">
            <summary>
获取或设置大地基准面
</summary>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.IsSame(PIE.Geometry.ISpatialReference)">
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.MorphFromESRI">
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.MorphToESRI">
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ImportFromESRI(System.String)">
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ExportToProj4">
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ImportFromProj4(System.String)">
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ExportToPrettyWkt">
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ExportToWkt">
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.ImportFromWkt(System.String)">
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeographicCoordinateSystem.GetFactoryCode">
            <summary>
获得编码
</summary>
            <returns>编码</returns>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.Remarks">
            <summary>
获取或设置备注信息
</summary>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.Type">
            <summary>
获取投影类型
</summary>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.Alias">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.Geometry.IGeographicCoordinateSystem.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.IGeographicCoordinateSystem">
            <summary>
地理坐标系接口
</summary>
        </member>
        <member name="F:PIE.Geometry.PrimeMeridian.m_pCInstance">
            <summary>
本初子午线对象
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.#ctor(SysUtility._ptr_t&lt;SysGeometry.PrimeMeridian&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.PrimeMeridian.Longitude">
            <summary>
获取或设置设置子午线经度值
</summary>
        </member>
        <member name="P:PIE.Geometry.PrimeMeridian.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.PrimeMeridian.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.PrimeMeridian">
            <summary>
本初子午线
</summary>
        </member>
        <member name="P:PIE.Geometry.IPrimeMeridian.Longitude">
            <summary>
获取或设置设置子午线经度值
</summary>
        </member>
        <member name="P:PIE.Geometry.IPrimeMeridian.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.IPrimeMeridian">
            <summary>
本初子午线接口
</summary>
        </member>
        <member name="F:PIE.Geometry.AngularUnit.m_pCInstance">
            <summary>
角度单位对象
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.#ctor(SysUtility._ptr_t&lt;SysGeometry.AngularUnit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.AngularUnit.RadiansPerUnit">
            <summary>
获取或设置每单位的弧度值
</summary>
        </member>
        <member name="P:PIE.Geometry.AngularUnit.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.AngularUnit.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.AngularUnit">
            <summary>
角度单位
</summary>
        </member>
        <member name="P:PIE.Geometry.IAngularUnit.RadiansPerUnit">
            <summary>
获取或设置每单位的弧度值
</summary>
        </member>
        <member name="P:PIE.Geometry.IAngularUnit.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.IAngularUnit">
            <summary>
角度单位对象接口
</summary>
        </member>
        <member name="F:PIE.Geometry.Datum.m_pCInstance">
            <summary>
基准面对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.#ctor(SysUtility._ptr_t&lt;SysGeometry.Datum&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.Datum.Spheroid">
            <summary>
获取或设置椭球体
</summary>
        </member>
        <member name="P:PIE.Geometry.Datum.Name">
            <summary>
获取或设置名字
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Datum.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Datum">
            <summary>
基准面
</summary>
        </member>
        <member name="P:PIE.Geometry.IDatum.Spheroid">
            <summary>
获取或设置椭球体
</summary>
        </member>
        <member name="P:PIE.Geometry.IDatum.Name">
            <summary>
获取或设置名字
</summary>
        </member>
        <member name="T:PIE.Geometry.IDatum">
            <summary>
基准面接口
</summary>
        </member>
        <member name="F:PIE.Geometry.Spheroid.m_pCInstance">
            <summary>
椭球体对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.#ctor(SysUtility._ptr_t&lt;SysGeometry.Spheroid&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.Spheroid.Flattening">
            <summary>
获取椭球体的扁率
</summary>
        </member>
        <member name="P:PIE.Geometry.Spheroid.SemiMinorAxis">
            <summary>
获取椭球体短半轴的值
</summary>
        </member>
        <member name="P:PIE.Geometry.Spheroid.SemiMajorAxis">
            <summary>
获取椭球体长半轴的值
</summary>
        </member>
        <member name="P:PIE.Geometry.Spheroid.Name">
            <summary>
获取名称
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Spheroid.#ctor(System.String,System.Double,System.Double)">
            <summary>
构造函数
</summary>
            <param name="name">椭球体名称</param>
            <param name="dSemiMajorAxis">长半轴的值</param>
            <param name="dFlattening">扁率倒数</param>
            <summary>
构造函数
</summary>
            <param name="name">椭球体名称</param>
            <param name="dSemiMajorAxis">长半轴的值</param>
            <param name="dFlattening">扁率倒数</param>
        </member>
        <member name="M:PIE.Geometry.Spheroid.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Spheroid">
            <summary>
地球椭球体
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpheroid.Flattening">
            <summary>
获取椭球体的扁率
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpheroid.SemiMinorAxis">
            <summary>
获取椭球体短半轴的值
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpheroid.SemiMajorAxis">
            <summary>
获取椭球体长半轴的值
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpheroid.Name">
            <summary>
获取名称
</summary>
        </member>
        <member name="T:PIE.Geometry.ISpheroid">
            <summary>
地球椭球体接口
</summary>
        </member>
        <member name="F:PIE.Geometry.LinearUnit.m_pCInstance">
            <summary>
线性单位对象
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.#ctor(SysUtility._ptr_t&lt;SysGeometry.LinearUnit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.LinearUnit.MetersPerUnit">
            <summary>
获取或设置单位长度
</summary>
        </member>
        <member name="P:PIE.Geometry.LinearUnit.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.LinearUnit.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.LinearUnit">
            <summary>
投影坐标系线性单位
</summary>
        </member>
        <member name="P:PIE.Geometry.ILinearUnit.MetersPerUnit">
            <summary>
获取或设置单位长度
</summary>
        </member>
        <member name="P:PIE.Geometry.ILinearUnit.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.ILinearUnit">
            <summary>
投影坐标系线性单位接口
</summary>
        </member>
        <member name="F:PIE.Geometry.Projection.m_pCInstance">
            <summary>
投影对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.#ctor(SysUtility._ptr_t&lt;SysGeometry.Projection&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Geometry.Projection.LatitudeOfOrigin">
            <summary>
获取或设置纬度
</summary>
        </member>
        <member name="P:PIE.Geometry.Projection.ScaleFactor">
            <summary>
获取或设置比例参数
</summary>
        </member>
        <member name="P:PIE.Geometry.Projection.FalseNorthing">
            <summary>
获取或设置北向伪偏移
</summary>
        </member>
        <member name="P:PIE.Geometry.Projection.FalseEasting">
            <summary>
获取或设置东向伪偏移
</summary>
        </member>
        <member name="P:PIE.Geometry.Projection.CentralMeridian">
            <summary>
获取或设置中央经线-弧度
</summary>
        </member>
        <member name="P:PIE.Geometry.Projection.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Projection.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Projection">
            <summary>
投影对象
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.LatitudeOfOrigin">
            <summary>
获取或设置纬度
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.ScaleFactor">
            <summary>
获取或设置比例参数
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.FalseNorthing">
            <summary>
获取或设置北向伪偏移
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.FalseEasting">
            <summary>
获取或设置东向伪偏移
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.CentralMeridian">
            <summary>
获取或设置中央经线-弧度
</summary>
        </member>
        <member name="P:PIE.Geometry.IProjection.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.IProjection">
            <summary>
投影对象接口
</summary>
        </member>
        <member name="D:SysGeometry.ProjectedCoordinateSystemPtr">
@brief 投影坐标系统的 智能指针对象

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.UpDateFromOGRSpatialReference">
@brief 根据空间参考更新
@return

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_pOGRSpatialReferencePro">
@brief OGR空间参考对象

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_ptrGeographicCoordinateSystem">
@brief 地理坐标系

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_ptrProjection">
@brief 投影方法

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_ptrLinearUnit">
@brief 线性单位

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_Remarks">
@brief 备注

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_Alias">
@brief 别名

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_Name">
@brief 名字

</member>
        <member name="F:SysGeometry.ProjectedCoordinateSystem.m_FactoryCode">
@brief 编码

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetLinearUnit">
@brief 获得线性单位
@return LinearUnitPtr 线性单位

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetLinearUnit(SysUtility._ptr_t&lt;SysGeometry.LinearUnit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置线性单位
@param[in] LinearUnitPtr ptrLinearUnit 线性单位
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetProjection">
@brief 获得投影方法
@return ProjectionPtr 投影方法

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetProjection(SysUtility._ptr_t&lt;SysGeometry.Projection&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置投影方法
@param[in] ProjectionPtr ptrProjection 投影方法
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetGeographicCoordinateSystem">
@brief 获得地理坐标系
@return GeographicCoordinateSystemPtr 地理坐标系

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetGeographicCoordinateSystem(SysUtility._ptr_t&lt;SysGeometry.GeographicCoordinateSystem&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置地理坐标系
@param[in] GeographicCoordinateSystemPtr ptrGeoCoordinateSystem 地理坐标系
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void*

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.IsSameGeoCS(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief IsSame 地理坐标系是否是相等
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.IsSame(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief IsSame 是否相等
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks = "" 备注信息
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias = "" 别名
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetAlias">
@brief 获得别名
@return QString 别名

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.ProjectedCoordinateSystem.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.ProjectedCoordinateSystem">
@class ProjectedCoordinateSystem
	* @brief 投影坐标系统

</member>
        <member name="D:SysGeometry.LinearUnitPtr">
@brief  投影坐标系线性单位 智能指针对象

</member>
        <member name="F:SysGeometry.LinearUnit.m_MetersPerUnit">
@brief 单位长度的距离

</member>
        <member name="F:SysGeometry.LinearUnit.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.LinearUnit.GetMetersPerUnit">
@brief 获得单位长度的距离
@return double 单位长度的距离

</member>
        <member name="M:SysGeometry.LinearUnit.SetMetersPerUnit(System.Double)">
@brief 设置单位长度的距离
@param[in] double dValue 单位长度的距离
@return void

</member>
        <member name="M:SysGeometry.LinearUnit.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.LinearUnit.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.LinearUnit.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.LinearUnit.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.LinearUnit">
@class LinearUnit
	* @brief 投影坐标系线性单位

</member>
        <member name="D:SysGeometry.ProjectionPtr">
@brief  投影对象 智能指针对象

</member>
        <member name="F:SysGeometry.Projection.m_LatitudeOfOrigin">
@brief 初始纬度

</member>
        <member name="F:SysGeometry.Projection.m_ScaleFactor">
@brief 比例参数

</member>
        <member name="F:SysGeometry.Projection.m_FalseNorthing">
@brief 北向伪偏移

</member>
        <member name="F:SysGeometry.Projection.m_FalseEasting">
@brief 东向伪偏移

</member>
        <member name="F:SysGeometry.Projection.m_CentralMeridian">
@brief 中央经线

</member>
        <member name="F:SysGeometry.Projection.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.Projection.GetLatitudeOfOrigin">
@brief 获得初始纬度
@return double 初始纬度

</member>
        <member name="M:SysGeometry.Projection.SetLatitudeOfOrigin(System.Double)">
@brief 设置初始纬度
@param[in] double dValue = 0.0 初始纬度
@return void

</member>
        <member name="M:SysGeometry.Projection.GetScaleFactor">
@brief 获得比例参数
@return double 比例参数

</member>
        <member name="M:SysGeometry.Projection.SetScaleFactor(System.Double)">
@brief 设置比例参数
@param[in] double dValue = 1.0 比例参数
@return void

</member>
        <member name="M:SysGeometry.Projection.GetFalseNorthing">
@brief 获得北向伪偏移
@return double 北向伪偏移

</member>
        <member name="M:SysGeometry.Projection.SetFalseNorthing(System.Double)">
@brief 设置北向伪偏移
@param[in] double dValue = 0 北向伪偏移
@return void

</member>
        <member name="M:SysGeometry.Projection.GetFalseEasting">
@brief 获得东向伪偏移
@return double 东向伪偏移

</member>
        <member name="M:SysGeometry.Projection.SetFalseEasting(System.Double)">
@brief 设置东向伪偏移
@param[in] double dValue = 0 东向伪偏移
@return void

</member>
        <member name="M:SysGeometry.Projection.GetCentralMeridian(System.Boolean)">
@brief 获得中央经线
@param[in] bool inDegrees 是否用度表示
@return double 中央经线值

</member>
        <member name="M:SysGeometry.Projection.SetCentralMeridian(System.Boolean,System.Double)">
@brief 设置中央经线
@param[in] bool inDegrees 是否用度表示
@param[in] double dValue 中央经线值
@return void

</member>
        <member name="M:SysGeometry.Projection.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.Projection.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.Projection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Projection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Projection">
@class Projection
	* @brief 投影对象

</member>
        <member name="D:SysGeometry.GeographicCoordinateSystemPtr">
@brief 智能指针对象

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.UpdateToOGRSpatialReference">
@brief 更新到空间参考
@return

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.UpdateFromOGRSpatialReference">
@brief 根据空间参考更新
@return

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_pOGRSpatialReferenceGeo">
@brief OGR空间参考对象

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_ptrAngularUnit">
@brief 角度度量单位

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_ptrPrimeMeridian">
@brief 本初子午线

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_ptrDatum">
@brief 大地基准面

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_Remarks">
@brief 备注

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_Alias">
@brief 别名

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_Name">
@brief 名字

</member>
        <member name="F:SysGeometry.GeographicCoordinateSystem.m_FactoryCode">
@brief 编码

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.IsSameGeoCS(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief IsSame 地理坐标系是否是相等
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.IsSame(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief IsSame 是否相等
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetAngularUnit">
@brief 获得角度单位对象
@return AngularUnitPtr 角度单位对象

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetAngularUnit(SysUtility._ptr_t&lt;SysGeometry.AngularUnit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置角度单位对象
@param[in] AngularUnitPtr ptrAngularUnit 角度单位对象
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetPrimeMeridian">
@brief 获得本初子午线
@return PrimeMeridianPtr 本初子午线

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetPrimeMeridian(SysUtility._ptr_t&lt;SysGeometry.PrimeMeridian&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置本初子午线
@param[in] PrimeMeridianPtr ptrPrimeMeridian 本初子午线
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetDatum">
@brief 获得大地基准面
@return DatumPtr 大地基准面

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetDatum(SysUtility._ptr_t&lt;SysGeometry.Datum&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置大地基准面
@param[in] DatumPtr ptrDatum 大地基准面
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void*

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 设置常用的地理坐标系
@param[in] char* pCharWKT 常用坐标系系的名称
@return bool 是否成功

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks = "" 备注信息
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetType">
@brief 设置名称
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias = "" 别名
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetAlias">
@brief 获得别名
@return QString 别名

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.GeographicCoordinateSystem.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.GeographicCoordinateSystem">
@class GeographicCoordinateSystem
	* @brief 地理坐标系

</member>
        <member name="D:SysGeometry.PrimeMeridianPtr">
@brief 本初子午线类 智能指针对象

</member>
        <member name="F:SysGeometry.PrimeMeridian.m_Longitude">
@brief 子午线经度值

</member>
        <member name="F:SysGeometry.PrimeMeridian.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.PrimeMeridian.GetLongitude">
@brief 获得子午线经度值
@return double 子午线经度值

</member>
        <member name="M:SysGeometry.PrimeMeridian.SetLongitude(System.Double)">
@brief 设置子午线经度值
@param[in] double dValue 子午线经度值
@return void

</member>
        <member name="M:SysGeometry.PrimeMeridian.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.PrimeMeridian.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.PrimeMeridian.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PrimeMeridian.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.PrimeMeridian">
@class PrimeMeridian
	* @brief  本初子午线类

</member>
        <member name="D:SysGeometry.AngularUnitPtr">
@brief 角度度量单位的智能指针对象

</member>
        <member name="F:SysGeometry.AngularUnit.m_RadiansPerUnit">
@brief 每单位的弧度值

</member>
        <member name="F:SysGeometry.AngularUnit.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.AngularUnit.SetRadiansPerUnit(System.Double)">
@brief 设置每单位的弧度值
@param[in] double dValue 每单位的弧度值
@return void

</member>
        <member name="M:SysGeometry.AngularUnit.GetRadiansPerUnit">
@brief 获得每单位的弧度值
@return double

</member>
        <member name="M:SysGeometry.AngularUnit.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.AngularUnit.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.AngularUnit.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.AngularUnit.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.AngularUnit">
@class AngularUnit
	* @brief 角度度量单位

</member>
        <member name="D:SysGeometry.DatumPtr">
@brief 基准面的智能指针对象

</member>
        <member name="F:SysGeometry.Datum.m_ptrSpheroid">
@brief 椭球体智能指针

</member>
        <member name="F:SysGeometry.Datum.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.Datum.GetSpheroid">
@brief 获得椭球体
@return SpheroidPtr 椭球体

</member>
        <member name="M:SysGeometry.Datum.SetSpheroid(SysUtility._ptr_t&lt;SysGeometry.Spheroid&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置椭球体
@param[in] SpheroidPtr ptrSpheroid 椭球体
@return void

</member>
        <member name="M:SysGeometry.Datum.SetName(QString)">
@brief 设置名称
@param[in] QString name = "" 名称
@return void

</member>
        <member name="M:SysGeometry.Datum.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.Datum.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Datum.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Datum">
@class Datum
	* @brief 基准面

</member>
        <member name="D:SysGeometry.SpheroidPtr">
@brief 智能指针对象

</member>
        <member name="F:SysGeometry.Spheroid.m_Flattening">
@brief 椭球体的扁率倒数

</member>
        <member name="F:SysGeometry.Spheroid.m_SemiMinorAxis">
@brief 椭球体短半轴的值

</member>
        <member name="F:SysGeometry.Spheroid.m_SemiMajorAxis">
@brief 椭球体长半轴的值

</member>
        <member name="F:SysGeometry.Spheroid.m_Name">
@brief 名字

</member>
        <member name="M:SysGeometry.Spheroid.GetFlattening">
@brief 获得椭球体的扁率
@return double 椭球体的扁率倒数

</member>
        <member name="M:SysGeometry.Spheroid.GetSemiMinorAxis">
@brief 获得椭球体短半轴的值
@return double 椭球体短半轴的值

</member>
        <member name="M:SysGeometry.Spheroid.GetSemiMajorAxis">
@brief 获得椭球体长半轴的值
@return double 椭球体长半轴的值

</member>
        <member name="M:SysGeometry.Spheroid.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.Spheroid.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Spheroid.#ctor(QString,System.Double,System.Double)">
@brief 构造函数
@param[in] QString name 椭球体名称
@param[in] double dSemiMajorAxis 长半轴的值
@param[in] double dFlattening	   扁率倒数
@return

</member>
        <member name="M:SysGeometry.Spheroid.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Spheroid">
@class Spheroid
	* @brief  地球椭球体

</member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:PIE.Geometry.Point.get_Z">
            <summary>
获得X
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Point.set_Z(System.Double)">
            <summary>
设置Z
</summary>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.Point.get_Y">
            <summary>
获得Y
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Point.set_Y(System.Double)">
            <summary>
设置Y
</summary>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.Point.get_X">
            <summary>
获得X
</summary>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Point.set_X(System.Double)">
            <summary>
设置X
</summary>
            <param name="x">X</param>
        </member>
        <member name="F:PIE.Geometry.Point.m_pCInstanceSub">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Geometry.Point.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Point.Distance(PIE.Geometry.IPoint)">
            <summary>
获得距离
</summary>
            <param name="point">判断点</param>
            <return>距离</return>
            <summary>
获得距离
</summary>
            <param name="point">判断点</param>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.Point.QueryCoords(System.Double@,System.Double@,System.Double@)">
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.Point.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.Point.PutCoords(System.Double,System.Double,System.Double)">
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.Point.PutCoords(System.Double,System.Double)">
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="P:PIE.Geometry.Point.Z">
            <summary>
获取或设置Z
</summary>
        </member>
        <member name="P:PIE.Geometry.Point.Y">
            <summary>
获取或设置Y
</summary>
        </member>
        <member name="P:PIE.Geometry.Point.X">
            <summary>
获取或设置X
</summary>
        </member>
        <member name="M:PIE.Geometry.Point.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Point.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.Point.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Geometry.Point">
            <summary>
点对象
</summary>
        </member>
        <member name="F:PIE.Geometry.Geometry.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Buffer(System.Double)">
            <summary>
缓冲区
</summary>
            <param name="tolerance">缓冲距离，正数表示向外，负数表示向里</param>
            <returns>缓冲区</returns>
            <summary>
缓冲区
</summary>
            <param name="tolerance">缓冲距离，正数表示向外，负数表示向里</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.SymDifference(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的对称差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>对称差集</returns>
            <summary>
计算当前几何体和给定几何体的对称差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>对称差集</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Difference(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>差集</returns>
            <summary>
计算当前几何体和给定几何体的差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>差集</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Union(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的并集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>并集</returns>
            <summary>
计算当前几何体和给定几何体的并集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>并集</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Intersection(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的交集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>交集</returns>
            <summary>
计算当前几何体和给定几何体的交集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>交集</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.ConvexHull">
            <summary>
计算当前几何形状的凸多边形
</summary>
            <returns>计算当前几何形状的凸多边形</returns>
            <summary>
计算当前几何形状的凸多边形
</summary>
            <returns>计算当前几何形状的凸多边形</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Boundary">
            <summary>
计算当前几何体的边界
</summary>
            <returns>当前几何体的边界</returns>
            <summary>
计算当前几何体的边界
</summary>
            <returns>当前几何体的边界</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Polygonize">
            <summary>
将一系列的边界构成一个多边形，只针对MultiLineString有效
</summary>
            <returns>构成的多边形，如果失败返回空</returns>
            <summary>
将一系列的边界构成一个多边形，只针对MultiLineString有效
</summary>
            <returns>构成的多边形，如果失败返回空</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.SimplifyPreserveTopology(System.Double)">
            <summary>
保持拓扑关系的情况下对当前几何体进行简化
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
            <summary>
保持拓扑关系的情况下对当前几何体进行简化
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Simplify(System.Double)">
            <summary>
对当前几何体进行简化使得拓扑正确
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
            <summary>
对当前几何体进行简化使得拓扑正确
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Overlaps(PIE.Geometry.IGeometry)">
            <summary>
是否重叠
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否重叠</returns>
            <summary>
是否重叠
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否重叠</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Contains(PIE.Geometry.IGeometry)">
            <summary>
是否包含
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否包含</returns>
            <summary>
是否包含
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Within(PIE.Geometry.IGeometry)">
            <summary>
是否在其内部
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否在其内部</returns>
            <summary>
是否在其内部
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否在其内部</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Crosses(PIE.Geometry.IGeometry)">
            <summary>
是否穿越
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否穿越</returns>
            <summary>
是否穿越
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否穿越</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Touches(PIE.Geometry.IGeometry)">
            <summary>
是否相接
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相接</returns>
            <summary>
是否相接
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相接</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Disjoint(PIE.Geometry.IGeometry)">
            <summary>
是否相离
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相离</returns>
            <summary>
是否相离
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相离</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Equals(PIE.Geometry.IGeometry)">
            <summary>
是否相等
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相等</returns>
            <summary>
是否相等
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Intersects(PIE.Geometry.IGeometry)">
            <summary>
是否相交
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相交</returns>
            <summary>
是否相交
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <param name="sy">y方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <returns>是否成功</returns>
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <param name="sy">y方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Rotate(PIE.Geometry.IPoint,System.Double)">
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">旋转角度</param>
            <returns>是否成功</returns>
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">参照点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Move(System.Double,System.Double)">
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetArea">
            <summary>
获取面积
</summary>
            <returns> 面积</returns>
            <summary>
获取面积
</summary>
            <returns> 面积</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetLength">
            <summary>
获取长度
</summary>
            <returns> 长度</returns>
            <summary>
获取长度
</summary>
            <returns> 长度</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Clone">
            <summary>
克隆
</summary>
            <returns> GeometryPtr 克隆成果</returns>
            <summary>
克隆
</summary>
            <returns> GeometryPtr 克隆成果</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.HitTest(PIE.Geometry.IPoint,System.Double,&lt;unknown type&gt;,PIE.Geometry.IPoint@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
HitTest
</summary>
            <param name="queryPoint">测试点</param>
            <param name="searchRadius">缓冲半径（Geometry单位）</param>
            <param name="geometryPartType">测试的方式</param>
            <param name="hitPoint">测试到的点</param>
            <param name="hitDistance">测试点到测试到的点的距离</param>
            <param name="hitGeometryIndex">测试的Geometry的编号，只在GeometryCollection中有返回值</param>
            <param name="hitRingIndex">测试到的Ring的编号 只对Polygon和MulitPolygon有意义</param>
            <param name="hitPointIndex">测试到的Point的编号</param>
            <param name="bRightSide">测试点是否在Geometry的右侧</param>
            <returns>是否成功</returns>
            <summary>
HitTest
</summary>
            <param name="queryPoint">测试点</param>
            <param name="searchRadius">缓冲半径（Geometry单位）</param>
            <param name="geometryPartType">测试的方式</param>
            <param name="hitPoint">测试到的点</param>
            <param name="hitDistance">测试点到测试到的点的距离</param>
            <param name="hitGeometryIndex">测试的Geometry的编号，只在GeometryCollection中有返回值</param>
            <param name="hitRingIndex">测试到的Ring的编号 只对Polygon和MulitPolygon有意义</param>
            <param name="hitPointIndex">测试到的Point的编号</param>
            <param name="bRightSide">测试点是否在Geometry的右侧</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Transform(PIE.Geometry.CoordinateTransformation)">
            <summary>
投影转换（会忽略原来的空间参考）
</summary>
            <param name="coordTransform">目标空间参考</param>
            <returns>是否转换成功</returns>
            <summary>
投影转换（会忽略原来的空间参考）
</summary>
            <param name="coordTransform">目标空间参考</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Transform(PIE.Geometry.ISpatialReference)">
            <summary>
投影转换
</summary>
            <param name="spatialReference">目标空间参考</param>
            <returns>是否转换成功</returns>
            <summary>
投影转换
</summary>
            <param name="spatialReference">目标空间参考</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.Centroid">
            <summary>
获得质点
</summary>
            <returns>质点</returns>
            <summary>
获得质点
</summary>
            <returns>质点</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetEnvelope">
            <summary>
获得空间范围
</summary>
            <returns>空间范围</returns>
            <summary>
获得空间范围
</summary>
            <returns>空间范围</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.IsValid">
            <summary>
是否是有效的
</summary>
            <returns>是否是有效的</returns>
            <summary>
是否是有效的
</summary>
            <returns>是否是有效的</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.IsSimple">
            <summary>
是否是简单几何形状
</summary>
            <returns>是否是简单几何形状</returns>
            <summary>
是否是简单几何形状
</summary>
            <returns>是否是简单几何形状</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.IsEmpty">
            <summary>
是否为空
</summary>
            <returns>是否为空</returns>
            <summary>
是否为空
</summary>
            <returns>是否为空</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.SetEmpty">
            <summary>
设置为空
</summary>
            <returns>是否设置成功</returns>
            <summary>
设置为空
</summary>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetGeometryType">
            <summary>
获得几何体的类型
</summary>
            <returns>几何体的类型</returns>
            <summary>
获得几何体的类型
</summary>
            <returns>几何体的类型</returns>
        </member>
        <member name="M:PIE.Geometry.Geometry.GetDimension">
            <summary>
获得几何体的维度
</summary>
            <returns>几何体的维度</returns>
            <summary>
获得几何体的维度
</summary>
            <returns>几何体的维度</returns>
        </member>
        <member name="P:PIE.Geometry.Geometry.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="T:PIE.Geometry.Geometry">
            <summary>
Geometry对象
</summary>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Buffer(System.Double)">
            <summary>
缓冲区
</summary>
            <param name="tolerance">缓冲距离，正数表示向外，负数表示向里</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.SymDifference(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的对称差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>对称差集</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Difference(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的差集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>差集</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Union(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的并集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>并集</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Intersection(PIE.Geometry.IGeometry)">
            <summary>
计算当前几何体和给定几何体的交集
</summary>
            <param name="geometry">给定的几何体</param>
            <returns>交集</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.ConvexHull">
            <summary>
计算当前几何形状的凸多边形
</summary>
            <returns>计算当前几何形状的凸多边形</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Boundary">
            <summary>
计算当前几何体的边界
</summary>
            <returns>当前几何体的边界</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Polygonize">
            <summary>
将一系列的边界构成一个多边形，只针对MultiLineString有效
</summary>
            <returns>构成的多边形，如果失败返回空</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.SimplifyPreserveTopology(System.Double)">
            <summary>
保持拓扑关系的情况下对当前几何体进行简化
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialTopological.Simplify(System.Double)">
            <summary>
对当前几何体进行简化使得拓扑正确
</summary>
            <param name="tolerance">简化过程中的距离容差</param>
            <returns>几何图形对象</returns>
        </member>
        <member name="T:PIE.Geometry.ISpatialTopological">
            <summary>
空间拓扑接口
</summary>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Overlaps(PIE.Geometry.IGeometry)">
            <summary>
是否重叠
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否重叠</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Contains(PIE.Geometry.IGeometry)">
            <summary>
是否包含
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Within(PIE.Geometry.IGeometry)">
            <summary>
是否在其内部
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否在其内部</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Crosses(PIE.Geometry.IGeometry)">
            <summary>
是否穿越
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否穿越</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Touches(PIE.Geometry.IGeometry)">
            <summary>
是否相接
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相接</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Disjoint(PIE.Geometry.IGeometry)">
            <summary>
是否相离
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相离</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Equals(PIE.Geometry.IGeometry)">
            <summary>
是否相等
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialRelation.Intersects(PIE.Geometry.IGeometry)">
            <summary>
是否相交
</summary>
            <param name="geometry">空间几何图形对象</param>
            <returns>是否相交</returns>
        </member>
        <member name="T:PIE.Geometry.ISpatialRelation">
            <summary>
空间关系接口
</summary>
        </member>
        <member name="M:PIE.Geometry.ITransform2D.Scale(PIE.Geometry.IPoint,System.Double,System.Double)">
            <summary>
缩放
</summary>
            <param name="originPoint">参照点</param>
            <param name="sx">x方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <param name="sy">y方向缩放(1表示大小不变，大于1放大，小于1缩小)</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ITransform2D.Rotate(PIE.Geometry.IPoint,System.Double)">
            <summary>
旋转
</summary>
            <param name="originPoint">参照点</param>
            <param name="rotationAngle">旋转角度</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ITransform2D.Move(System.Double,System.Double)">
            <summary>
移动
</summary>
            <param name="dx">x方向的偏移</param>
            <param name="dy">y方向的偏移</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Geometry.ITransform2D">
            <summary>
二维变换接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IGeometry.GetArea">
            <summary>
获取面积
</summary>
            <returns> 面积</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.GetLength">
            <summary>
获取长度
</summary>
            <returns> 长度</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.Clone">
            <summary>
克隆
</summary>
            <returns> GeometryPtr 克隆成果</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.HitTest(PIE.Geometry.IPoint,System.Double,&lt;unknown type&gt;,PIE.Geometry.IPoint@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
HitTest
</summary>
            <param name="queryPoint">测试点</param>
            <param name="searchRadius">缓冲半径（Geometry单位）</param>
            <param name="geometryPartType">测试的方式</param>
            <param name="hitPoint">测试到的点</param>
            <param name="hitDistance">测试点到测试到的点的距离</param>
            <param name="hitGeometryIndex">测试的Geometry的编号，只在GeometryCollection中有返回值</param>
            <param name="hitRingIndex">测试到的Ring的编号 只对Polygon和MulitPolygon有意义</param>
            <param name="hitPointIndex">测试到的Point的编号</param>
            <param name="bRightSide">测试点是否在Geometry的右侧</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.Transform(PIE.Geometry.CoordinateTransformation)">
            <summary>
投影转换（会忽略原来的空间参考）
</summary>
            <param name="coordTransform">目标空间参考</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.Transform(PIE.Geometry.ISpatialReference)">
            <summary>
投影转换
</summary>
            <param name="spatialReference">目标空间参考</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.Centroid">
            <summary>
获得质点
</summary>
            <returns>质点</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.GetEnvelope">
            <summary>
获得空间范围
</summary>
            <returns>空间范围</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.IsValid">
            <summary>
是否是有效的
</summary>
            <returns>是否是有效的</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.IsSimple">
            <summary>
是否是简单几何形状
</summary>
            <returns>是否是简单几何形状</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.IsEmpty">
            <summary>
是否为空
</summary>
            <returns>是否为空</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.SetEmpty">
            <summary>
设置为空
</summary>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.GetGeometryType">
            <summary>
获得几何体的类型
</summary>
            <returns>几何体的类型</returns>
        </member>
        <member name="M:PIE.Geometry.IGeometry.GetDimension">
            <summary>
获得几何体的维度
</summary>
            <returns>几何体的维度</returns>
        </member>
        <member name="P:PIE.Geometry.IGeometry.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="T:PIE.Geometry.IGeometry">
            <summary>
IGeometry接口
</summary>
        </member>
        <member name="F:PIE.Geometry.CoordinateTransformation.m_pCInstance">
            <summary>
C++中对应的对象的指针
</summary>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.TransformEx(System.Int32,System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
坐标转换Ex
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <param name="pSuccess">转换结果数组</param>
            <returns>是否成功</returns>
            <summary>
坐标转换Ex
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <param name="pSuccess">转换结果数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.Transform(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
坐标转换
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <returns>是否成功</returns>
            <summary>
坐标转换
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Geometry.CoordinateTransformation.TargetSpatialReference">
            <summary>
获得目标坐标系
</summary>
        </member>
        <member name="P:PIE.Geometry.CoordinateTransformation.SourceSpatialReference">
            <summary>
获得源坐标系
</summary>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Geometry.CoordinateTransformation.#ctor(PIE.Geometry.ISpatialReference,PIE.Geometry.ISpatialReference)">
            <summary>
构造函数
</summary>
            <param name="sourceSpatialReference">源坐标系</param>
            <param name="targetSpatialReference">目标坐标系</param>
            <summary>
构造函数
</summary>
            <param name="sourceSpatialReference">源坐标系</param>
            <param name="targetSpatialReference">目标坐标系</param>
        </member>
        <member name="T:PIE.Geometry.CoordinateTransformation">
            <summary>
坐标转换对象
</summary>
        </member>
        <member name="M:PIE.Geometry.ICoordinateTransformation.TransformEx(System.Int32,System.Double[],System.Double[],System.Double[],System.Int32[])">
            <summary>
坐标转换Ex
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <param name="pSuccess">转换结果数组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ICoordinateTransformation.Transform(System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
坐标转换
</summary>
            <param name="count">要转换的个数</param>
            <param name="pX">X坐标</param>
            <param name="pY">Y坐标</param>
            <param name="pZ">Z坐标</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Geometry.ICoordinateTransformation.TargetSpatialReference">
            <summary>
获得目标坐标系
</summary>
        </member>
        <member name="P:PIE.Geometry.ICoordinateTransformation.SourceSpatialReference">
            <summary>
获得源坐标系
</summary>
        </member>
        <member name="T:PIE.Geometry.ICoordinateTransformation">
            <summary>
坐标转换接口
</summary>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.IsSame(PIE.Geometry.ISpatialReference)">
            <summary>
是否相等
</summary>
            <param name="pSpatialReference">空间参考</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.MorphFromESRI">
            <summary>
从ESRI字符串转化为OGC的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.MorphToESRI">
            <summary>
从OGC的WKT字符串转化为ESRI的WKT字符串
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ImportFromESRI(System.String)">
            <summary>
从ESRI字符串导入
</summary>
            <param name="strValue">ESRI字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ExportToProj4">
            <summary>
导出为Proj4字符串
</summary>
            <returns>QString Proj4字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ImportFromProj4(System.String)">
            <summary>
从Proj4字符串导入
</summary>
            <param name="strValue">Proj4字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ExportToPrettyWkt">
            <summary>
导出为格式化后的WKT字符串
</summary>
            <returns>格式化后的WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ExportToWkt">
            <summary>
导出为WKT字符串
</summary>
            <returns>WKT字符串</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ImportFromUserInput(System.String)">
            <summary>
从用户输入字符串导入
</summary>
            <param name="strWkT">字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.ImportFromWkt(System.String)">
            <summary>
从WKT字符串导入
</summary>
            <param name="strWkT">WKT字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Geometry.ISpatialReference.GetFactoryCode">
            <summary>
获得编码
</summary>
            <returns>编码</returns>
        </member>
        <member name="P:PIE.Geometry.ISpatialReference.Remarks">
            <summary>
获取或设置备注信息
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpatialReference.Type">
            <summary>
获取投影类型
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpatialReference.Alias">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.Geometry.ISpatialReference.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.Geometry.ISpatialReference">
            <summary>
空间参考接口
</summary>
        </member>
        <member name="T:PIE.Geometry.ProjCSType">
            <summary>
投影坐标系类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ProjCSType_Xian1980_3_Degree_GK_CM_102E">
            <summary>
西安80
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ProjCSType_Beijing1954GK_13">
            <summary>
北京54
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ProjCSType_WGS1984UTM_1N">
            <summary>
WGS1984
</summary>
        </member>
        <member name="T:PIE.Geometry.GeoCSType">
            <summary>
地理坐标系类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeoCSType_Beijing1954">
            <summary>
北京54坐标系
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeoCSType_Xian1980">
            <summary>
西安80坐标系
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeoCSType_WGS1984">
            <summary>
WGS1984坐标系
</summary>
        </member>
        <member name="T:PIE.Geometry.ProjectionType">
            <summary>
投影类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Projection_LCC">
            <summary>
兰伯特等面积圆锥投影
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Projection_TM">
            <summary>
横轴墨卡托投影
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Projection_UTM">
            <summary>
通用横轴墨卡托投影
</summary>
        </member>
        <member name="T:PIE.Geometry.LinearUnitType">
            <summary>
线性单位类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LinearUnit_Kilometer">
            <summary>
千米
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LinearUnit_Meter">
            <summary>
米
</summary>
        </member>
        <member name="T:PIE.Geometry.AngularUnitType">
            <summary>
角度单位类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AngularUnit_Degree">
            <summary>
度
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AngularUnit_Radian">
            <summary>
角度
</summary>
        </member>
        <member name="T:PIE.Geometry.PrimeMeridianType">
            <summary>
子午线类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PrimeMeridian_Greenwich">
            <summary>
格林尼治本初子午线
</summary>
        </member>
        <member name="T:PIE.Geometry.DatumType">
            <summary>
基准面类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Datum_WGS1984">
            <summary>
WGS84基准面（WGS84坐标系使用此基准面）
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Datum_Xian1980">
            <summary>
IAG75（西安80坐标系使用此基准面）
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Datum_BeiJing1954">
            <summary>
克拉索夫斯基基准面（北京54坐标系使用此基准面）
</summary>
        </member>
        <member name="T:PIE.Geometry.SpheroidType">
            <summary>
椭球体类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Spheroid_WGS1984">
            <summary>
WGS84椭球体（WGS84坐标系使用此椭球体）
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Spheroid_IAG75">
            <summary>
IAG75（西安80坐标系使用此椭球体）
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Spheroid_Krasovsky1940">
            <summary>
克拉索夫斯基椭球体（北京54坐标系使用此椭球体）
</summary>
        </member>
        <member name="T:PIE.Geometry.SpatialReferenceType">
            <summary>
空间参考类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ProjectedCS">
            <summary>
投影坐标系
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeographicCS">
            <summary>
地理坐标系
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UnknownCS">
            <summary>
未知坐标系
</summary>
        </member>
        <member name="T:PIE.Geometry.GeometryHitPartType">
            <summary>
GeometryHitPartType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartEndpoint">
            <summary>
Hit结尾点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartCentroid">
            <summary>
Hit中心点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartMidpoint">
            <summary>
Hit中点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartBoundary">
            <summary>
Hit边
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartVertex">
            <summary>
Hit节点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPartNone">
            <summary>
无Hit
</summary>
        </member>
        <member name="T:PIE.Geometry.GeometryType">
            <summary>
GeometryType几何类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometrySplineCurve">
            <summary>
样条曲线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryGeometryCollection">
            <summary>
图形集合
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryEllipse">
            <summary>
椭圆
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryEnvelope">
            <summary>
Envelope
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryMultiPolygon">
            <summary>
多面
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPolygon">
            <summary>
面
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryRing">
            <summary>
环
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryMultiPolyline">
            <summary>
多线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryArc">
            <summary>
弧
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPolyline">
            <summary>
线
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryMultiPoint">
            <summary>
多点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryPoint">
            <summary>
点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GeometryUnknown">
            <summary>
无类型
</summary>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.Normalize">
            <summary>
规范化（重新配置最大和最小的X和Y）
</summary>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.CenterAt(PIE.Geometry.IPoint)">
            <summary>
重新设置中心点
</summary>
            <param name="point">中心点</param>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.CenterAt(System.Double,System.Double)">
            <summary>
重新设置中心点
</summary>
            <param name="dx">中心点X</param>
            <param name="dy">中心点Y</param>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.Expand(System.Double,System.Double,System.Boolean)">
            <summary>
缩放Eenvelope
</summary>
            <param name="dx">X方向的缩放参数</param>
            <param name="dy">Y方向的缩放参数</param>
            <param name="asRatio">是否按照比例缩放</param>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.QueryCoords(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
获得四至坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右上角的X</param>
            <param name="yMax">右上角的Y</param>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
            <summary>
设置四至坐标
</summary>
            <param name="xMin">左下角的X</param>
            <param name="yMin">左下角的Y</param>
            <param name="xMax">右上角的X</param>
            <param name="yMax">右上角的Y</param>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.GetHeight">
            <summary>
获得高度
</summary>
            <returns>获得高度</returns>
        </member>
        <member name="M:PIE.Geometry.IEnvelope.GetWidth">
            <summary>
获得宽度
</summary>
            <returns>获得宽度</returns>
        </member>
        <member name="P:PIE.Geometry.IEnvelope.YMax">
            <summary>
获得右上角Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.IEnvelope.XMax">
            <summary>
获得右上角X坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.IEnvelope.YMin">
            <summary>
获得左下角Y坐标
</summary>
        </member>
        <member name="P:PIE.Geometry.IEnvelope.XMin">
            <summary>
获得左下角X坐标
</summary>
        </member>
        <member name="T:PIE.Geometry.IEnvelope">
            <summary>
IEnvelope包络范围接口
</summary>
        </member>
        <member name="M:PIE.Geometry.IPoint.Distance(PIE.Geometry.IPoint)">
            <summary>
获得距离
</summary>
            <param name="point">判断点</param>
            <return>距离</return>
        </member>
        <member name="M:PIE.Geometry.IPoint.QueryCoords(System.Double@,System.Double@,System.Double@)">
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.IPoint.QueryCoords(System.Double@,System.Double@)">
            <summary>
获得坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:PIE.Geometry.IPoint.PutCoords(System.Double,System.Double,System.Double)">
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
        </member>
        <member name="M:PIE.Geometry.IPoint.PutCoords(System.Double,System.Double)">
            <summary>
设置坐标值
</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="P:PIE.Geometry.IPoint.Z">
            <summary>
获取或设置Z
</summary>
        </member>
        <member name="P:PIE.Geometry.IPoint.Y">
            <summary>
获取或设置Y
</summary>
        </member>
        <member name="P:PIE.Geometry.IPoint.X">
            <summary>
获取或设置X
</summary>
        </member>
        <member name="T:PIE.Geometry.IPoint">
            <summary>
点对象接口
</summary>
        </member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Arc.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Arc.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SplineCurve.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SplineCurve.GetDataPoint(QList<SysUtility._ptr_t<SysGeometry.Point>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPoint.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPoint.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Arc.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Arc.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPoint.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPoint.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeometryOperator.ConvertJSONToGeometry(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeometryOperator.ConvertGeometryToJSON(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeometryOperator.ConvertJSONToGeometry(System.Int32,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeometryOperator.ConvertGeometryToJSON_Data(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SplineCurve.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SplineCurve.GetDataPoint(QList<SysUtility._ptr_t<SysGeometry.Point>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.MultiPolyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReferenceFactory.CreateSpatialReference(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.GeographicCoordinateSystem.SetWellKnownGeogCS(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
    </members>
</doc>