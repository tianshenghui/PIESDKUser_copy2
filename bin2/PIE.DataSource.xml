<?xml version="1.0"?>
<doc>
    <assembly>
        "DataSource"
    </assembly>
    <members>
        <member name="M:PIE.DataSource.Feature.set_FID(System.Int64)">
            <summary>
设置FID
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.get_FID">
            <summary>
获取FID
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.set_Geometry(PIE.Geometry.IGeometry)">
            <summary>
设置Geometry
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.get_Geometry">
            <summary>
获取Geometry
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.get_Step">
            <summary>
Step
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.get_MatchBandIndex">
            <summary>
MatchBandIndex
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.set_Encoding(System.String)">
            <summary>
获取或设置字符编码
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_Encoding">
            <summary>
获取或设置字符编码
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.set_FieldIgnored(System.Boolean)">
            <summary>
设置是否忽略Field的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_FieldIgnored">
            <summary>
获取是否忽略Field的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.set_GeometryIgnored(System.Boolean)">
            <summary>
设置是否忽略Geometry的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_GeometryIgnored">
            <summary>
获取是否忽略Geometry的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.set_Queryfilter(PIE.DataSource.IQueryFilter)">
            <summary>
设置过滤器
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_Queryfilter">
            <summary>
获取过滤器
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.get_FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.set_Table(PIE.DataSource.IColorTable)">
            <summary>
设置颜色表信息
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.get_Table">
            <summary>
获取颜色表信息
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.get_Histogram">
            <summary>
获取统计直方图
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.add_OnFeatureUpdated(PIE.DataSource.OnFeatureUpdatedEventHandler)">
            <summary>
要素更新事件
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.add_OnFeatureDeleted(PIE.DataSource.OnFeatureDeletedEventHandler)">
            <summary>
要素移除事件
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.add_OnFeatureAdded(PIE.DataSource.OnFeatureAddedEventHandler)">
            <summary>
要素添加事件
</summary>
        </member>
        <member name="F:PIE.DataSource.FeatureCursor.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureCursor&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.SetFieldIgnored(System.Boolean)">
            <summary>
读取忽略字段
</summary>
            <param name="bValue">是否忽略</param>
            <summary>
读取忽略字段
</summary>
            <param name="bValue">是否忽略</param>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.NextFeature">
            <summary>
获得下一个Feature
</summary>
            <returns>下一个Feature(如果为Null表示不存在)</returns>
            <summary>
获得下一个Feature
</summary>
            <returns>下一个Feature(如果为Null表示不存在)</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureCursor.#ctor(PIE.DataSource.IFeatureClass,PIE.DataSource.IQueryFilter)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.FeatureCursor">
            <summary>
要素类对象
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.set_C4(System.Int16)">
            <summary>
获取或设置C4
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.set_C3(System.Int16)">
            <summary>
获取或设置C3
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.set_C2(System.Int16)">
            <summary>
获取或设置C2
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.set_C1(System.Int16)">
            <summary>
获取或设置C1
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.get_DataType">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.get_BandMap">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.get_Height">
            <summary>
获取高
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.get_Width">
            <summary>
获取宽
</summary>
        </member>
        <member name="F:PIE.DataSource.DatasetManager.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.#ctor(SysUtility._ptr_t&lt;SysDataSource.IDSManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.CreateMultiDataset(System.String)">
            <summary>
创建多数据集
</summary>
            <param name="strCommand">命令行</param>
            <returns>多数据集</returns>
            <summary>
创建多数据集
</summary>
            <param name="strCommand">命令行</param>
            <returns>多数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.CreateFeatureDataset(System.String,PIE.DataSource.IFields,&lt;unknown type&gt;,PIE.Geometry.ISpatialReference)">
            <summary>
创建矢量数据集
</summary>
            <param name="strPath">路径</param>
            <param name="fields">字段定义</param>
            <param name="geoType">类型</param>
            <param name="spaReference">空间参考</param>
            <returns>矢量数据集</returns>
            <summary>
创建矢量数据集
</summary>
            <param name="strPath">路径</param>
            <param name="fields">字段定义</param>
            <param name="geoType">类型</param>
            <param name="spaReference">空间参考</param>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.CreateRasterDataset(System.String,System.Int32,System.Int32,System.Int32,&lt;unknown type&gt;,System.String)">
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">波段类型</param>
            <param name="rasterFormat">GTIFF</param>
            <returns>栅格数据集</returns>
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">波段类型</param>
            <param name="rasterFormat">GTIFF</param>
            <returns>栅格数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.DatasetManager.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="T:PIE.DataSource.DatasetManager">
            <summary>
数据插件管理器基类
</summary>
        </member>
        <member name="F:PIE.DataSource.ColorEntry.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.#ctor(SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.DataSource.ColorEntry.C4">
            <summary>
获取或设置C4
</summary>
        </member>
        <member name="P:PIE.DataSource.ColorEntry.C3">
            <summary>
获取或设置C3
</summary>
        </member>
        <member name="P:PIE.DataSource.ColorEntry.C2">
            <summary>
获取或设置C2
</summary>
        </member>
        <member name="P:PIE.DataSource.ColorEntry.C1">
            <summary>
获取或设置C1
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorEntry.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.ColorEntry">
            <summary>
颜色项ColorEntry对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.CopyRPCFile(PIE.DataSource.RasterDataset,PIE.DataSource.RasterDataset)">
            <summary>
拷贝RPC文件
</summary>
            <param name="srcDataset">源数据对象</param>
            <param name="dstDataset">目标数据对象</param>
            <returns>是否拷贝成功</returns>
            <summary>
拷贝RPC文件
</summary>
            <param name="srcDataset">源数据对象</param>
            <param name="dstDataset">目标数据对象</param>
            <returns>是否拷贝成功</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRColorEntry(System.Void*)">
            <summary>
创建ColorEntry对象
</summary>
            <param name="pColorEntry">ColorEntry对象C++</param>
            <returns>ColorEntry对象CLR</returns>
            <summary>
创建ColorEntry对象
</summary>
            <param name="pColorEntry">ColorEntry对象C++</param>
            <returns>ColorEntry对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRFeature(System.Void*)">
            <summary>
创建Feature对象
</summary>
            <param name="pFeature">Feature对象C++</param>
            <returns>Feature对象CLR</returns>
            <summary>
创建Feature对象
</summary>
            <param name="pFeature">Feature对象C++</param>
            <returns>Feature对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRPixelBuffer(System.Void*)">
            <summary>
创建PixelBufer对象
</summary>
            <param name="pPixelBuffer">pPixelBuffer对象</param>
            <returns>PixelBuffer对象CLR</returns>
            <summary>
创建PixelBufer对象
</summary>
            <param name="pPixelBuffer">pPixelBuffer对象</param>
            <returns>PixelBuffer对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRRasterDataset(System.Void*)">
            <summary>
创建RasterDataset
</summary>
            <param name="pRasterDataset">RasterDataset对象C++</param>
            <returns>RasterDataset对象CLR</returns>
            <summary>
创建RasterDataset
</summary>
            <param name="pRasterDataset">RasterDataset对象C++</param>
            <returns>RasterDataset对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRMultiDataset(System.Void*)">
            <summary>
创建MultiDataset
</summary>
            <param name="pMultiDataset">MultiDataset对象C++</param>
            <returns>MultiDataset对象CLR</returns>
            <summary>
创建MultiDataset
</summary>
            <param name="pMultiDataset">MultiDataset对象C++</param>
            <returns>MultiDataset对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRFeatureDataset(System.Void*)">
            <summary>
创建FeatureDataset
</summary>
            <param name="pfeatureDataset">FeatureDataset对象C++</param>
            <returns>FeatureDataset对象CLR</returns>
            <summary>
创建FeatureDataset
</summary>
            <param name="pfeatureDataset">FeatureDataset对象C++</param>
            <returns>FeatureDataset对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.ConstructCLRFeatureClass(System.Void*)">
            <summary>
创建FeatureClass
</summary>
            <param name="pfeatureClass">FeatureClass对象C++</param>
            <returns>FeatureClass对象CLR</returns>
            <summary>
创建FeatureClass
</summary>
            <param name="pfeatureClass">FeatureClass对象C++</param>
            <returns>FeatureClass对象CLR</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.GetPluginCount">
            <summary>
获取插件的个数
</summary>
            <returns>插件个数</returns>
            <summary>
获取插件的个数
</summary>
            <returns>插件个数</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.AddManager(PIE.DataSource.IDSManager)">
            <summary>
添加插件管理器
</summary>
            <param name="manager">ptrManager对象</param>
            <summary>
添加插件管理器
</summary>
            <param name="manager">ptrManager对象</param>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.RegisterPlugin">
            <summary>
注册插件
</summary>
            <summary>
注册插件
</summary>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.CreateFeatureDataset(System.String,PIE.DataSource.IFields,&lt;unknown type&gt;,PIE.Geometry.ISpatialReference,System.String)">
            <summary>
创建矢量数据集
</summary>
            <param name="strPath">路径</param>
            <param name="fields">字段集</param>
            <param name="geoType">几何类型</param>
            <param name="spaReference">空间参考</param>
            <param name="featureFormat">矢量格式</param>
            <returns>矢量数据集</returns>
            <summary>
创建矢量数据集
</summary>
            <param name="strPath">路径</param>
            <param name="fields">字段集定义</param>
            <param name="geoType">几何类型</param>
            <param name="spaReference">空间参考</param>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.CreateRasterDataset(System.String,PIE.Geometry.IEnvelope,System.Int32,System.Int32,System.Int32,&lt;unknown type&gt;,System.String,System.String[])">
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="envelope">envelope范围</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">数据类型</param>
            <param name="rasterFormat">GTIFF栅格格式</param>
            <param name="mList">元数据信息</param>
            <returns>栅格数据集</returns>
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="envelope">envelope范围</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">数据类型</param>
            <param name="rasterFormat">GTIFF栅格格式</param>
            <param name="mList">元数据信息</param>
            <returns>栅格数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.CreateRasterDataset(System.String,System.Int32,System.Int32,System.Int32,&lt;unknown type&gt;,System.String,System.String[])">
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">数据类型</param>
            <param name="rasterFormat">GTIFF栅格格式</param>
            <param name="mList">元数据信息</param>
            <returns>栅格数据集</returns>
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">数据类型</param>
            <param name="rasterFormat">GTIFF栅格格式</param>
            <param name="mList">元数据信息</param>
            <returns>栅格数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.OpenFeatureDataset(System.String)">
            <summary>
打开矢量数据集
</summary>
            <param name="strPath">路径</param>
            <returns>矢量数据集</returns>
            <summary>
打开矢量数据集
</summary>
            <param name="strPath">路径</param>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.OpenRasterDataset(System.String,&lt;unknown type&gt;)">
            <summary>
打开栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="mode">读写类型</param>
            <returns>栅格数据集</returns>
            <summary>
打开栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="mode">读写类型</param>
            <returns>栅格数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.OpenDataset(System.String,&lt;unknown type&gt;)">
            <summary>
打开数据集
</summary>
            <param name="strPath">路径</param>
            <param name="mode">读写类型</param>
            <returns>数据集</returns>
            <summary>
打开数据集
</summary>
            <param name="strPath">路径</param>
            <param name="mode">读写类型</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PIE.DataSource.DatasetFactory.AddExtensionPluginName(System.String,System.String)">
            <summary>
注册数据插件
</summary>
            <param name="strExtension">数据后缀名</param>
            <param name="strPluginName">数据插件名</param>
            <summary>
注册数据插件
</summary>
            <param name="strExtension">数据后缀名</param>
            <param name="strPluginName">数据插件名</param>
        </member>
        <member name="T:PIE.DataSource.DatasetFactory">
            <summary>
DatasetFactory数据集工厂类
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.RaiseFeatureUpdatedEvent(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary>
触发要素更新事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
            <summary>
触发要素更新事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
        </member>
        <member name="M:PIE.DataSource.FeatureClass.RaiseFeatureDeletedEvent(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary>
触发要素移除事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
            <summary>
触发要素移除事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
        </member>
        <member name="M:PIE.DataSource.FeatureClass.RaiseFeatureAddedEvent(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary>
触发要素添加事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
            <summary>
触发要素添加事件
</summary>
            <param name="ptrFeature">要素对象</param>
            <return />
        </member>
        <member name="F:PIE.DataSource.FeatureClass.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.DataSource.FeatureClass.m_OnFeatureUpdatedEventHandler">
            <summary>
要素排序EventHandler
</summary>
        </member>
        <member name="F:PIE.DataSource.FeatureClass.m_OnFeatureDeletedEventHandler">
            <summary>
要素移除EventHandler
</summary>
        </member>
        <member name="F:PIE.DataSource.FeatureClass.m_OnFeatureAddedEventHandler">
            <summary>
要素添加EventHandler
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.DataSource.FeatureClass.OnFeatureUpdated">
            <summary>
要素更新事件句柄
</summary>
        </member>
        <member name="E:PIE.DataSource.FeatureClass.OnFeatureDeleted">
            <summary>
要素移除事件句柄
</summary>
        </member>
        <member name="E:PIE.DataSource.FeatureClass.OnFeatureAdded">
            <summary>
要素添加事件句柄
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.IsBeingEdited">
            <summary>
数据是否正在编辑
</summary>
            <returns>是否正在编辑</returns>
            <summary>
数据是否已经被编辑过
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.AbortEdit">
            <summary>
退出编辑
</summary>
            <summary>
退出编辑
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.RecomputeExtent">
            <summary>
重新计算范围
</summary>
            <returns>计算范围是否成功</returns>
            <summary>
重新计算范围
</summary>
            <returns>计算范围是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.CreateNewFeature">
            <summary>
创建要素
</summary>
            <returns>创建的feature对象</returns>
            <summary>
创建要素
</summary>
            <returns>feature</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">索引号</param>
            <returns>是否成功</returns>
            <summary>
删除字段
</summary>
            <param name="nIndex">索引号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.AddField(PIE.DataSource.IField,System.Boolean)">
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetFields">
            <summary>
获取字段定义
</summary>
            <returns>Fields字段集</returns>
            <summary>
获取字段定义
</summary>
            <returns>Fields</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetGeomType">
            <summary>
获取Geometry类型
</summary>
            <returns>Geometry类型</returns>
            <summary>
获取类型
</summary>
            <returns>GeometryType</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.Save">
            <summary>
保存编辑内容
</summary>
            <returns>是否保存成功</returns>
            <summary>
保存编辑内容
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetExtent">
            <summary>
获取范围
</summary>
            <returns>范围</returns>
            <summary>
获取范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetFeatureCount">
            <summary>
获取要素个数
</summary>
            <returns>要素个数</returns>
            <summary>
获取要素个数
</summary>
            <returns>要素个数</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetFeature(System.Int64)">
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.Search(PIE.DataSource.IQueryFilter)">
            <summary>
查询
</summary>
            <returns>过滤器</returns>
            <param name="filter">查询Cursor</param>
            <summary>
查询
</summary>
            <returns>过滤器</returns>
            <param name="filter">查询Cursor</param>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.DeleteFeature(System.Int64)">
            <summary>
删除要素
</summary>
            <param name="fid">nFID</param>
            <returns>是否删除要素成功</returns>
            <summary>
删除要素
</summary>
            <param name="fid">nFID</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.AddFeature(PIE.DataSource.IFeature)">
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否添加要素成功</returns>
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.UpdateFeature(PIE.DataSource.IFeature)">
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否更新要素成功</returns>
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetFeatureDataset">
            <summary>
获取矢量数据集
</summary>
            <returns>矢量数据集</returns>
            <summary>
获取挂载的矢量数据集
</summary>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetName">
            <summary>
获取名称
</summary>
            <returns>名称</returns>
            <summary>
获取名称
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.GetFullName">
            <summary>
获取路径
</summary>
            <returns>路径</returns>
            <summary>
获取路径
</summary>
            <returns>路径</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureClass.#ctor(PIE.DataSource.IFeatureDataset)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.FeatureClass">
            <summary>
要素类对象
</summary>
        </member>
        <member name="E:PIE.DataSource.IFeatureClassEvents.OnFeatureUpdated">
            <summary>
要素更新EventHandler
</summary>
        </member>
        <member name="E:PIE.DataSource.IFeatureClassEvents.OnFeatureDeleted">
            <summary>
要素移除EventHandler
</summary>
        </member>
        <member name="E:PIE.DataSource.IFeatureClassEvents.OnFeatureAdded">
            <summary>
要素添加EventHandler
</summary>
        </member>
        <member name="T:PIE.DataSource.IFeatureClassEvents">
            <summary>
IFeatureClassEvents接口
</summary>
        </member>
        <member name="T:PIE.DataSource.OnFeatureUpdatedEventHandler">
            <summary>
要素更新事件句柄
</summary>
            <param name="feature">feature对象</param>
        </member>
        <member name="T:PIE.DataSource.OnFeatureDeletedEventHandler">
            <summary>
要素移除事件句柄
</summary>
            <param name="feature">feature对象</param>
        </member>
        <member name="T:PIE.DataSource.OnFeatureAddedEventHandler">
            <summary>
要素添加事件句柄
</summary>
            <param name="feature">feature对象</param>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.IsBeingEdited">
            <summary>
数据是否正在被编辑
</summary>
            <returns>是否正在被编辑</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.AbortEdit">
            <summary>
退出编辑
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.RecomputeExtent">
            <summary>
重新计算范围
</summary>
            <returns>计算范围是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.CreateNewFeature">
            <summary>
创建要素
</summary>
            <returns>新创建的feature</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">索引号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.AddField(PIE.DataSource.IField,System.Boolean)">
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetFields">
            <summary>
获取字段定义
</summary>
            <returns>Fields</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetGeomType">
            <summary>
获取类型
</summary>
            <returns>GeometryType</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.Save">
            <summary>
保存编辑内容
</summary>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetExtent">
            <summary>
获取范围
</summary>
            <returns>范围</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetFeatureCount">
            <summary>
获取要素个数
</summary>
            <returns>要素个数</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetFeature(System.Int64)">
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.Search(PIE.DataSource.IQueryFilter)">
            <summary>
查询
</summary>
            <returns>过滤器</returns>
            <param name="filter">查询Cursor</param>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.DeleteFeature(System.Int64)">
            <summary>
删除要素
</summary>
            <param name="fid">nFID</param>
            <returns>是否删除要素成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.AddFeature(PIE.DataSource.IFeature)">
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否添加要素成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.UpdateFeature(PIE.DataSource.IFeature)">
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否更新要素成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetFeatureDataset">
            <summary>
获取挂载的矢量数据集
</summary>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetName">
            <summary>
获取名称
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureClass.GetFullName">
            <summary>
获取路径
</summary>
            <returns>路径</returns>
        </member>
        <member name="T:PIE.DataSource.IFeatureClass">
            <summary>
要素类接口
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureCursor.SetFieldIgnored(System.Boolean)">
            <summary>
读取忽略字段
</summary>
            <param name="bValue">是否忽略</param>
        </member>
        <member name="M:PIE.DataSource.IFeatureCursor.NextFeature">
            <summary>
获得下一个Feature
</summary>
            <returns>下一个Feature(如果为Null表示不存在)</returns>
        </member>
        <member name="T:PIE.DataSource.IFeatureCursor">
            <summary>
FeatureCursor接口
</summary>
        </member>
        <member name="D:SysDataSource.FeatureClassPtr">
@brief 要素类 智能指针

</member>
        <member name="F:SysDataSource.FeatureClass.m_pConnectString">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_nSubDatasetIndex">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_mutexEdit">
@brief  互斥锁

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrExtent">
@brief  Envelope包络范围对象

</member>
        <member name="F:SysDataSource.FeatureClass.m_mapFeatureEdit">
@brief  要素编辑集合

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrFeatureDataset">
@brief  要素数据集

</member>
        <member name="F:SysDataSource.FeatureClass.m_nFeatureCount">
@brief  要素数量

</member>
        <member name="F:SysDataSource.FeatureClass.m_listFid">
@brief  编号FID集合

</member>
        <member name="M:SysDataSource.FeatureClass.GetPolygonFromEllipse(SysUtility._ptr_t&lt;SysGeometry.Ellipse&gt;)">
@brief 从椭圆中获取面对像
@param [in] ptrEllipse 椭圆对象
@return SysGeometry::PolygonPtr 面对像

</member>
        <member name="M:SysDataSource.FeatureClass.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 重置要素读取位置
@return void

@brief 设置查询过滤
@param [in] ptrFilter 查询过滤
@return void

@brief 是否是有效的要素
@param [in] ptrFeature 要素对象
@return bool 是否有效

</member>
        <member name="M:SysDataSource.FeatureClass.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 修改空间参考
@param [in] ptrSpatialRef 空间参考
@return 

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID  编号FID
@return FeaturePtr  要素

</member>
        <member name="M:SysDataSource.FeatureClass.Search(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查找
@param [in] ptrFilter 查询过滤
@return FeatureCursorPtr  要素游标

</member>
        <member name="M:SysDataSource.FeatureClass.IsBeingEdited">
@brief 数据是否已经被编辑过
@return  bool  是否已经被编辑过

</member>
        <member name="M:SysDataSource.FeatureClass.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 创建的要素对象

</member>
        <member name="M:SysDataSource.FeatureClass.AbortEdit">
**
**
@brief 退出编辑
@return void 

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFields">
@brief 获取字段定义
@return FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.FeatureClass.GetGeomType">
@brief 获取几何类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureClass.Save">
@brief 保存编辑内容
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.RecomputeExtent">
@brief 重新计算范围 
@return bool 计算范围是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureCount">
@brief 获取过滤器 
@return QueryFilterPtr 过滤器

@brief 获取下一个要素
@return FeaturePtr 下一个要素

@brief 获取要素个数
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureDataset">
@brief 获取挂载的矢量数据集
@return FeatureDatasetPtr 矢量数据集

</member>
        <member name="M:SysDataSource.FeatureClass.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.FeatureClass.GetFullName">
@brief 获取路径
@return QString 路径

</member>
        <member name="M:SysDataSource.FeatureClass.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureClass.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureDataset 要素数据集对象

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_ptrFeature">
@brief 要素对象指针

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_eumEditMode">
@brief 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetEditType">
@brief 获取编辑类型
@return IEditModeType 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetFeature">
@brief 获取Feature
@return 要素对象指针

</member>
        <member name="M:SysDataSource.FeatureEditInfo.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor">
@brief 构造函数
@param [in] Edit_Update 初始化参数 Edit_Update

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;,SysDataSource.IEditModeType)">
@brief 构造函数
@param [in] ptrFeature 要素对象
@param [in] eType  编辑类型

</member>
        <member name="T:SysDataSource.FeatureEditInfo">
@class FeatureEditInfo
@brief 要素编辑信息类

</member>
        <member name="T:SysDataSource.IEditModeType">
@brief 要素编辑 枚举类型

</member>
        <member name="T:SysDataSource.ConnectString">
@brief 类的前置声明和智能指针定义

</member>
        <member name="D:SysDataSource.FeatureCursorPtr">
@brief  要素游标 智能指针对象

</member>
        <member name="F:SysDataSource.FeatureCursor.m_nCurReadIndex">
@brief  当前读取的索引

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrConnection">
@brief  连接指针

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrQueryFilter">
@brief  查询过滤器

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrFeatureClass">
@brief  要素类

</member>
        <member name="M:SysDataSource.FeatureCursor.Close">
@brief 关闭
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeatureNoLock">
@brief 下一个要素不加锁
@return  SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 是否为有效要素
@param [in] ptrFeature 要素
@return  bool  是否有效

</member>
        <member name="M:SysDataSource.FeatureCursor.SetFieldIgnored(System.Boolean)">
@brief 设置字段忽略
@param [in] bValue 是否忽略
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeature">
@brief 下一个要素
@return SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureCursor.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureClass 要素类
@param [in] ptrFilter   查询过滤器

</member>
        <member name="T:SysDataSource.FeatureCursor">
@class FeatureCursor
@brief 要素游标


@brief 声明友元类

</member>
        <member name="D:SysGeometry.PolygonPtr">
@brief 面对象 智能指针对象

</member>
        <member name="F:SysGeometry.Polygon.m_ExteriorRing">
@brief 外环

</member>
        <member name="F:SysGeometry.Polygon.m_InteriorRings">
@brief 内环集合

</member>
        <member name="M:SysGeometry.Polygon.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Polygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polygon.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polygon.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polygon.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polygon.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polygon.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polygon.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polygon.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Polygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Polygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polygon.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetZ(System.Int32)">
@brief 通过索引获得点的Z值
@param[in] int index 编号
@return double 编号为index的点的Z值

</member>
        <member name="M:SysGeometry.Polygon.GetY(System.Int32)">
@brief 通过索引获得点的Y值
@param[in] int index 编号
@return double 编号为index的点的Y值

</member>
        <member name="M:SysGeometry.Polygon.GetX(System.Int32)">
@brief 通过索引获得点的X值
@param[in] int index 编号
@return double 编号为index的点的X值

</member>
        <member name="M:SysGeometry.Polygon.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.Polygon.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 要赋值点的数量
@param[in] double* px  X坐标的数组中的值
@param[in] double* py  Y坐标的数组中的值
@param[in] double* pz = NULL   Z坐标的数组中的值  默认为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x  X坐标
@param[in] double y  Y坐标
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPointCount">
@brief 获得点数目
@return int 点的数目

</member>
        <member name="M:SysGeometry.Polygon.GetExteriorRing">
@brief 获得外环
@return RingPtr 外环

</member>
        <member name="M:SysGeometry.Polygon.SetExteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置外环
@param[in] RingPtr interiorRing 外环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingCount">
@brief 得到内环个数
@return int 内环个数

</member>
        <member name="M:SysGeometry.Polygon.ClearInteriorRings">
@brief 清除内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemoveInteriorRing(System.Int32)">
@brief 移除内环
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingByIndex(System.Int32)">
@brief 通过编号获得内环
@param[in] int index 编号
@return RingPtr 内环

</member>
        <member name="M:SysGeometry.Polygon.AddInteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加内环
@param[in] RingPtr interiorRing 内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.CloseRings">
@brief 关闭所有的Ring
@return

</member>
        <member name="M:SysGeometry.Polygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polygon">
@class Polygon
	* @brief 面对象

</member>
        <member name="D:SysGeometry.RingPtr">
@brief 闭合环 智能指针对象

</member>
        <member name="M:SysGeometry.Ring.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@return PointPtr  获得的点对象指针

</member>
        <member name="M:SysGeometry.Ring.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Ring.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Ring.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Ring.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ring.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ring.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ring.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ring.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ring.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ring.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ring.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ring.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ring.SetEmpty">
@brief 设置为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.IsPointInRing(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 点是否在环里边
@param[in] SysGeometry::PointPtr ptrPoint 点
@return bool 是否在环里边

</member>
        <member name="M:SysGeometry.Ring.Close">
@brief 闭合
@return

</member>
        <member name="M:SysGeometry.Ring.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ring.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ring">
@class Ring
	* @brief 闭合环

</member>
        <member name="D:SysGeometry.PointCollectionPtr">
@brief 点集合对象 智能指针对象

</member>
        <member name="M:SysGeometry.PointCollection.IsValidIndex(System.Int32,System.Boolean)">
@brief Index是否有效
@param[in] int index 编号
@param[in] bool bInsert 是否是插入
@return bool 是否有效

</member>
        <member name="F:SysGeometry.PointCollection.m_vecPoint">
@brief 点集合

</member>
        <member name="M:SysGeometry.PointCollection.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetZ(System.Int32)">
@brief 通过索引获得点的Z坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetY(System.Int32)">
@brief 通过索引获得点的Y坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetX(System.Int32)">
@brief 通过索引获得点的X坐标值
@param[in] int index 索引编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.PointCollection.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.PointCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PointCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.RawPoint">
@brief 点的初始化结构体

</member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.CurvePtr">
@brief 曲线的智能指针对象

</member>
        <member name="M:SysGeometry.Curve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Curve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Curve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Curve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Curve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Curve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Curve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Curve">
@class Curve
	* @brief 曲线对象

</member>
        <member name="D:SysGeometry.EllipsePtr">
@brief 椭圆的智能指针对象

</member>
        <member name="F:SysGeometry.Ellipse.m_RotationAngle">
@brief 旋转角度

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMinor">
@brief 短半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMajor">
@brief 长半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterY">
@brief 中心点Y

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterX">
@brief 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Ellipse.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Ellipse.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ellipse.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ellipse.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ellipse.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ellipse.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ellipse.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ellipse.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ellipse.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ellipse.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ellipse.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Ellipse.PutCoords(System.Double,System.Double)">
@brief 设置中心点坐标
@param[in] double centerX x坐标
@param[in] double centerY y坐标
@return void

</member>
        <member name="M:SysGeometry.Ellipse.SetRotationAngle(System.Double)">
@brief 设置旋转角度
@param[in] double angel 设置旋转角度
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetRotationAngle">
@brief 获取旋转角度
@return double 旋转角度

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterY(System.Double)">
@brief 设置中心点Y
@param[in] double y 设置中心点Y
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterY">
@brief 获取中心点Y
@return double 中心点Y

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterX(System.Double)">
@brief 设置中心点X
@param[in] double x 设置中心点X
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterX">
@brief 获取中心点X坐标
@return double 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMinor(System.Double)">
@brief 设置短半轴
@param[in] double semiMinor 短半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMinor">
@brief 获取短半轴
@return double 短半轴

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMajor(System.Double)">
@brief 设置长半轴
@param[in] double semiMajor 长半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMajor">
@brief 获取长半轴
@return double 长半轴

</member>
        <member name="M:SysGeometry.Ellipse.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ellipse.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ellipse">
@class Ellipse
	* @brief 椭圆

</member>
        <member name="D:SysGeometry.SurfacePtr">
@brief  表面对象的智能指针对象

</member>
        <member name="M:SysGeometry.Surface.GetLength(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Surface.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Surface.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Surface.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysGeometry.Surface.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Surface">
@class Surface
	* @brief 表面对象

</member>
        <member name="T:SysGeometry.PointCollection">
@brief 类的前期声明和智能指针的定义


@class PointCollection
	* @brief 点集合对象

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureDeleted">
@brief 删除要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureUpdated">
@brief 更新要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureAdded">
@brief 添加要素

</member>
        <member name="T:SysDataSource.IFeatureClassEvents">
@class IFeatureClassEvents
@brief 要素类事件

</member>
        <member name="D:boost.typeindex.type_info">
Depending on a compiler flags, optimal implementation of type_info will be used 
as a default boost::typeindex::type_info.

Could be a std::type_info, boost::typeindex::detail::ctti_data or 
some user defined class.

type_info \b is \b not copyable or default constructible. It is \b not assignable too!
</member>
        <member name="M:PIE.DataSource.IDSManager.CreateMultiDataset(System.String)">
            <summary>
创建多数据集
</summary>
            <param name="strCommand">命令行</param>
            <returns>多数据集</returns>
        </member>
        <member name="M:PIE.DataSource.IDSManager.CreateFeatureDataset(System.String,PIE.DataSource.IFields,&lt;unknown type&gt;,PIE.Geometry.ISpatialReference)">
            <summary>
创建矢量数据集
</summary>
            <param name="strPath">路径</param>
            <param name="fields">字段定义</param>
            <param name="geoType">类型</param>
            <param name="spaReference">空间参考</param>
            <returns>矢量数据集</returns>
        </member>
        <member name="M:PIE.DataSource.IDSManager.CreateRasterDataset(System.String,System.Int32,System.Int32,System.Int32,&lt;unknown type&gt;,System.String)">
            <summary>
创建栅格数据集
</summary>
            <param name="strPath">路径</param>
            <param name="nWid">宽</param>
            <param name="nHei">高</param>
            <param name="nBandCount">波段数</param>
            <param name="enumPixelType">波段类型</param>
            <param name="rasterFormat">GTIFF</param>
            <returns>栅格数据集</returns>
        </member>
        <member name="T:PIE.DataSource.IDSManager">
            <summary>
数据插件管理器基类
</summary>
        </member>
        <member name="M:SysDataSource.DatasetFactory.op_Assign(SysDataSource.DatasetFactory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数  重载“=”操作符

</member>
        <member name="M:SysDataSource.DatasetFactory.#ctor(SysDataSource.DatasetFactory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数 拷贝构造

</member>
        <member name="M:SysDataSource.DatasetFactory.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.DatasetFactory.#ctor">
@brief 构造函数

</member>
        <member name="F:SysDataSource.DatasetFactory.m_listManager">
@brief  插件管理器集合

</member>
        <member name="F:SysDataSource.DatasetFactory.m_mutex">
@brief  互斥锁变量

</member>
        <member name="F:SysDataSource.DatasetFactory.m_strInvalidPrefix">
@brief   无效的前缀集合

</member>
        <member name="M:SysDataSource.DatasetFactory.LoadDataDriverConfig">
@brief 加载配置文件
@return bool 是否成功

</member>
        <member name="M:SysDataSource.DatasetFactory.FindManager(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据插件路径名称查找对应的管理器
@param [in] strPath 插件路径名称
@return  插件管理器对象集合

</member>
        <member name="M:SysDataSource.DatasetFactory.OpenDatasetNoLock(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开数据集。只由ComplexRasterDataset调用。
@param [in] strPath 路径
@param [in] mode 读写类型
@return DatasetPtr 数据集对象指针

</member>
        <member name="M:SysDataSource.DatasetFactory.CopyRPCFile(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 拷贝RPC文件
@param [in] srcDataset 源数据
@param [in] dstDataset 目标数据
@return 是否拷贝成功

</member>
        <member name="M:SysDataSource.DatasetFactory.GetManager(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据驱动名称获取插件管理器 
@param [in] strDriverName 
@return  IDSManagerPtr 插件管理器对象

</member>
        <member name="M:SysDataSource.DatasetFactory.GetPluginCount">
@brief 获取插件的个数
@return  int 插件的个数

</member>
        <member name="M:SysDataSource.DatasetFactory.AddManager(SysUtility._ptr_t&lt;SysDataSource.IDSManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加插件管理器
@param [in] ptrManager 插件管理器对象
@return  void 

</member>
        <member name="M:SysDataSource.DatasetFactory.RegisterPlugin">
@brief 注册插件
@return void

</member>
        <member name="M:SysDataSource.DatasetFactory.CreateRasterDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,SysDataSource.PixelDataType,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
@brief 创建栅格数据集
@param [in] strPath 路径
@param [in] ptrEnv 地理范围
@param [in] nWid 宽
@param [in] nHei 高
@param [in] nBandCount 波段数
@param [in] enumPixelType 波段类型
@param [in] wktFormat 与GDAL的参数相同。tif格式对应"GTiff"，img格式对应"HFA"
@param [in] papszMetadata 元数据信息
@return 栅格数据集

</member>
        <member name="M:SysDataSource.DatasetFactory.CreateRasterDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,SysDataSource.PixelDataType,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
@brief 创建栅格数据集
@param [in] strPath 路径
@param [in] nWid 宽
@param [in] nHei 高
@param [in] nBandCount 波段数
@param [in] enumPixelType 波段类型
@param [in] wktFormat tif "GTIFF", img "HFA"。字符串与GDAL规则一致。
@param [in] papszMetadata 元数据信息
@return 栅格数据集

</member>
        <member name="M:SysDataSource.DatasetFactory.OpenFeatureDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 打开矢量数据集
@param [in] strPath 路径
@return  FeatureDatasetPtr  矢量数据集对象指针

</member>
        <member name="M:SysDataSource.DatasetFactory.OpenRasterDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开栅格数据集
@param [in] strPath 路径
@param [in] mode 读写类型
@return RasterDatasetPtr  栅格数据集对象指针

</member>
        <member name="M:SysDataSource.DatasetFactory.OpenDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开数据集
@param [in] strPath 路径
@param [in] mode 读写类型
@return DatasetPtr 数据集对象指针

</member>
        <member name="M:SysDataSource.DatasetFactory.AddExtensionPluginName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 注册数据插件
@param [in] strExtension 数据后缀名
@param [in] strPluginName 数据插件名
@return void

</member>
        <member name="M:SysDataSource.DatasetFactory.Instance">
@brief 获取单实例
@return 数据集工厂 对象指针

</member>
        <member name="T:SysDataSource.DatasetFactory">
@class DatasetFactory
	* @brief 数据集工厂类

</member>
        <member name="D:SysDataSource.IDSManagerPtr">
@brief 数据插件管理器基类 智能指针

</member>
        <member name="M:SysDataSource.IDSManager.CreateMultiDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 创建多数据集
@param [in] strCommand 命令行
@return MultiDatasetPtr   多数据集对象指针

</member>
        <member name="M:SysDataSource.IDSManager.CreateRasterDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,SysDataSource.PixelDataType,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
@brief 创建栅格数据集
@param [in] strPath 路径
@param [in] ptrEnv 地理范围
@param [in] nWid 宽
@param [in] nHei 高
@param [in] nBandCount 波段数
@param [in] enumPixelType 波段类型
@param [in] wktFormat "GTIFF"
@param [in] papszMetadata 元数据
@return  RasterDatasetPtr 栅格数据集对象指针

</member>
        <member name="M:SysDataSource.IDSManager.CreateRasterDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,SysDataSource.PixelDataType,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
@brief 创建栅格数据集
@param [in] strPath 路径
@param [in] nWid 宽
@param [in] nHei 高
@param [in] nBandCount 波段数
@param [in] enumPixelType 波段类型
@param [in] wktFormat WKT格式 "GTIFF"
@param [in] papszMetadata 元数据
@return  RasterDatasetPtr 栅格数据集对象指针

</member>
        <member name="M:SysDataSource.IDSManager.GetPluginName">
@brief 获取插件名
@return QString 插件名

</member>
        <member name="M:SysDataSource.IDSManager.OpenDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开数据集
@param [in] strPath 路径
@param [in] mode 打开方式
@return DatasetPtr 数据集

</member>
        <member name="M:SysDataSource.IDSManager.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.IDSManager.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.IDSManager">
@class IDSManager
	* @brief 数据插件管理器基类

</member>
        <member name="F:PIE.DataSource.ComplexRasterDataset.m_pCInstanceSub">
            <summary>
C++对象Carto
</summary>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.#ctor(SysUtility._ptr_t&lt;SysDataSource.ComplexRasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.GetRasterBand(System.Int32,PIE.DataSource.IRasterDataset@,System.Int32@)">
            <summary>
获取索引为nBandIndex的波段对应的原始数据的数据集和波段号
</summary>
            <param name="nBandIndex">波段索引</param>
            <param name="rasterDataset">原栅格数据集</param>
            <param name="nSubBandIndex">对应的原始数据集的波段号</param>
            <returns>是否成功</returns>
            <summary>
获取索引为nBandIndex的波段对应的原始数据的数据集和波段号
</summary>
            <param name="nBandIndex">波段索引</param>
            <param name="rasterDataset">原栅格数据集</param>
            <param name="nSubBandIndex">对应的原始数据集的波段号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.AddRasterBand(PIE.DataSource.IRasterDataset,System.Int32)">
            <summary>
将ptrRasterDataset的第nBandIndex索引的波段添加到当前数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <param name="nBandIndex">波段索引</param>
            <summary>
将ptrRasterDataset的第nBandIndex索引的波段添加到当前数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <param name="nBandIndex">波段索引</param>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.InitCoords(PIE.DataSource.IRasterDataset)">
            <summary>
将ptrRasterDataset的空间参考，仿射系数等设置到本数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <summary>
将ptrRasterDataset的空间参考，仿射系数等设置到本数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ComplexRasterDataset.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.ComplexRasterDataset">
            <summary>
复杂栅格数据集对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.IComplexRasterDataset.GetRasterBand(System.Int32,PIE.DataSource.IRasterDataset@,System.Int32@)">
            <summary>
获取索引为nBandIndex的波段对应的原始数据的数据集和波段号
</summary>
            <param name="nBandIndex">波段索引</param>
            <param name="rasterDataset">原栅格数据集</param>
            <param name="nSubBandIndex">对应的原始数据集的波段号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IComplexRasterDataset.AddRasterBand(PIE.DataSource.IRasterDataset,System.Int32)">
            <summary>
将ptrRasterDataset的第nBandIndex索引的波段添加到当前数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
            <param name="nBandIndex">波段索引</param>
        </member>
        <member name="M:PIE.DataSource.IComplexRasterDataset.InitCoords(PIE.DataSource.IRasterDataset)">
            <summary>
将ptrRasterDataset的空间参考，仿射系数等设置到本数据集
</summary>
            <param name="rasterDataset">栅格数据集</param>
        </member>
        <member name="T:PIE.DataSource.IComplexRasterDataset">
            <summary>
IComplexRasterDataset栅格数据集接口
</summary>
        </member>
        <member name="D:SysDataSource.ComplexRasterDatasetPtr">
@brief 复杂栅格数据集 智能指针

</member>
        <member name="F:SysDataSource.ComplexRasterDataset.m_mapMetaData">
@brief  元数据信息

</member>
        <member name="F:SysDataSource.ComplexRasterDataset.m_vecDatasetBand">
@brief  波段数据集集合

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.GetRasterBand(System.Int32,SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取索引为nBandIndex的波段对应的原始数据的数据集和波段号
@param [in] nBandIndex 波段索引
@param [out] ptrRasterDataset 原始数据集
@param [out] nSubBandIndex 对应的原始数据集的波段号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.AddRasterBand(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 将ptrRasterDataset的第nBandIndex索引的波段添加到当前数据集 
@param [in] ptrRasterDataset 输入栅格数据集
@param [in] nBandIndex 将ptrRasterDataset的第nBandIndex索引的波段添加到当前数据集
@return void

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.InitCoords(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 将ptrRasterDataset的空间参考，纺射系数等设置到本数据集
@param [in] ptrRasterDataset 栅格数据集对象
@return void

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.SetMetadataItem(QMap&lt;QString,QString&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置元数据。不会保存到文件
@param [in] mapMetaData 元数据信息
@return 

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.SetMetadataItem(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置元数据。不会保存到文件
@param [in] strKey  Key对象
@param [in] strValue  元数据信息
@return void

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.GetMetadataItem(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取元数据信息
@param [in] strKey  Key对象
@return  QString 元数据信息

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 读取数据，保存在PixelBuffer中 
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] bandMap 波段映射集合
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 写入数据块 
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入的宽度
@param [in] nHei 写入的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] eBufType  写入类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 读取数据块 
@param [in] nx 栅格x坐标 
@param [in] ny 栅格y坐标 
@param [in] nWid 读取的宽度 
@param [in] nHei 读取的高度 
@param [in] pData 数据缓冲 
@param [in] nBufXSize 目标宽度 
@param [in] nBufYSize 目标高度 
@param [in] eBufType 读取类型 
@param [in] nBandCount 波段数 
@param [in] pBandMap 波段映射 
@param [in] nPixelSpace 像素间距 
@param [in] nLineSpace 行间距 
@param [in] nBandSpace 波段间距 
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@info  strDescription规则:路径1#波段号1,波段号2...#路径2#波段号1波段号2...#路径3#波段号1...#...
@brief 打开数据集。默认使用第一个波段的数据集的空间参考和纺射系数
@param [in] strDescription  strDescription规则
@param [in] mode 打开模式
@return 是否成功

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ComplexRasterDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ComplexRasterDataset">
@class ComplexRasterDataset
	* @brief 复杂栅格数据集 

</member>
        <member name="M:PIE.DataSource.DataSourceUtil.Transform(System.String,System.String,PIE.Geometry.ISpatialReference,System.Double,PIE.DataSource.ProgressCallback,System.Object,System.Double,System.Double)">
            <summary>
获取投影转换是否成功
</summary>
            <param name="strSrcPath">转换前栅格数据路径</param>
            <param name="strDesPath">转换后栅格数据路径</param>
            <param name="ptrDesSRef">空间参考信息</param>
            <param name="dInvalidValue">无效值</param>
            <param name="pProgressFunc">进度回调委托</param>
            <param name="pProgressArg">进度回调函数参数</param>
            <param name="dResolutionX">输出X方向分辨率</param>
            <param name="dResolutionY">输出Y方向分辨率</param>
            <returns>投影转换是否成功</returns>
            <summary>
获取投影转换是否成功
</summary>
            <param name="strSrcPath">转换前栅格数据路径</param>
            <param name="strDesPath">转换后栅格数据路径</param>
            <param name="ptrDesSRef">空间参考信息</param>
            <param name="dInvalidValue">无效值</param>
            <param name="pProgressFunc">进度回调委托</param>
            <param name="pProgressArg">进度回调函数参数</param>
            <param name="dResolutionX">输出X方向分辨率</param>
            <param name="dResolutionY">输出Y方向分辨率</param>
            <returns>投影转换是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.DataSourceUtil.Clip(System.String,System.String,PIE.Geometry.IGeometry,PIE.DataSource.ProgressCallback,System.Double)">
            <summary>
获取裁剪是否成功
</summary>
            <param name="strSrcPath">栅格数据路径</param>
            <param name="strDesPath">矢量文件路径</param>
            <param name="pClipGeometry">裁剪几何图形</param>
            <param name="pProgressFunc">进度回调委托</param>
            <param name="dInvalidValue">无效值</param>
            <returns>裁剪是否成功</returns>
            <summary>
获取裁剪是否成功
</summary>
            <param name="strSrcPath">栅格数据路径</param>
            <param name="strDesPath">矢量文件路径</param>
            <param name="pClipGeometry">裁剪几何图形</param>
            <param name="pProgressFunc">进度回调委托</param>
            <param name="dInvalidValue">无效值</param>
            <returns>裁剪是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.DataSourceUtil.GetTypeSize(&lt;unknown type&gt;)">
            <summary>
获取类型大小。以字节为单位
</summary>
            <param name="eType">eType</param>
            <returns>类型大小</returns>
            <summary>
获取类型大小。以字节为单位
</summary>
            <param name="eType">eType</param>
            <returns>int</returns>
        </member>
        <member name="T:PIE.DataSource.DataSourceUtil">
            <summary>
DataSource工具类
</summary>
        </member>
        <member name="M:SysDataSource.DataSourceUtil.ComputerHistogramStepByMinMax(SysDataSource.PixelDataType,System.Double,System.Double)">
  --------------------------------------------------------------------------
		* @brief 通过最大最小值计算直方图的步调
		* @param [in] dataType  数据类型
		* @param [in] dbMin 最小值
		* @param [in] dbMax 最大值
		* @return  double  历史进度值

</member>
        <member name="M:SysDataSource.DataSourceUtil.CalFitHistogram(System.Void*,SysDataSource.PixelDataType,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
   ---------------------------------------------------------------------
		* @brief 计算最适合的直方图
		* @param [in] pData 数据源
		* @param [in] datatype 栅格数据类型
		* @param [in] lTempX  X轴临时的值
		* @param [in] lTempY  Y轴临时的值
		* @param [in] dfNoDataValue 无数据值
		* @param [in] dStep  设置值
		* @param [in] dfMin  最小值
		* @param [in] dfMax  最大值
		* @param [in] dfMean 平均值
		* @param [in] dfStdDev  标准设备值
		* @param [in] ppdHistogram  记录进度
		* @param [in] bCheck  是否检查
		* @param [in] bFitMin  是否调整最小值
		* @param [in] bFitMax  是否调整最大值
		* @param [in] dFitMin  调整最小值
		* @param [in] dFitMax  调整最大值
		* @return  void  

</member>
        <member name="M:SysDataSource.DataSourceUtil.Transform(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*,System.Double,System.Double)">
@brief 投影转换 
@param [in] strSrcPath 转换前栅格数据路径
@param [in] strDesPath 转换后栅格数据路径
@param [in] ptrDesSRef 空间参考信息 
@param [in] dInvalidValue 无效值大小 默认参数
@param [in] pProgressFunc 进度委托回调函数
@param [in] pArgs  进度委托回调函数参数
@param [in] dResolutionX  X方向的分辨率
@param [in] dResolutionY  Y方向的分辨率
@return  bool  是否成功

</member>
        <member name="M:SysDataSource.DataSourceUtil.Clip(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Boolean,System.Double)">
@brief 裁剪 
@param [in] strSrcPath 源数据文件路径 
@param [in] strDesPath 目标数据文件路径 
@param [in] ptrClipGeometry 裁剪几何图形 
@param [in] pProgressFunc 进度委托回调函数
@param [in] bInvalidValue 是否为无效值 默认参数
@param [in] dInvalidValue 无效值大小   默认参数 
@return  bool  是否成功

</member>
        <member name="M:SysDataSource.DataSourceUtil.GetTypeSize(SysDataSource.PixelDataType)">
@brief 获取类型大小。以字节为单位
@param [in] eType  数据类型
@return  int 类型大小

</member>
        <member name="M:SysDataSource.DataSourceUtil.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.DataSourceUtil.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.DataSourceUtil">
@class DataSourceUtil
	* @brief DataSource工具类

</member>
        <member name="M:PIE.DataSource.RasterDataset.get_SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.get_DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.get_Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.get_Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.get_FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="F:PIE.DataSource.RasterBand.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.#ctor(SysUtility._ptr_t&lt;SysDataSource.RasterBand&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetHandle">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="bandMap">波段映射信息</param>
            <returns>里面保存读取数据，并进行拉伸处理</returns>
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.SetNoDataValue(System.Double)">
            <summary>
设置当前波段中的无效数据值
</summary>
            <param name="dValue">波段值</param>
            <summary>
设置当前波段中的无效数据值
</summary>
            <param name="dValue">波段值</param>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetNoDataValue">
            <summary>
获取当前波段中的无效数据值
</summary>
            <returns>当前波段的无效值</returns>
            <summary>
获取当前波段中的无效数据值
</summary>
            <returns>当前波段的无效值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.IsExsitNoDataValue">
            <summary>
获取当前波段中是否存在无效数据值
</summary>
            <returns>是否获取成功</returns>
            <summary>
获取当前波段中是否存在无效数据值
</summary>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetBandID">
            <summary>
获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
</summary>
            <returns>int</returns>
            <summary>
获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
</summary>
            <returns>int</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetBlockSize(System.Int32@,System.Int32@)">
            <summary>
获取数据存储分块的宽度和高度
</summary>
            <param name="nx">宽度</param>
            <param name="ny">高度</param>
            <summary>
获取数据存储分块的宽度和高度
</summary>
            <param name="nx">宽度</param>
            <param name="ny">高度</param>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetYSize">
            <summary>
获取波段高度
</summary>
            <returns>高度</returns>
            <summary>
获取波段高度
</summary>
            <returns>高度</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetXSize">
            <summary>
获取波段宽度
</summary>
            <returns>宽度</returns>
            <summary>
获取波段宽度
</summary>
            <returns>宽度</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetRasterDataType">
            <summary>
获取波段数据类型
</summary>
            <returns>波段数据类型</returns>
            <summary>
获取波段数据类型
</summary>
            <returns>波段数据类型</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.SetCategoryNames(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置分类信息
</summary>
            <param name="categoryNames">分类名称</param>
            <returns>是否成功</returns>
            <summary>
设置分类信息
</summary>
            <param name="categoryNames">分类名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterBand.GetCategoryNames">
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
        </member>
        <member name="P:PIE.DataSource.RasterBand.Table">
            <summary>
获取或设置颜色表信息
</summary>
        </member>
        <member name="P:PIE.DataSource.RasterBand.Histogram">
            <summary>
获取统计直方图
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterBand.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="T:PIE.DataSource.RasterBand">
            <summary>
栅格波段对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.Clone">
            <summary>
克隆
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.get_SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.get_DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.get_Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.get_Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.get_FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="F:PIE.DataSource.MultiDataset.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.#ctor(SysUtility._ptr_t&lt;SysDataSource.MultiDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.DeleteDataset(System.String)">
            <summary>
删除数据集
</summary>
            <param name="strName">数据集名称</param>
            <returns>是否成功</returns>
            <summary>
删除数据集
</summary>
            <param name="strName">数据集名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.DeleteDataset(System.Int32)">
            <summary>
删除数据集
</summary>
            <param name="nIndex">数据集索引号</param>
            <returns>是否成功</returns>
            <summary>
删除数据集
</summary>
            <param name="nIndex">数据集索引号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetDataset(System.String)">
            <summary>
根据名称查找数据集
</summary>
            <param name="strName">strName</param>
            <returns>数据集</returns>
            <summary>
根据名称查找数据集
</summary>
            <param name="strName">strName</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetDataset(System.Int32)">
            <summary>
根据索引查找数据集
</summary>
            <param name="nIndex">nIndex</param>
            <returns>数据集</returns>
            <summary>
根据索引查找数据集
</summary>
            <param name="nIndex">nIndex</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetDatasetCount">
            <summary>
获取数据集个数
</summary>
            <returns>数据集个数</returns>
            <summary>
获取数据集个数
</summary>
            <returns>数据集个数</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.AddDataset(PIE.DataSource.IDataset)">
            <summary>
添加数据集
</summary>
            <param name="ptrDatset">ptrDatset</param>
            <summary>
添加数据集
</summary>
            <param name="ptrDatset">ptrDatset</param>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.Open(System.String)">
            <summary>
打开
</summary>
            <param name="strPath">strPath</param>
            <returns>是否成功</returns>
            <summary>
打开
</summary>
            <param name="strPath">strPath</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.GetExtent">
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="P:PIE.DataSource.MultiDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.MultiDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.MultiDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.MultiDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.MultiDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.MultiDataset.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="T:PIE.DataSource.MultiDataset">
            <summary>
MultiDataset多数据集类
</summary>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.DeleteDataset(System.String)">
            <summary>
删除数据集
</summary>
            <param name="strName">数据集名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.DeleteDataset(System.Int32)">
            <summary>
删除数据集
</summary>
            <param name="nIndex">数据集索引号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetDataset(System.String)">
            <summary>
根据名称查找数据集
</summary>
            <param name="strName">strName</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetDataset(System.Int32)">
            <summary>
根据索引查找数据集
</summary>
            <param name="nIndex">nIndex</param>
            <returns>数据集</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetDatasetCount">
            <summary>
获取数据集个数
</summary>
            <returns>数据集个数</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.AddDataset(PIE.DataSource.IDataset)">
            <summary>
添加数据集
</summary>
            <param name="ptrDatset">ptrDatset</param>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.Open(System.String)">
            <summary>
打开
</summary>
            <param name="strPath">strPath</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IMultiDataset.GetExtent">
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="P:PIE.DataSource.IMultiDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.IMultiDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.IMultiDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IMultiDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IMultiDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="T:PIE.DataSource.IMultiDataset">
            <summary>
MultiDataset多数据集接口
</summary>
        </member>
        <member name="F:PIE.DataSource.RasterDataset.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.#ctor(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.WriteHistInfo">
            <summary>
统计信息写入到.HistInfo.XML文件
</summary>
            <returns>是否写入成功</returns>
            <summary>
统计信息写入到.HistInfo.XML文件
</summary>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.CalculateHistInfo">
            <summary>
计算统计信息,重新计算
</summary>
            <returns>是否计算成功</returns>
            <summary>
计算统计信息,重新计算
</summary>
            <returns>是否计算成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.ReadHistInfo">
            <summary>
从.HistInfo.XML中读取统计信息
</summary>
            <returns>是否读取成功</returns>
            <summary>
从.HistInfo.XML中读取统计信息
</summary>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.WorldToPixel_Ex(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
地理坐标转为栅格坐标
</summary>
            <param name="dblX">地理坐标x</param>
            <param name="dblY">地理坐标y</param>
            <param name="lCol">栅格坐标x</param>
            <param name="lRow">栅格坐标y</param>
            <summary>
地理坐标转为栅格坐标
</summary>
            <param name="dblX">地理坐标x</param>
            <param name="dblY">地理坐标y</param>
            <param name="lCol">栅格坐标x</param>
            <param name="lRow">栅格坐标y</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.PixelToWorld_Ex(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
栅格坐标转地理坐标
</summary>
            <param name="lCol">栅格坐标</param>
            <param name="lRow">栅格坐标</param>
            <param name="dblX">地理坐标</param>
            <param name="dblY">地理坐标</param>
            <summary>
栅格坐标转地理坐标
</summary>
            <param name="lCol">栅格坐标</param>
            <param name="lRow">栅格坐标</param>
            <param name="dblX">地理坐标</param>
            <param name="dblY">地理坐标</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetBandCount">
            <summary>
获取波段数
</summary>
            <returns>波段数</returns>
            <summary>
获取波段数
</summary>
            <returns>波段数</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetRasterYSize">
            <summary>
获取栅格高度
</summary>
            <returns>栅格高度</returns>
            <summary>
获取栅格高度
</summary>
            <returns>栅格高度</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetRasterXSize">
            <summary>
获取栅格宽度
</summary>
            <returns>栅格宽度</returns>
            <summary>
获取栅格宽度
</summary>
            <returns>栅格宽度</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.SetGeoTransform(System.Double[])">
            <summary>
设置仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
            <summary>
设置仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGeoTransform(System.Double[])">
            <summary>
获取仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
            <summary>
获取仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGeoTransform">
            <summary>
获取仿射变换参数
</summary>
            <returns>仿射变换参数</returns>
            <summary>
获取仿射变换参数
</summary>
            <returns>仿射变换参数</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.AddRasterBand(PIE.DataSource.IRasterBand)">
            <summary>
添加波段
</summary>
            <param name="rasterBand">波段</param>
            <returns>是否成功</returns>
            <summary>
添加波段
</summary>
            <param name="rasterBand">波段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetRasterBand(System.Int32)">
            <summary>
获取波段类
</summary>
            <param name="nIndex">波段索引号-从0开始</param>
            <returns>波段类</returns>
            <summary>
获取波段类
</summary>
            <param name="nIndex">波段索引号-从0开始</param>
            <returns>波段类</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGCPSpatialRef">
            <summary>
获取控制点的投影
</summary>
            <returns>控制点的投影WKT字符串</returns>
            <summary>
获取控制点的投影
</summary>
            <returns>控制点的投影WKT字符串</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGCPSpatialRef(System.String@)">
            <summary>
获取控制点的投影
</summary>
            <param name="strProj">控制点的投影WKT字符串</param>
            <summary>
获取控制点的投影
</summary>
            <param name="strProj">控制点的投影WKT字符串</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGCPs">
            <summary>
获取控制点数组
</summary>
            <returns>控制点数组</returns>
            <summary>
获取控制点数组
</summary>
            <returns>控制点数组</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetGCPCount">
            <summary>
获取控制点的个数
</summary>
            <returns>控制点的个数</returns>
            <summary>
获取控制点的个数
</summary>
            <returns>控制点的个数</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
根据级数获取金字塔尺寸
</summary>
            <param name="nLevel">金字塔级数</param>
            <param name="dbPyramidWdith">金字塔宽度</param>
            <param name="dbPyramidHeight">金字塔高度</param>
            <returns>是否成功</returns>
            <summary>
根据级数获取金字塔尺寸
</summary>
            <param name="nLevel">金字塔级数</param>
            <param name="dbPyramidWdith">金字塔宽度</param>
            <param name="dbPyramidHeight">金字塔高度</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetPyramidLevel">
            <summary>
返回金字塔层数
</summary>
            <returns>返回金字塔层数，如果没有金字塔则返回0</returns>
            <summary>
返回金字塔层数
</summary>
            <returns>返回金字塔层数，如果没有金字塔则返回0</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.BuildPyramid(System.Single,&lt;unknown type&gt;,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
建立金字塔
</summary>
            <param name="fSampleRate">重采样比率</param>
            <param name="sample_type">采样方式："NEAREST", "AVERAGE" or "MODE"等</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
            <returns>若创建成功则返回true，否则为false</returns>
            <summary>
建立金字塔
</summary>
            <param name="fSampleRate">重采样比率</param>
            <param name="sample_type">采样方式："NEAREST", "AVERAGE" or "MODE"等</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
            <returns>若创建成功则返回true，否则为false</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
读取数据，保存在PixelBuffer中
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="bandMap">波段映射</param>
            <returns>是否成功</returns>
            <summary>
读取数据，保存在PixelBuffer中
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="bandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.UseRPC(System.Boolean)">
            <summary>
 是否使用RPC
</summary>
            <param name="bUse"> 是否使用RPC</param>
            <summary>
 是否使用RPC
</summary>
            <param name="bUse"> 是否使用RPC</param>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.IsUsingRPC">
            <summary>
是否使用RPC投影
</summary>
            <returns>是否使用RPC投影</returns>
            <summary>
是否使用RPC投影
</summary>
            <returns>是否使用RPC投影</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.UseRasterCoords">
            <summary>
设置为使用栅格坐标
</summary>
            <summary>
设置为使用栅格坐标
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Open(System.String,&lt;unknown type&gt;)">
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.GetExtent">
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="P:PIE.DataSource.RasterDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.RasterDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.RasterDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.RasterDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.RasterDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.RasterDataset.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.RasterDataset">
            <summary>
栅格数据集对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.WriteHistInfo">
            <summary>
统计信息写入到.HistInfo.XML文件
</summary>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.CalculateHistInfo">
            <summary>
计算统计信息,重新计算
</summary>
            <returns>是否计算成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.ReadHistInfo">
            <summary>
从.HistInfo.XML中读取统计信息
</summary>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.WorldToPixel_Ex(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
地理坐标转为栅格坐标
</summary>
            <param name="dblX">地理坐标x</param>
            <param name="dblY">地理坐标y</param>
            <param name="lCol">栅格坐标x</param>
            <param name="lRow">栅格坐标y</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.PixelToWorld_Ex(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
栅格坐标转地理坐标
</summary>
            <param name="lCol">栅格坐标</param>
            <param name="lRow">栅格坐标</param>
            <param name="dblX">地理坐标</param>
            <param name="dblY">地理坐标</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetBandCount">
            <summary>
获取波段数
</summary>
            <returns>波段数</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetRasterYSize">
            <summary>
获取栅格高度
</summary>
            <returns>栅格高度</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetRasterXSize">
            <summary>
获取栅格宽度
</summary>
            <returns>栅格宽度</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.SetGeoTransform(System.Double[])">
            <summary>
设置仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGeoTransform(System.Double[])">
            <summary>
获取仿射变换参数
</summary>
            <param name="pTrans">仿射变换参数</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGeoTransform">
            <summary>
获取仿射变换参数
</summary>
            <returns>仿射变换参数</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.AddRasterBand(PIE.DataSource.IRasterBand)">
            <summary>
添加波段
</summary>
            <param name="rasterBand">波段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetRasterBand(System.Int32)">
            <summary>
获取波段类
</summary>
            <param name="nIndex">波段索引号-从0开始</param>
            <returns>波段类</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGCPSpatialRef">
            <summary>
获取控制点的投影
</summary>
            <returns>控制点的投影WKT字符串</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGCPSpatialRef(System.String@)">
            <summary>
获取控制点的投影
</summary>
            <param name="strProj">控制点的投影WKT字符串</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGCPs">
            <summary>
获取控制点数组
</summary>
            <returns>控制点数组</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetGCPCount">
            <summary>
获取控制点的个数
</summary>
            <returns>控制点的个数</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetPyramidSize(System.Int32,System.Int32@,System.Int32@)">
            <summary>
根据级数获取金字塔尺寸
</summary>
            <param name="nLevel">金字塔级数</param>
            <param name="dbPyramidWdith">金字塔宽度</param>
            <param name="dbPyramidHeight">金字塔高度</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetPyramidLevel">
            <summary>
返回金字塔层数
</summary>
            <returns>返回金字塔层数，如果没有金字塔则返回0</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.BuildPyramid(System.Single,&lt;unknown type&gt;,PIE.DataSource.ProgressCallback,System.Object)">
            <summary>
建立金字塔
</summary>
            <param name="fSampleRate">重采样比率</param>
            <param name="sample_type">采样方式："NEAREST", "AVERAGE" or "MODE"等</param>
            <param name="pProgressFunc">进度回调函数</param>
            <param name="pProgressArg">进度回调函数参数</param>
            <returns>若创建成功则返回true，否则为false</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
读取数据，保存在PixelBuffer中
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="bandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入的宽度</param>
            <param name="nHei">写入的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">缓冲宽度</param>
            <param name="nBufYSize">缓冲高度</param>
            <param name="eBufType">写入类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;,System.Int32,System.Int32[])">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取的宽度</param>
            <param name="nHei">读取的高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">目标宽度</param>
            <param name="nBufYSize">目标高度</param>
            <param name="eBufType">读取类型</param>
            <param name="nBandCount">波段数</param>
            <param name="pBandMap">波段映射</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.UseRPC(System.Boolean)">
            <summary>
 是否使用RPC
</summary>
            <param name="bUse"> 是否使用RPC</param>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.IsUsingRPC">
            <summary>
是否使用RPC投影
</summary>
            <returns>是否使用RPC投影</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.UseRasterCoords">
            <summary>
设置为使用栅格坐标
</summary>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Open(System.String,&lt;unknown type&gt;)">
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterDataset.GetExtent">
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="P:PIE.DataSource.IRasterDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.IRasterDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.IRasterDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IRasterDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IRasterDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="T:PIE.DataSource.IRasterDataset">
            <summary>
RasterDataset栅格数据集接口
</summary>
        </member>
        <member name="T:PIE.DataSource.ProgressCallback">
            <summary>
进度条回调函数
</summary>
            <summary>
进度条回调函数
</summary>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="ptr">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
写入数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">写入宽度</param>
            <param name="nHei">写入高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">写入数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="ptr">读取出的数据，要求必须是数组或指针</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,System.Int32,System.Int32,&lt;unknown type&gt;)">
            <summary>
读取数据块
</summary>
            <param name="nx">栅格x坐标</param>
            <param name="ny">栅格y坐标</param>
            <param name="nWid">读取宽度</param>
            <param name="nHei">读取高度</param>
            <param name="pData">数据缓冲</param>
            <param name="nBufXSize">数据缓冲宽度</param>
            <param name="nBufYSize">数据缓冲高度</param>
            <param name="eBufType">读取数据类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.SetNoDataValue(System.Double)">
            <summary>
设置当前波段中的无效数据值
</summary>
            <param name="dValue">波段值</param>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetNoDataValue">
            <summary>
获取当前波段中的无效数据值
</summary>
            <returns>当前波段的无效值</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.IsExsitNoDataValue">
            <summary>
获取当前波段中是否存在无效数据值
</summary>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetBandID">
            <summary>
获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
</summary>
            <returns>int</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetBlockSize(System.Int32@,System.Int32@)">
            <summary>
获取数据存储分块的宽度和高度
</summary>
            <param name="nx">宽度</param>
            <param name="ny">高度</param>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetYSize">
            <summary>
获取波段高度
</summary>
            <returns>高度</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetXSize">
            <summary>
获取波段宽度
</summary>
            <returns>宽度</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetRasterDataType">
            <summary>
获取波段数据类型
</summary>
            <returns>波段数据类型</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.SetCategoryNames(System.Collections.Generic.IList`1{System.String})">
            <summary>
设置分类信息
</summary>
            <param name="stringList">分类名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IRasterBand.GetCategoryNames">
            <summary>
获取分类信息
</summary>
            <returns>分类名称</returns>
        </member>
        <member name="P:PIE.DataSource.IRasterBand.Table">
            <summary>
获取或设置颜色表信息
</summary>
        </member>
        <member name="P:PIE.DataSource.IRasterBand.Histogram">
            <summary>
获取统计直方图
</summary>
        </member>
        <member name="T:PIE.DataSource.IRasterBand">
            <summary>
RasterBand栅格波段接口
</summary>
        </member>
        <member name="F:PIE.DataSource.StatsHistogram.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.#ctor(SysUtility._ptr_t&lt;SysDataSource.StatsHistogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.GetLinearStretch(System.Double@,System.Double@)">
            <summary>
获得线性拉伸参数
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
            <summary>
获得线性拉伸参数
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.SetLinearStretch(System.Double,System.Double)">
            <summary>
进行线性拉伸
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
            <summary>
进行线性拉伸
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
        </member>
        <member name="P:PIE.DataSource.StatsHistogram.Step">
            <summary>
Step
</summary>
        </member>
        <member name="P:PIE.DataSource.StatsHistogram.MatchBandIndex">
            <summary>
MatchBandIndex
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.GetOutStatsHistogram(System.Double[][])">
            <summary>
获取直方图
</summary>
            <param name="ppdHistogram">直方图信息</param>
            <returns>直方图</returns>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.GetHistogram">
            <summary>
获取直方图
</summary>
            <returns>直方图</returns>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.GetHistogram(System.Double[][])">
            <summary>
获取直方图
</summary>
            <param name="ppdHistogram">直方图信息</param>
            <summary>
获取直方图
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.SetOutStatsHistogram(System.Double[][])">
            <summary>
设置直方图信息
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.SetHistogram(System.Double[][])">
            <summary>
设置直方图信息
</summary>
            <param name="ppdHistogram">直方图信息</param>
            <summary>
设置直方图信息
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.Update">
            <summary>
刷新直方图(重新赋值后均需调Update)
</summary>
            <summary>
刷新直方图(重新赋值后均需调Update)
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.QueryStats(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
获取统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
            <summary>
获取统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.QueryHistogramMinmax(System.Double@,System.Double@)">
            <summary>
获取直方图最小最大值
</summary>
            <param name="dbMin">最小值</param>
            <param name="dbMax">最大值</param>
            <summary>
获取直方图最小最大值
</summary>
            <param name="dbMin">最小值</param>
            <param name="dbMax">最大值</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.SetHistogramMinMax(System.Double,System.Double)">
            <summary>
设置直方图最小最大值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <summary>
设置直方图最小最大值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.SetStats(System.Double,System.Double,System.Double,System.Double)">
            <summary>
设置统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
            <summary>
设置统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.HasStats">
            <summary>
判断StatsHistogram类是否具有统计信息
</summary>
            <returns>是否具有直方图</returns>
            <summary>
判断StatsHistogram类是否具有统计信息
</summary>
            <returns>是否具有直方图</returns>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.HasHistogram">
            <summary>
判断StatsHistogram类是否具有直方图
</summary>
            <returns>是否具有直方图</returns>
            <summary>
判断StatsHistogram类是否具有直方图
</summary>
            <returns>是否具有直方图</returns>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.Empty">
            <summary>
清空直方图信息使其失效
</summary>
            <summary>
清空直方图信息使其失效
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.Accumulate(System.Double,System.Int32)">
            <summary>
赋于直方图dValue值的个数
</summary>
            <param name="dValue">值</param>
            <param name="nCount">统计个数</param>
            <summary>
赋于直方图dValue值的个数
</summary>
            <param name="dValue">值</param>
            <param name="nCount">统计个数</param>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.StatsHistogram.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.StatsHistogram">
            <summary>
直方图对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.GetLinearStretch(System.Double@,System.Double@)">
            <summary>
获得线性拉伸参数
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.SetLinearStretch(System.Double,System.Double)">
            <summary>
进行线性拉伸
</summary>
            <param name="dStretchMin">拉伸最小值</param>
            <param name="dStretchMax">拉伸最大值</param>
        </member>
        <member name="P:PIE.DataSource.IStatsHistogram.Step">
            <summary>
获取或设置Step
</summary>
        </member>
        <member name="P:PIE.DataSource.IStatsHistogram.MatchBandIndex">
            <summary>
获取或设置多波段索引MatchBandIndex
</summary>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.GetOutStatsHistogram(System.Double[][])">
            <summary>
获取直方图
</summary>
            <param name="ppdHistogram">直方图信息</param>
            <returns>直方图</returns>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.GetHistogram">
            <summary>
获取直方图
</summary>
            <returns>直方图</returns>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.GetHistogram(System.Double[][])">
            <summary>
获取直方图
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.SetOutStatsHistogram(System.Double[][])">
            <summary>
设置直方图信息
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.SetHistogram(System.Double[][])">
            <summary>
设置直方图信息
</summary>
            <param name="ppdHistogram">直方图信息</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.Update">
            <summary>
刷新直方图(重新赋值后均需调Update)
</summary>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.QueryStats(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
获取统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.QueryHistogramMinmax(System.Double@,System.Double@)">
            <summary>
获取直方图最小最大值
</summary>
            <param name="dbMin">最小值</param>
            <param name="dbMax">最大值</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.SetHistogramMinMax(System.Double,System.Double)">
            <summary>
设置直方图最小最大值
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.SetStats(System.Double,System.Double,System.Double,System.Double)">
            <summary>
设置统计信息
</summary>
            <param name="dMin">最小值</param>
            <param name="dMax">最大值</param>
            <param name="dMean">均值</param>
            <param name="dStdDev">方差</param>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.HasStats">
            <summary>
判断StatsHistogram类是否具有统计信息
</summary>
            <returns>是否具有直方图</returns>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.HasHistogram">
            <summary>
判断StatsHistogram类是否具有直方图
</summary>
            <returns>是否具有直方图</returns>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.Empty">
            <summary>
清空直方图信息使其失效
</summary>
        </member>
        <member name="M:PIE.DataSource.IStatsHistogram.Accumulate(System.Double,System.Int32)">
            <summary>
赋于直方图dValue值的个数
</summary>
            <param name="dValue">值</param>
            <param name="nCount">统计个数</param>
        </member>
        <member name="T:PIE.DataSource.IStatsHistogram">
            <summary>
统计直方图接口
</summary>
        </member>
        <member name="F:PIE.DataSource.PixelBuffer.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.#ctor(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.DataSource.PixelBuffer.m_IsCostomData">
            <summary>
是否是用户自定义数据
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.GetData_Ref">
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.GetData">
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.SetData(&lt;unknown type&gt;,System.Void*)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.SetData(&lt;unknown type&gt;,System.IntPtr)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.SetData(&lt;unknown type&gt;,System.Object)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="P:PIE.DataSource.PixelBuffer.DataType">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="P:PIE.DataSource.PixelBuffer.BandMap">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="P:PIE.DataSource.PixelBuffer.Height">
            <summary>
获取高
</summary>
        </member>
        <member name="P:PIE.DataSource.PixelBuffer.Width">
            <summary>
获取宽
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.#ctor(System.Int32,System.Int32,System.Int32[],&lt;unknown type&gt;,System.IntPtr)">
            <summary>
构造函数
</summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bandMap">Band列表</param>
            <param name="pixelDType">数据类型</param>
            <param name="ptrValue">数据值</param>
            <summary>
构造函数
</summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bandMap">Band列表</param>
            <param name="pixelDType">数据类型</param>
            <param name="ptrValue">数据值</param>
        </member>
        <member name="M:PIE.DataSource.PixelBuffer.#ctor(System.Int32,System.Int32,System.Int32[],&lt;unknown type&gt;)">
            <summary>
构造函数
</summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bandMap">Band列表</param>
            <param name="pixelDType">数据类型</param>
            <summary>
构造函数
</summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bandMap">Band列表</param>
            <param name="pixelDType">数据类型</param>
        </member>
        <member name="T:PIE.DataSource.PixelBuffer">
            <summary>
图片渲染缓冲类
</summary>
        </member>
        <member name="F:PIE.DataSource.ColorTable.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorTable.#ctor(SysUtility._ptr_t&lt;SysDataSource.ColorTable&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorTable.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.ColorTable.ClearColorEntry">
            <summary>
清空颜色表
</summary>
            <summary>
清空颜色表
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorTable.AddColorEntry(PIE.DataSource.IColorEntry)">
            <summary>
添加颜色表项
</summary>
            <param name="colorEntry">颜色表项</param>
            <summary>
添加颜色表项
</summary>
            <param name="colorEntry">颜色表项</param>
        </member>
        <member name="M:PIE.DataSource.ColorTable.SetColorEntry(System.Int32,PIE.DataSource.IColorEntry)">
            <summary>
设置颜色表项
</summary>
            <param name="index">编号</param>
            <param name="colorEntry">颜色表项</param>
            <returns>是否成功</returns>
            <summary>
设置颜色表项
</summary>
            <param name="index">编号</param>
            <param name="colorEntry">颜色表项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.ColorTable.GetColorEntry(System.Int32)">
            <summary>
获取颜色表项
</summary>
            <param name="index">颜色表项编号</param>
            <returns>颜色表项</returns>
            <summary>
获取颜色表项
</summary>
            <param name="index">颜色表项编号</param>
            <returns>颜色表项</returns>
        </member>
        <member name="M:PIE.DataSource.ColorTable.GetColorEntryCount">
            <summary>
获取颜色表项个数
</summary>
            <returns>颜色表项个数</returns>
            <summary>
获取颜色表项个数
</summary>
            <returns>颜色表项个数</returns>
        </member>
        <member name="M:PIE.DataSource.ColorTable.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorTable.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.ColorTable.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.ColorTable">
            <summary>
颜色表ColorTable对象类
</summary>
        </member>
        <member name="M:PIE.DataSource.IColorTable.ClearColorEntry">
            <summary>
清空颜色表
</summary>
        </member>
        <member name="M:PIE.DataSource.IColorTable.AddColorEntry(PIE.DataSource.IColorEntry)">
            <summary>
添加颜色表项
</summary>
            <param name="colorEntry">颜色表项</param>
        </member>
        <member name="M:PIE.DataSource.IColorTable.SetColorEntry(System.Int32,PIE.DataSource.IColorEntry)">
            <summary>
设置颜色表项
</summary>
            <param name="index">编号</param>
            <param name="colorEntry">颜色表项</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IColorTable.GetColorEntry(System.Int32)">
            <summary>
获取颜色表项
</summary>
            <param name="index">颜色表项编号</param>
            <returns>颜色表项</returns>
        </member>
        <member name="M:PIE.DataSource.IColorTable.GetColorEntryCount">
            <summary>
获取颜色表项个数
</summary>
            <returns>颜色表项个数</returns>
        </member>
        <member name="T:PIE.DataSource.IColorTable">
            <summary>
颜色对照表接口
</summary>
        </member>
        <member name="P:PIE.DataSource.IColorEntry.C4">
            <summary>
获取或设置C4
</summary>
        </member>
        <member name="P:PIE.DataSource.IColorEntry.C3">
            <summary>
获取或设置C3
</summary>
        </member>
        <member name="P:PIE.DataSource.IColorEntry.C2">
            <summary>
获取或设置C2
</summary>
        </member>
        <member name="P:PIE.DataSource.IColorEntry.C1">
            <summary>
获取或设置C1
</summary>
        </member>
        <member name="T:PIE.DataSource.IColorEntry">
            <summary>
颜色项接口
</summary>
        </member>
        <member name="M:PIE.DataSource.IPixelBuffer.GetData_Ref">
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.IPixelBuffer.GetData">
            <summary>
获得数据指针
</summary>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.IPixelBuffer.SetData(&lt;unknown type&gt;,System.Void*)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.IPixelBuffer.SetData(&lt;unknown type&gt;,System.IntPtr)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="M:PIE.DataSource.IPixelBuffer.SetData(&lt;unknown type&gt;,System.Object)">
            <summary>
设置数据
</summary>
            <param name="dataType">类型</param>
            <param name="data">数据</param>
            <returns>数据指针</returns>
        </member>
        <member name="P:PIE.DataSource.IPixelBuffer.BandMap">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="P:PIE.DataSource.IPixelBuffer.DataType">
            <summary>
获取BandMap
</summary>
        </member>
        <member name="P:PIE.DataSource.IPixelBuffer.Height">
            <summary>
获取高
</summary>
        </member>
        <member name="P:PIE.DataSource.IPixelBuffer.Width">
            <summary>
获取宽
</summary>
        </member>
        <member name="T:PIE.DataSource.IPixelBuffer">
            <summary>
图片渲染缓冲接口
</summary>
        </member>
        <member name="D:SysDataSource.RasterDatasetPtr">
@brief 栅格数据集 智能指针

</member>
        <member name="F:SysDataSource.RasterDataset.m_ptrEnvelope">
@brief  包络线对象

</member>
        <member name="F:SysDataSource.RasterDataset.m_strGCPProj">
@brief  控制点项目

</member>
        <member name="F:SysDataSource.RasterDataset.m_nGCPCount">
@brief  控制点数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGCPs">
@brief  控制点数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_nBandCount">
@brief  波段数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterHeight">
@brief  栅格高度

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterWidth">
@brief  栅格宽度

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoInvTransform">
@brief  反向纺射变换参数数组   ----

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoTransform">
@brief  纺射变换参数数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_vecRasterBandPtr">
@brief  栅格波段集合

</member>
        <member name="M:SysDataSource.RasterDataset.GetBandCount">
@brief 获取波段数
@return  int 波段数

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterYSize">
@brief 获取栅格高度
@return int 栅格高度

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterXSize">
@brief 获取栅格宽度
@return int 栅格宽度

</member>
        <member name="M:SysDataSource.RasterDataset.SetGeoTransform(System.Double*)">
@brief 设置纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetGeoTransform(System.Double*)">
@brief 获取纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.AddRasterBand(SysUtility._ptr_t&lt;SysDataSource.RasterBand&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加波段
@param  [in] rasterBand 栅格波段
@return bool 是否成功 

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterBand(System.Int32)">
@brief 获取波段类
@param [in] nIndex 波段索引号。从0开始
@return RasterBandPtr 波段类

</member>
        <member name="M:SysDataSource.RasterDataset.WriteHistInfo">
@brief 统计信息写入到.HistInfo.XML文件
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.CalculateHistInfo">
@brief 计算统计信息。重新计算
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.ReadHistInfo">
@brief 从.HistInfo.XML中读取统计信息
@return 是否读取成功

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPSpatialRef(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取控制点的投影
@param[out] strProj 控制点的投影WKT字符串
@return void 

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPs">
@brief 获取控制点数组
@return const GDAL_GCP*  控制点数组

</member>
        <member name="M:SysDataSource.RasterDataset.WorldToPixel_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 地理坐标转为栅格坐标
@param [in] dblX 地理坐标x
@param [in] dblY 地理坐标y
@param [in] lCol 栅格坐标x
@param [in] lRow 栅格坐标y
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.PixelToWorld_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 栅格坐标转地理坐标
@param [in] lCol 栅格坐标
@param [in] lRow 栅格坐标
@param [in] dblX 地理坐标
@param [in] dblY 地理坐标
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPCount">
@brief  获取控制点的个数
@return 控制点的个数

</member>
        <member name="M:SysDataSource.RasterDataset.GetPyramidLevel">
@brief 返回金字塔层数
@return int 返回金字塔层数，如果没有金字塔则返回0

</member>
        <member name="M:SysDataSource.RasterDataset.BuildPyramid(System.Single,SysDataSource.DadaSampleType,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 建立金字塔
@param[in] float fSampleRate 重采样比率
@param[in] DadaSampleType sample_type 采样方式："NEAREST", "AVERAGE" or "MODE"等
@param[in] ProgressFunc pProgressFunc 进度回调函数
@param[in] void* pProgressArg 进度回调函数参数
@return bool 若创建成功则返回true，否则为false

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 读取数据，保存在PixelBuffer中
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] bandMap 波段映射集合
@return SysDataSource::PixelBufferPtr  图片渲染缓冲对象

</member>
        <member name="M:SysDataSource.RasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入的宽度
@param [in] nHei 写入的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] eBufType 写入类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 目标宽度
@param [in] nBufYSize 目标高度
@param [in] eBufType 读取类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.UseRPC(System.Boolean)">
@brief 是否使用RPC
@param [in] bUse 是否使用RPC 
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.IsUsingRPC">
@brief 是否使用RPC投影
@return bool 是否使用

</member>
        <member name="M:SysDataSource.RasterDataset.UseRasterCoords">
@brief 设置为使用栅格坐标
@return  void

</member>
        <member name="M:SysDataSource.RasterDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 打开模式
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterDataset.#ctor">
@brief 构造函数

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrHistogram">
@brief 直方图对象

</member>
        <member name="F:SysDataSource.RasterBand.m_nBandID">
@brief 波段的ID编号  从1开始

</member>
        <member name="F:SysDataSource.RasterBand.m_bHaveNoDataValue">
@brief 是否具有波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_dNodataValue">
@brief 波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeY">
@brief 数据存储分块的高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeX">
@brief 数据存储分块的宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeY">
@brief 波段高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeX">
@brief 波段宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_ePixelDataType">
@brief 波段数据类型

</member>
        <member name="F:SysDataSource.RasterBand.m_vecCategoryName">
@brief 分类信息

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrColorTable">
@brief 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.ComputerHistogram">
@brief 统计直方图信息
@return void 

</member>
        <member name="M:SysDataSource.RasterBand.GetBandID">
@brief  获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
@return int 当前波段在数据集中的序号

</member>
        <member name="M:SysDataSource.RasterBand.GetYSize">
@brief  获取波段高度
@return int 高度

</member>
        <member name="M:SysDataSource.RasterBand.GetXSize">
@brief  获取波段宽度
@return int 宽度

</member>
        <member name="M:SysDataSource.RasterBand.GetRasterDataType">
@brief  获取波段数据类型
@return PixelDataType 波段数据类型

</member>
        <member name="M:SysDataSource.RasterBand.SetHistogramInfo(SysUtility._ptr_t&lt;SysDataSource.StatsHistogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置直方图信息
@param[in] ptrHistogram 直方图对象
@return void

</member>
        <member name="M:SysDataSource.RasterBand.IsHistogramInfoCalculated">
@brief  是否计算直方图信息
@return bool  是 true，否 false 

</member>
        <member name="M:SysDataSource.RasterBand.GetHistogramInfo">
@brief  获取直方图信息
@return StatsHistogramPtr  直方图对象 

</member>
        <member name="M:SysDataSource.RasterBand.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterBand.SetColorTable(SysUtility._ptr_t&lt;SysDataSource.ColorTable&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置颜色表信息
@param[in] ColorTablePtr ptrColorTable 颜色表信息
@return void

</member>
        <member name="M:SysDataSource.RasterBand.GetColorTable">
@brief  获取颜色表信息
@return ColorTablePtr 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.SetNoDataValue(System.Double)">
@brief 设置当前波段中的无效数据值
@param[in] double 当前波段的无效值
@return void

</member>
        <member name="M:SysDataSource.RasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入宽度
@param [in] nHei 写入高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 写入数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距  ---
@return

</member>
        <member name="M:SysDataSource.RasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取宽度
@param [in] nHei 读取高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 读取数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterBand.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterBand.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.RasterBand">
@brief 类的前置声明 和 智能指针定义


@class RasterBand
	* @brief 栅格波段类

</member>
        <member name="T:SysDataSource.RasterDataset">
@brief 类的前置声明 和 智能指针定义


@class RasterDataset
	* @brief  栅格数据集

</member>
        <member name="D:SysDataSource.StatsHistogramPtr">
@brief 直方图对象类 智能指针

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStep">
@brief 梯度

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMax">
@brief ENVI方式%拉伸的对应范围最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMin">
@brief ENVI方式%拉伸的对应范围最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_iMatchBandIndex">
@brief 匹配的波段序号

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bStats">
@brief 是否具有统计信息

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bHistogram">
@brief 是否有直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppOutStatsHistogram">
@brief 输出直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppHistogram">
@brief 直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMax">
@brief 直方图最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMin">
@brief 直方图最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStdDev">
@brief 方差

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMean">
@brief 均值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMax">
@brief 统计最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMin">
@brief 统计最小值

</member>
        <member name="M:SysDataSource.StatsHistogram.GetStep">
@brief 获取梯度
@return  double 梯度

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStep(System.Double)">
@brief 设置梯度
@param [in] dStep 梯度
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetLinearStretch(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取线性拉伸参数
@param [in out] dStretchMin 拉伸最小值
@param [in out] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetLinearStretch(System.Double,System.Double)">
@brief 设置线性拉伸参数
@param [in] dStretchMin 拉伸最小值
@param [in] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetMatchBandIndex(System.Int32)">
@brief 设置匹配的波段索引
@param [in] iBandIndex 波段索引
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetMatchBandIndex">
@brief 获取匹配的波段索引
@return  int 波段索引

</member>
        <member name="M:SysDataSource.StatsHistogram.GetOutStatsHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取输出直方图
@param [in out] ppdHistogram 直方图信息 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram">
@brief 获取直方图信息
@return  double**  直方图信息

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图 
@param [in out] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetOutStatsHistogram(System.Double**)">
@brief 设置输出直方图信息 
@param [in out] ppdHistogram   直方图信息
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogram(System.Double**)">
@brief 设置直方图信息 
@param [in] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Update">
@brief 刷新直方图(重新赋值后均需调Update)
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryStats(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取统计信息
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@param [in out] dMean   均值 
@param [in out] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryHistogramMinmax(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图最小最大值
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogramMinMax(System.Double,System.Double)">
@brief 设置直方图最小最大值
@param [in] dMin    最小值
@param [in] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStats(System.Double,System.Double,System.Double,System.Double)">
@brief 设置统计信息 
@param [in] dMin    最小值 
@param [in] dMax    最大值 
@param [in] dMean   均值 
@param [in] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.HasStats">
@brief 判断StatsHistogram类是否具有统计信息 
@return  bool 是否具有统计信息

</member>
        <member name="M:SysDataSource.StatsHistogram.HasHistogram">
@brief 判断StatsHistogram类是否具有直方图 
@return  bool 是否具有直方图

</member>
        <member name="M:SysDataSource.StatsHistogram.Empty">
@brief 清空直方图信息使其失效
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Accumulate(System.Double,System.Int32)">
@brief 赋于直方图dValue值的个数 
@param [in] dValue 值
@param [in] nCount 统计个数
@return  void 

</member>
        <member name="M:SysDataSource.StatsHistogram.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.StatsHistogram.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.StatsHistogram">
@class StatsHistogram
	* @brief  直方图对象类

</member>
        <member name="D:SysDataSource.PixelBufferPtr">
@brief 图片渲染缓冲类 智能指针

</member>
        <member name="F:SysDataSource.PixelBuffer.m_ePixelDataType">
@brief 图片渲染数据类型

</member>
        <member name="F:SysDataSource.PixelBuffer.m_vecBandMap">
@brief 地图波段BandMap集合

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nHei">
@brief 高度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nWid">
@brief 宽度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_pData">
@brief  数据指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetHeight">
@brief 获取高
@return int 高度

</member>
        <member name="M:SysDataSource.PixelBuffer.GetWidth">
@brief 获取宽
@return int 宽度

</member>
        <member name="M:SysDataSource.PixelBuffer.SetData(SysDataSource.PixelDataType,System.Void*)">
@brief 设置数据指针
@param [in] eType 图片渲染数据类型
@param [in] pData 数据
@return

</member>
        <member name="M:SysDataSource.PixelBuffer.GetData">
@brief 获取数据指针
@return void* 数据内存指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetDataType">
@brief 获取类型
@return PixelDataType 类型

</member>
        <member name="M:SysDataSource.PixelBuffer.GetBandMap">
@brief 获取BandMap
@return 地图波段BandMap的集合

</member>
        <member name="M:SysDataSource.PixelBuffer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType,System.Void*)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型
@param [in] pData 数据

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型

</member>
        <member name="T:SysDataSource.PixelBuffer">
@class  PixelBuffer 
@brief  图片渲染缓冲类

</member>
        <member name="F:SysDataSource.ColorTable.m_vecColorEntry">
@brief 颜色表项集合

</member>
        <member name="M:SysDataSource.ColorTable.Clone">
@brief 克隆
@return ColorTablePtr  克隆对象

</member>
        <member name="M:SysDataSource.ColorTable.ClearColorEntry">
@brief  清空颜色表
@return void

</member>
        <member name="M:SysDataSource.ColorTable.AddColorEntry(SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加颜色表项
@param [in] ptrColorEntry 颜色表项
@return void

</member>
        <member name="M:SysDataSource.ColorTable.SetColorEntry(System.Int32,SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色表项
@param [in] nIndex 颜色表项编号
@param [in] ptrColorEntry 颜色表项
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntry(System.Int32)">
@brief 获取颜色表项
@param [in] nIndex 颜色表项编号
@return ColorEntryPtr 颜色表项

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntryCount">
@brief 获取颜色表项个数
@return int 颜色表项个数

</member>
        <member name="M:SysDataSource.ColorTable.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorTable.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorTable">
@brief 类的前置声明和智能指针定义


@class ColorTable
	* @brief 颜色表ColorTable对象类

</member>
        <member name="M:SysDataSource.ColorEntry.Clone">
@brief 克隆
@return ColorEntryPtr 克隆对象

</member>
        <member name="M:SysDataSource.ColorEntry.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
@brief 有参构造函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorEntry">
@brief 类的前置声明和智能指针定义


@class ColorEntry
	* @brief 颜色表项ColorEntry对象类

</member>
        <member name="F:PIE.DataSource.FeatureDataset.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.CreateSpatialIndex(System.Int32)">
            <summary>
创建空间索引
<param name="nDepth">空间索引的级别。最大12</param></summary>
            <summary>
创建空间索引
<param name="nDepth">空间索引的级别。最大12</param></summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.Encoding">
            <summary>
获取或设置字符编码
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.FieldIgnored">
            <summary>
是否忽略Field的加载
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.GeometryIgnored">
            <summary>
是否忽略Geometry的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.AlterFieldDefn(System.Int32,PIE.DataSource.IField!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;)">
            <summary>
修改字段
</summary>
            <param name="iField">iField</param>
            <param name="ptrNewField">ptrNewField</param>
            <param name="eAlterType">eAlterType</param>
            <returns>字段</returns>
            <summary>
修改字段
</summary>
            <param name="iField">iField</param>
            <param name="ptrNewField">ptrNewField</param>
            <param name="eAlterType">eAlterType</param>
            <returns>字段</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.SetNextByIndex(System.Int64)">
            <summary>
设置下一个Feature的index
</summary>
            <param name="nIndex">编号</param>
            <returns>是否成功</returns>
            <summary>
设置下一个Feature的index
</summary>
            <param name="nIndex">编号</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetExtent">
            <summary>
获取范围
</summary>
            <returns>范围</returns>
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetFields">
            <summary>
获取字段
</summary>
            <returns>字段</returns>
            <summary>
获取字段
</summary>
            <returns>字段</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetGeomType">
            <summary>
获取Geometry类型
</summary>
            <returns>Geometry类型</returns>
            <summary>
获取类型
</summary>
            <returns>类型</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.CreateNewFeature">
            <summary>
创建要素
</summary>
            <returns>要素</returns>
            <summary>
创建要素
</summary>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">索引</param>
            <returns>是否成功</returns>
            <summary>
删除字段
</summary>
            <param name="nIndex">索引</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.AddField(PIE.DataSource.IField,System.Boolean)">
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.Save">
            <summary>
保存
</summary>
            <returns>是否成功</returns>
            <summary>
保存
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetFeatureCount">
            <summary>
获取要素数量
</summary>
            <returns>Feature数量</returns>
            <summary>
获取要素数量
</summary>
            <returns>Feature数量</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.DeleteFeature(System.Int64)">
            <summary>
删除要素
</summary>
            <param name="nFID">要素</param>
            <returns>是否成功</returns>
            <summary>
删除要素
</summary>
            <param name="nFID">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.AddFeature(PIE.DataSource.IFeature)">
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.UpdateFeature(PIE.DataSource.IFeature)">
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetFeature(System.Int64)">
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetNextFeature">
            <summary>
获取下一个要素
</summary>
            <returns>下一个要素</returns>
            <summary>
获取下一个要素
</summary>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.ResetReading">
            <summary>
重置读取
</summary>
            <summary>
重置读取
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.Open(System.String,&lt;unknown type&gt;)">
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.Queryfilter">
            <summary>
获取或设置过滤
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域(可以为"")</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.Type">
            <summary>
获取或设置类型
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.FeatureDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.FeatureDataset.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="T:PIE.DataSource.FeatureDataset">
            <summary>
要素数据集对象
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.CreateSpatialIndex(System.Int32)">
            <summary>
创建空间索引
<param name="nDepth">空间索引的级别。最大12</param></summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.Encoding">
            <summary>
获取或设置字符编码
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.FieldIgnored">
            <summary>
是否忽略Field的加载
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.GeometryIgnored">
            <summary>
是否忽略Geometry的加载
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.AlterFieldDefn(System.Int32,PIE.DataSource.IField!System.Runtime.CompilerServices.IsConst,&lt;unknown type&gt;)">
            <summary>
修改字段
</summary>
            <param name="iField">iField</param>
            <param name="ptrNewField">ptrNewField</param>
            <param name="eAlterType">eAlterType</param>
            <returns>字段</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetExtent">
            <summary>
获取Extent
</summary>
            <returns>Extent</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetFields">
            <summary>
获取字段
</summary>
            <returns>字段</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetGeomType">
            <summary>
获取Geometry类型
</summary>
            <returns>Geometry类型</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.CreateNewFeature">
            <summary>
创建新要素
</summary>
            <returns>新要素</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">索引</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.AddField(PIE.DataSource.IField,System.Boolean)">
            <summary>
添加字段
</summary>
            <param name="field">字段</param>
            <param name="bApproxOK">如果不符合要求是否继续添加</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.Save">
            <summary>
保存
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetFeatureCount">
            <summary>
获取要素数量
</summary>
            <returns>Feature数量</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.DeleteFeature(System.Int64)">
            <summary>
删除要素
</summary>
            <param name="nFID">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.AddFeature(PIE.DataSource.IFeature)">
            <summary>
添加要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.UpdateFeature(PIE.DataSource.IFeature)">
            <summary>
更新要素
</summary>
            <param name="ptrFeature">要素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetFeature(System.Int64)">
            <summary>
获取要素
</summary>
            <param name="nFID">nFID</param>
            <returns>要素</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetNextFeature">
            <summary>
获取下一个要素
</summary>
            <returns>下一个要素</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.ResetReading">
            <summary>
重置读取
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.Open(System.String,&lt;unknown type&gt;)">
            <summary>
打开
</summary>
            <param name="strPath">路径</param>
            <param name="mode">打开模式</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.Queryfilter">
            <summary>
获取过滤新
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.IFeatureDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeatureDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="T:PIE.DataSource.IFeatureDataset">
            <summary>
矢量要素集接口
</summary>
        </member>
        <member name="F:PIE.DataSource.Feature.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.#ctor(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFeatureClass">
            <summary>
获取要素集
</summary>
            <returns>要素集</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.Clone">
            <summary>
克隆要素
</summary>
            <returns>克隆的要素</returns>
            <summary>
克隆要素
</summary>
            <returns>克隆的要素</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFields">
            <summary>
获取字段定义
</summary>
            <returns>字段定义</returns>
            <summary>
获取字段定义
</summary>
            <returns>字段定义</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.IsValueNull(System.Int32)">
            <summary>
字段是否为空
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否为空</returns>
            <summary>
字段是否为空
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetValue(System.Int32)">
            <summary>
获取字段值
</summary>
            <param name="nIndex">索引</param>
            <returns>字段值</returns>
            <summary>
获取字段值
</summary>
            <param name="nIndex">索引</param>
            <returns>字段值</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetValue(System.String)">
            <summary>
获取字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <returns>字段值</returns>
            <summary>
获取字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <returns>字段值</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.SetValue(System.String,System.Object)">
            <summary>
设置字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <param name="field">值</param>
            <summary>
设置字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <param name="field">值</param>
        </member>
        <member name="M:PIE.DataSource.Feature.SetValue(System.Int32,System.Object)">
            <summary>
设置字段值
</summary>
            <param name="nIndex">字段索引</param>
            <param name="field">值</param>
            <summary>
设置字段值
</summary>
            <param name="nIndex">字段索引</param>
            <param name="field">值</param>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFieldType(System.Int32)">
            <summary>
获取字段类型
</summary>
            <param name="Index">索引</param>
            <returns>字段类型</returns>
            <summary>
获取字段类型
</summary>
            <param name="Index">索引</param>
            <returns>字段类型</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFieldName(System.Int32)">
            <summary>
获取字段名
</summary>
            <param name="Index">索引号</param>
            <returns>字段名</returns>
            <summary>
获取字段名
</summary>
            <param name="Index">索引号</param>
            <returns>字段名</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFieldIndex(System.String)">
            <summary>
获取字段索引
</summary>
            <param name="FieldName">字段名</param>
            <returns>字段索引</returns>
            <summary>
获取字段索引
</summary>
            <param name="FieldName">字段名</param>
            <returns>字段索引</returns>
        </member>
        <member name="M:PIE.DataSource.Feature.GetFieldCount">
            <summary>
获取字段数量
</summary>
            <summary>
获取字段数量
</summary>
        </member>
        <member name="P:PIE.DataSource.Feature.FID">
            <summary>
获取设置FID
</summary>
        </member>
        <member name="P:PIE.DataSource.Feature.Geometry">
            <summary>
获取设置Geometry
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Feature.#ctor(PIE.DataSource.IFields)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.Feature">
            <summary>
要素对象
</summary>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFeatureClass">
            <summary>
获取要素集
</summary>
            <returns>要素集</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.Clone">
            <summary>
克隆要素
</summary>
            <returns>克隆的要素</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFields">
            <summary>
获取字段定义
</summary>
            <returns>字段定义</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.IsValueNull(System.Int32)">
            <summary>
字段是否为空
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否为空</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetValue(System.Int32)">
            <summary>
获取字段值
</summary>
            <param name="nIndex">索引</param>
            <returns>字段值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetValue(System.String)">
            <summary>
获取字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <returns>字段值</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.SetValue(System.String,System.Object)">
            <summary>
设置字段值
</summary>
            <param name="strFieldName">字段名称</param>
            <param name="field">值</param>
        </member>
        <member name="M:PIE.DataSource.IFeature.SetValue(System.Int32,System.Object)">
            <summary>
设置字段值
</summary>
            <param name="nIndex">字段索引</param>
            <param name="field">值</param>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFieldType(System.Int32)">
            <summary>
获取字段类型
</summary>
            <param name="Index">索引</param>
            <returns>字段类型</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFieldName(System.Int32)">
            <summary>
获取字段名
</summary>
            <param name="Index">索引号</param>
            <returns>字段名</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFieldIndex(System.String)">
            <summary>
获取字段索引
</summary>
            <param name="FieldName">字段名</param>
            <returns>字段索引</returns>
        </member>
        <member name="M:PIE.DataSource.IFeature.GetFieldCount">
            <summary>
获取字段数量
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeature.FID">
            <summary>
获取设置FID
</summary>
        </member>
        <member name="P:PIE.DataSource.IFeature.Geometry">
            <summary>
获取设置Geometry
</summary>
        </member>
        <member name="T:PIE.DataSource.IFeature">
            <summary>
要素接口
</summary>
        </member>
        <member name="F:PIE.DataSource.Fields.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.Fields.#ctor(SysUtility._ptr_t&lt;SysDataSource.Fields&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Fields.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.SetPrecision(System.Int32,System.Int32)">
            <summary>
设置字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段精度</param>
            <summary>
设置字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段精度</param>
        </member>
        <member name="M:PIE.DataSource.Fields.GetPrecision(System.Int32)">
            <summary>
获取字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段精度</returns>
            <summary>
获取字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段精度</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.SetWidth(System.Int32,System.Int32)">
            <summary>
设置字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段宽度</param>
            <summary>
设置字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段宽度</param>
        </member>
        <member name="M:PIE.DataSource.Fields.GetWidth(System.Int32)">
            <summary>
获取字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段宽度</returns>
            <summary>
获取字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段宽度</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.IsFieldIgnored">
            <summary>
是否忽略字段
</summary>
            <returns>bool</returns>
            <summary>
是否忽略字段
</summary>
            <returns>bool</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.IsGeometryIgnored">
            <summary>
是否忽略Geometry
</summary>
            <returns>bool</returns>
            <summary>
是否忽略Geometry
</summary>
            <returns>bool</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否成功</returns>
            <summary>
删除字段
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.DeleteField(System.String)">
            <summary>
删除字段
</summary>
            <param name="strName">字段名称</param>
            <returns>是否成功</returns>
            <summary>
删除字段
</summary>
            <param name="strName">字段名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.AddField(PIE.DataSource.IField)">
            <summary>
添加字段
</summary>
            <param name="ptrField">新字段</param>
            <returns>是否成功</returns>
            <summary>
添加字段
</summary>
            <param name="strName">新字段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.AddField(System.String,&lt;unknown type&gt;,System.Int32,System.Int32)">
            <summary>
添加字段
</summary>
            <param name="strName">字段名称</param>
            <param name="eType">字段类型</param>
            <param name="nWidth">字段长度，以字节为单位</param>
            <returns>是否成功</returns>
            <summary>
添加字段
</summary>
            <param name="strName">字段名称</param>
            <param name="eType">字段类型</param>
            <param name="eType">字段长度，以字节为单位</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.GetFieldIndex(System.String)">
            <summary>
获取字段索引号
</summary>
            <param name="strName">字段名称</param>
            <returns>字段索引</returns>
            <summary>
获取字段索引号
</summary>
            <param name="strName">字段名称</param>
            <returns>字段索引</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.GetFieldCount">
            <summary>
获取字段数
</summary>
            <returns>字段个数</returns>
            <summary>
获取字段数
</summary>
            <returns>字段个数</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.GetFieldName(System.Int32)">
            <summary>
获取字段名称
</summary>
            <param name="nIndex">索引</param>
            <returns>返回字段名称</returns>
            <summary>
获取字段名称
</summary>
            <param name="nIndex">索引</param>
            <returns>返回字段名称</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.GetFieldType(System.Int32)">
            <summary>
获取字段类型
</summary>
            <param name="nIndex">索引</param>
            <summary>
获取字段类型
</summary>
            <param name="nIndex">索引</param>
        </member>
        <member name="M:PIE.DataSource.Fields.DeleteField(PIE.DataSource.IField)">
            <summary>
删除字段
</summary>
            <param name="ptrField">字段对象</param>
            <summary>
删除字段
</summary>
            <param name="ptrField">字段对象</param>
        </member>
        <member name="M:PIE.DataSource.Fields.GetField(System.Int32)">
            <summary>
根据索引获取字段对象
</summary>
            <param name="nIndex">索引</param>
            <returns>字段对象</returns>
            <summary>
根据索引获取字段对象
</summary>
            <param name="nIndex">索引</param>
            <returns>字段对象</returns>
        </member>
        <member name="M:PIE.DataSource.Fields.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Fields.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Fields.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.Fields">
            <summary>
字段数据集
</summary>
        </member>
        <member name="M:PIE.DataSource.IFields.SetPrecision(System.Int32,System.Int32)">
            <summary>
设置字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段精度</param>
        </member>
        <member name="M:PIE.DataSource.IFields.GetPrecision(System.Int32)">
            <summary>
获取字段精度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段精度</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.SetWidth(System.Int32,System.Int32)">
            <summary>
设置字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <param name="nIndex">字段宽度</param>
        </member>
        <member name="M:PIE.DataSource.IFields.GetWidth(System.Int32)">
            <summary>
获取字段宽度
</summary>
            <param name="nIndex">字段索引</param>
            <returns>返回字段宽度</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.IsFieldIgnored">
            <summary>
是否忽略字段
</summary>
            <returns>bool</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.IsGeometryIgnored">
            <summary>
是否忽略Geometry
</summary>
            <returns>bool</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.DeleteField(System.Int32)">
            <summary>
删除字段
</summary>
            <param name="nIndex">字段索引</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.DeleteField(System.String)">
            <summary>
删除字段
</summary>
            <param name="strName">字段名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.AddField(PIE.DataSource.IField)">
            <summary>
添加字段
</summary>
            <param name="ptrField">新字段</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.AddField(System.String,&lt;unknown type&gt;,System.Int32,System.Int32)">
            <summary>
添加字段
</summary>
            <param name="strName">字段名称</param>
            <param name="eType">字段类型</param>
            <param name="nWidth">字段长度，以字节为单位</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.GetFieldIndex(System.String)">
            <summary>
获取字段索引号
</summary>
            <param name="strName">字段名称</param>
            <returns>字段索引</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.GetFieldCount">
            <summary>
获取字段数
</summary>
            <returns>字段个数</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.GetFieldName(System.Int32)">
            <summary>
获取字段名称
</summary>
            <param name="nIndex">索引</param>
            <returns>返回字段名称</returns>
        </member>
        <member name="M:PIE.DataSource.IFields.GetFieldType(System.Int32)">
            <summary>
获取字段类型
</summary>
            <param name="nIndex">索引</param>
        </member>
        <member name="M:PIE.DataSource.IFields.DeleteField(PIE.DataSource.IField)">
            <summary>
删除字段
</summary>
            <param name="ptrField">字段对象</param>
        </member>
        <member name="M:PIE.DataSource.IFields.GetField(System.Int32)">
            <summary>
根据索引获取字段对象
</summary>
            <param name="nIndex">索引</param>
            <returns>字段对象</returns>
        </member>
        <member name="T:PIE.DataSource.IFields">
            <summary>
字段集接口
</summary>
        </member>
        <member name="F:PIE.DataSource.Field.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.#ctor(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.DataSource.Field.Precision">
            <summary>
获取或设置精度
</summary>
        </member>
        <member name="P:PIE.DataSource.Field.Width">
            <summary>
获取或设置字段宽度
</summary>
        </member>
        <member name="P:PIE.DataSource.Field.Type">
            <summary>
获取或设置字段类型
</summary>
        </member>
        <member name="P:PIE.DataSource.Field.DefaultValue">
            <summary>
获取或设置默认值
</summary>
        </member>
        <member name="P:PIE.DataSource.Field.AliasName">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.DataSource.Field.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.Field.#ctor(System.String,&lt;unknown type&gt;,System.Int32,System.Int32)">
            <summary>
构造函数
</summary>
            <param name="name">字段名称</param>
            <param name="type">字段类型</param>
            <param name="width">字段宽度</param>
            <param name="precision">精度</param>
            <summary>
构造函数
</summary>
            <param name="name">字段名称</param>
            <param name="type">字段类型</param>
            <param name="width">字段宽度</param>
            <param name="precision">精度</param>
        </member>
        <member name="T:PIE.DataSource.Field">
            <summary>
字段
</summary>
        </member>
        <member name="F:PIE.DataSource.QueryFilter.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.#ctor(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.GetQueryGeometry">
            <summary>
获取空间查询条件
</summary>
            <returns>空间查询条件</returns>
            <summary>
获取空间查询条件
</summary>
            <returns>空间查询条件</returns>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.GetAttributeQueryString">
            <summary>
获取属性查询条件
</summary>
            <returns>属性查询条件</returns>
            <summary>
获取属性查询条件
</summary>
            <returns>属性查询条件</returns>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.SetSpatialQuery(PIE.Geometry.IGeometry)">
            <summary>
设置空间查询条件
</summary>
            <param name="ptrGeometryQuery">空间查询条件</param>
            <summary>
设置空间查询条件
</summary>
            <param name="ptrGeometryQuery">空间查询条件</param>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.SetAttributeQuery(System.String)">
            <summary>
设置属性查询条件
</summary>
            <param name="strQuery">查询条件</param>
            <summary>
设置属性查询条件
</summary>
            <param name="strQuery">查询条件</param>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.DataSource.QueryFilter.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.DataSource.QueryFilter">
            <summary>
查询过滤器类
</summary>
        </member>
        <member name="M:PIE.DataSource.IQueryFilter.GetQueryGeometry">
            <summary>
获取空间查询条件
</summary>
            <returns>空间查询条件</returns>
        </member>
        <member name="M:PIE.DataSource.IQueryFilter.GetAttributeQueryString">
            <summary>
获取属性查询条件
</summary>
            <returns>属性查询条件</returns>
        </member>
        <member name="M:PIE.DataSource.IQueryFilter.SetSpatialQuery(PIE.Geometry.IGeometry)">
            <summary>
设置空间查询条件
</summary>
            <param name="ptrGeometryQuery">空间查询条件</param>
        </member>
        <member name="M:PIE.DataSource.IQueryFilter.SetAttributeQuery(System.String)">
            <summary>
设置属性查询条件
</summary>
            <param name="strQuery">查询条件</param>
        </member>
        <member name="T:PIE.DataSource.IQueryFilter">
            <summary>
查询过滤器类接口
</summary>
        </member>
        <member name="M:PIE.DataSource.IField.Clone">
            <summary>
克隆
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.Precision">
            <summary>
获取或设置精度
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.Width">
            <summary>
获取或设置字段宽度
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.Type">
            <summary>
获取或设置字段类型
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.DefaultValue">
            <summary>
获取或设置默认值
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.AliasName">
            <summary>
获取或设置别名
</summary>
        </member>
        <member name="P:PIE.DataSource.IField.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="T:PIE.DataSource.IField">
            <summary>
字段接口
</summary>
        </member>
        <member name="M:PIE.DataSource.IDataset.SetMetadataItem(System.String,System.String,System.String)">
            <summary>
设置元数据集项信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">值</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.SetMetadata(System.String[],System.String)">
            <summary>
设置元数据集信息
</summary>
            <param name="papszMetadata">输入信息</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.GetMetadataDomainList">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.GetMetadata1(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.GetMetadata(System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.GetMetadataItem(System.String,System.String)">
            <summary>
获得元数据信息
</summary>
            <param name="pszName">名字</param>
            <param name="pszDomain">区域</param>
            <returns>值</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.CanCopy">
            <summary>
是否可以进行文件级复制
</summary>
            <returns>是否可复制</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.CanWrite">
            <summary>
是否可写
</summary>
            <returns>是否可写</returns>
        </member>
        <member name="M:PIE.DataSource.IDataset.Copy(System.String)">
            <summary>
复制为
</summary>
            <param name="strFullName">文件路径名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.DataSource.IDataset.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.DataSource.IDataset.DataSourceType">
            <summary>
获取数据源类型-一种数据集可能对应多种属于源类型
</summary>
        </member>
        <member name="P:PIE.DataSource.IDataset.Type">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IDataset.Name">
            <summary>
获取或设置名称
</summary>
        </member>
        <member name="P:PIE.DataSource.IDataset.FullName">
            <summary>
获取路径名
</summary>
        </member>
        <member name="T:PIE.DataSource.IDataset">
            <summary>
IDataset数据集接口
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTInteger64List">
            <summary>
List of 64bit integers
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTInteger64">
            <summary>
Single 64bit integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTDateTime">
            <summary>
Date and Time
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTTime">
            <summary>
Time
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTDate">
            <summary>
Date
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTBinary">
            <summary>
Raw Binary data
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTWideStringList">
            <summary>
deprecated
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTWideString">
            <summary>
deprecated
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTStringList">
            <summary>
Array of strings
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTString">
            <summary>
String of ASCII chars
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTRealList">
            <summary>
List of doubles
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTReal">
            <summary>
Double Precision floating point
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTIntegerList">
            <summary>
List of 32bit integers
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFTInteger">
            <summary>
Simple 32bit integer
</summary>
        </member>
        <member name="T:PIE.DataSource.OpenMode">
            <summary>
打开方式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Update">
            <summary>
Read/write access
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ReadOnly">
            <summary>
Read only (no update) access
</summary>
        </member>
        <member name="T:PIE.DataSource.DatasetType">
            <summary>
数据集类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Multi">
            <summary>
混合数据类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Feature">
            <summary>
矢量数据类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Raster">
            <summary>
栅格数据类型
</summary>
        </member>
        <member name="T:PIE.DataSource.DadaSampleType">
            <summary>
金字塔采样方式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NONE">
            <summary>
无
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AVERAGE_MAGPHASE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.MODE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.AVERAGE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.CUBIC">
            <summary>
立方卷积
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GAUSS">
            <summary>
高斯
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NEAREST">
            <summary>
最邻近
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.GCPZ">
            <summary>
Elevation of GCP, or zero if not known
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.GCPY">
            <summary>
Y position of GCP in georeferenced space
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.GCPX">
            <summary>
X position of GCP in georeferenced space
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.GCPLine">
            <summary>
Line (y) location of GCP on raster
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.GCPPixel">
            <summary>
Pixel (x) location of GCP on raster
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.Info">
            <summary>
Informational message or ""
</summary>
        </member>
        <member name="F:PIE.DataSource.GCP.ID">
            <summary>
Unique identifier, often numeric
</summary>
        </member>
        <member name="T:PIE.DataSource.GCP">
            <summary>
地理坐标控制点
</summary>
        </member>
        <member name="T:PIE.DataSource.PixelDataType">
            <summary>
PixelDataType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TypeCount">
            <summary>
maximum type # + 1
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.CFloat64">
            <summary>
Complex Float64
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.CFloat32">
            <summary>
Complex Float32
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.CInt32">
            <summary>
Complex Int32
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.CInt16">
            <summary>
 Complex Int16
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Float64">
            <summary>
Sixty four bit floating point
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Float32">
            <summary>
Thirty two bit floating point
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Int32">
            <summary>
Thirty two bit signed integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UInt32">
            <summary>
Thirty two bit unsigned integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Int16">
            <summary>
Sixteen bit signed integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UInt16">
            <summary>
Sixteen bit unsigned integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Byte">
            <summary>
Eight bit unsigned integer
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Unknown">
            <summary>
未知类型
</summary>
            <summary>
未知数据类型
</summary>
        </member>
        <member name="T:PIE.DataSource.IEditModeType">
            <summary>
IEditModeType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Edit_Delete">
            <summary>
删除
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Edit_Update">
            <summary>
更新
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Edit_Add">
            <summary>
添加
</summary>
        </member>
        <member name="T:PIE.DataSource.FieldAlterType">
            <summary>
FieldAlterType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Alter_All_Flag">
Alter all parameters of field definition.

</member>
        <member name="F:&lt;unknown type&gt;.Alter_Default_Flag">
Alter field DEFAULT value.
			* @since GDAL 2.0

</member>
        <member name="F:&lt;unknown type&gt;.Alter_Nullable_Flag">
Alter field NOT NULL constraint.
			* @since GDAL 2.0

</member>
        <member name="F:&lt;unknown type&gt;.Alter_Width_Precision_Flag">
Alter field width and precision.

</member>
        <member name="F:&lt;unknown type&gt;.Alter_Type_Flag">
Alter field type.

</member>
        <member name="F:&lt;unknown type&gt;.Alter_Name_Flag">
Alter field name.

</member>
        <member name="D:SysDataSource.FeatureDatasetPtr">
@brief 要素数据集 智能指针

</member>
        <member name="F:SysDataSource.FeatureDataset.m_sTextCodec">
@brief 字符编码

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrQueryFilter">
@brief 查询过滤对象

</member>
        <member name="F:SysDataSource.FeatureDataset.m_eGeometryType">
@brief 几何类型

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrFields">
@brief 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFields">
@brief 获取字段
@return FieldsPtr 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetGeomType">
@brief 获取类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateSpatialIndex(System.Int32)">
@brief 创建空间索引
@param [in] nDepth 空间索引的级别。最大12
@return 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.CanCreateSpatialIndex">
@brief 是否能创建空间索引
@return 是否能

</member>
        <member name="M:SysDataSource.FeatureDataset.GetEncoding">
@brief 获取字符编码
@return QString 字符编码

</member>
        <member name="M:SysDataSource.FeatureDataset.SetEncoding(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字符编码
@param [in] strEncoding  字符编码
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetFieldIgnored(System.Boolean)">
@brief 设置是否忽略字段
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsFieldIgnored">
@brief  是否忽略字段的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.SetGeometryIgnored(System.Boolean)">
@brief 设置是否忽略Geometry的加载
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsGeometryIgnored">
@brief 是否忽略Geometry的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.RecomputeExtent">
@brief 重新计算范围
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.SetNextByIndex(System.Int64)">
@brief 通过索引设置下一个要素数据集
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 要素

</member>
        <member name="M:SysDataSource.FeatureDataset.AlterFieldDefn(System.Int32,SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldAlterType)">
@brief 修改字段
@param [in] iField 编号FID
@param [in] ptrNewField  新的字段
@param [in] eAlterType 修改的类型
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 -----------------
		* @brief 添加字段
		* @param [in] strName 字段名称
		* @param [in] eType   字段类型 
		* @return bool 是否成功

@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Save">
@brief 保存
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeatureCount">
@brief 获取要素数量
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID 编号nFID 
@return  FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetNextFeature">
@brief 获取下一个要素
@return FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.ResetReading">
@brief 重置要素读取位置 
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetQueryFilter(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置查询过滤
@param [in] ptrFilter 过滤器
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.GetQueryFilter">
@brief 获取过滤器
@return QueryFilterPtr 过滤器对象

</member>
        <member name="M:SysDataSource.FeatureDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 读写类型
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FieldAlterType">
@brief 字段更改类型 枚举

</member>
        <member name="F:Alter_All_Flag">
Alter all parameters of field definition.

</member>
        <member name="F:Alter_Default_Flag">
Alter field DEFAULT value.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Nullable_Flag">
Alter field NOT NULL constraint.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Width_Precision_Flag">
Alter field width and precision.

</member>
        <member name="F:Alter_Type_Flag">
Alter field type.

</member>
        <member name="F:Alter_Name_Flag">
Alter field name.

</member>
        <member name="D:SysDataSource.QueryFilterPtr">
@brief 查询类 智能指针

</member>
        <member name="F:SysDataSource.QueryFilter.m_ptrGeometryQuery">
@brief 空间查询条件

</member>
        <member name="F:SysDataSource.QueryFilter.m_strQuery">
@brief 查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetQueryGeometry">
@brief 获取空间查询条件
@return SysGeometry::GeometryPtr 空间查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetAttributeQueryString">
@brief 获取属性查询条件
@return QString 属性查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.SetSpatialQuery(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间查询条件
@param [in] ptrGeometryQuery 几何查询
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.SetAttributeQuery(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置属性查询条件
@param [in] strQuery 查询条件
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.QueryFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.QueryFilter">
@class  QueryFilter
@brief  查询类

</member>
        <member name="F:SysDataSource.Feature.m_pFeatureClass">
@brief 要素类对象指针

</member>
        <member name="F:SysDataSource.Feature.m_vecField">
@brief 字段集合

</member>
        <member name="F:SysDataSource.Feature.m_ptrGeometry">
@brief 几何对象

</member>
        <member name="F:SysDataSource.Feature.m_ptrFields">
@brief 字段

</member>
        <member name="F:SysDataSource.Feature.m_nFID">
@brief FID值

</member>
        <member name="M:SysDataSource.Feature.GetFeatureClass">
@brief 获取要素类
@return FeatureClass* 要素类对象指针

</member>
        <member name="M:SysDataSource.Feature.Clone">
@brief 克隆
@return FeaturePtr 克隆成果

</member>
        <member name="M:SysDataSource.Feature.GetFields">
@brief 获取字段定义
@return  FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.Feature.IsValueNull(System.Int32)">
@brief 字段是否为空
@param [in] nIndex 字段索引
@return bool  是否为空

</member>
        <member name="M:SysDataSource.Feature.GetValueAsString(System.Int32)">
@brief 获取字段值的字符串
@param [in] nIndex 索引
@return  QString  字符串

</member>
        <member name="M:SysDataSource.Feature.GetValue(System.Int32)">
@brief 获取字段值
@param [in] nIndex 索引
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.GetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段值
@param [in] strFieldName 字段名
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.SetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] strFieldName 字段名称
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetValue(System.Int32,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] nIndex 字段索引
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetFID(System.Int64)">
@brief 设置FID
@param [in] nFID
@return void

</member>
        <member name="M:SysDataSource.Feature.GetFID">
@brief 获取FID
@return  qlonglong 获取FID

</member>
        <member name="M:SysDataSource.Feature.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Feature.GetFieldName(System.Int32)">
@brief 获取字段名
@param [in] nIndex 索引号
@return QString字段名

</member>
        <member name="M:SysDataSource.Feature.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引
@param [in] strName 字段名
@return  int字段索引

</member>
        <member name="M:SysDataSource.Feature.GetFieldCount">
@brief 获取字段数量
@return int 字段数量

</member>
        <member name="M:SysDataSource.Feature.GetGeometry">
@brief 获取几何对象Geometry
@return   几何对象Geometry

</member>
        <member name="M:SysDataSource.Feature.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置几何对象Geometry
@param [in] ptrGeometry 几何对象
@return void

</member>
        <member name="M:SysDataSource.Feature.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Feature.#ctor(SysUtility._ptr_t&lt;SysDataSource.Fields&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数

</member>
        <member name="T:SysDataSource.Feature">
@class Feature
	* @brief 矢量类


@brief 类的前置声明

</member>
        <member name="T:SysDataSource.FeatureClass">
@brief 类的前置声明和智能指针定义


@brief 定义友元类


@brief 类的前置声明和智能指针定义


@class FeatureClass
@brief  要素类

</member>
        <member name="D:SysDataSource.FieldsPtr">
@brief 字段集类 智能指针

</member>
        <member name="F:SysDataSource.Fields.m_bFieldIgnored">
@brief  是否忽略字段

</member>
        <member name="F:SysDataSource.Fields.m_bGeometryIgnored">
@brief  是否忽略Geometry 

</member>
        <member name="F:SysDataSource.Fields.m_vecField">
@brief  字段集合

</member>
        <member name="M:SysDataSource.Fields.SetPrecision(System.Int32,System.Int32)">
@brief  设置精度
@param [in] nIndex 索引号
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Fields.GetPrecision(System.Int32)">
@brief  获取精度
@param [in] nIndex 索引号
@return int 精度

</member>
        <member name="M:SysDataSource.Fields.SetWidth(System.Int32,System.Int32)">
@brief  设置宽度
@param [in] nIndex 索引号
@param [in] nWidth 宽度
@return void 

</member>
        <member name="M:SysDataSource.Fields.GetWidth(System.Int32)">
@brief  获取宽度
@param [in] nIndex 索引号
@return int 宽度

</member>
        <member name="M:SysDataSource.Fields.IsFieldIgnored">
@brief  是否忽略字段
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.IsGeometryIgnored">
@brief 是否忽略Geometry 
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.DeleteField(System.Int32)">
@brief 删除字段 
@param [in] nIndex 字段索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.DeleteField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] strName 字段名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加字段
@param [in] ptrField 字段
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 添加字段
@param [in] strName 字段名称
@param [in] eType 字段类型
@param [in] nWidth 字段长度，以字节为单位
@param [in] nPrecision 字段精度
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引号
@param [in] strName 字段名称
@return int 字段索引号

</member>
        <member name="M:SysDataSource.Fields.GetFieldCount">
@brief 获取字段数
@return int 字段数

</member>
        <member name="M:SysDataSource.Fields.GetFieldName(System.Int32)">
@brief 获取字段名称
@param [in] nIndex 索引
@return  QString 字段名称

</member>
        <member name="M:SysDataSource.Fields.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Fields.DeleteField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] nIndex 字段对象
@return void

</member>
        <member name="M:SysDataSource.Fields.GetField(System.Int32)">
@brief 根据索引获取字段对象
@param [in] nIndex 索引
@return FieldPtr 字段对象

</member>
        <member name="M:SysDataSource.Fields.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Fields.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FeatureDataset">
@brief  要素数据集


@class FeatureDataset
	* @brief  要素数据集类

</member>
        <member name="T:SysDataSource.Fields">
@class Fields
	* @brief  字段集类

</member>
        <member name="F:SysDataSource.Field.m_nPrecision">
@brief 精度

</member>
        <member name="F:SysDataSource.Field.m_nWidth">
@brief 宽度

</member>
        <member name="F:SysDataSource.Field.m_enumFieldType">
@brief 字段类型  枚举变量

</member>
        <member name="F:SysDataSource.Field.m_DefaultValue">
@brief 默认值

</member>
        <member name="F:SysDataSource.Field.m_strAliasName">
@brief 别名

</member>
        <member name="F:SysDataSource.Field.m_strName">
@brief 名字

</member>
        <member name="M:SysDataSource.Field.Clone">
@brief 克隆
@return  FieldPtr 克隆结果 字段对象指针

</member>
        <member name="M:SysDataSource.Field.SetPrecision(System.Int32)">
@brief 设置精度
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Field.GetPrecision">
@brief 获取精度
@return  int 精度

</member>
        <member name="M:SysDataSource.Field.SetWidth(System.Int32)">
@brief 设置宽度
@param [in] nWidth 宽度
@return void

</member>
        <member name="M:SysDataSource.Field.GetWidth">
@brief 获取宽度
@return  int 宽度

</member>
        <member name="M:SysDataSource.Field.SetFieldType(SysDataSource.FieldType)">
@brief 设置字段类型
@param [in] type 字段类型
@return void

</member>
        <member name="M:SysDataSource.Field.GetFieldType">
@brief 获取字段类型
@return FieldType  字段类型

</member>
        <member name="M:SysDataSource.Field.SetDefaultValue(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认值
@param [in] value  默认值
@return void 

</member>
        <member name="M:SysDataSource.Field.GetDefaultValue">
@brief 获取默认值
@return QVariant  默认值

</member>
        <member name="M:SysDataSource.Field.SetAliasName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置别名
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetAliasName">
@brief 获取别名
@return QString 字段别名

</member>
        <member name="M:SysDataSource.Field.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Field.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Field.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 有参构造函数
@param [in] strName 名称
@param [in] eType   类型
@param [in] nWidth  宽度
@param [in] nPrecision 精度

</member>
        <member name="T:SysDataSource.Field">
@brief 类的前置声明和智能指针定义


@class Field
	* @brief 字段类

</member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="D:SysDataSource.MultiDatasetPtr">
@brief 多数据集 智能指针

</member>
        <member name="F:SysDataSource.MultiDataset.m_vecDataset">
@brief 数据集集合

</member>
        <member name="M:SysDataSource.MultiDataset.DeleteDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除数据集
@param [in] strName 数据集名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.MultiDataset.DeleteDataset(System.Int32)">
@brief 删除数据集
@param [in] nIndex 数据集索引号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.MultiDataset.GetDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据名称查找数据集
@param [in] strName 名称
@return  SysDataSource::DatasetPtr 数据集

</member>
        <member name="M:SysDataSource.MultiDataset.GetDataset(System.Int32)">
@brief 根据索引查找数据集
@param [in] nIndex  索引
@return  SysDataSource::DatasetPtr 数据集

</member>
        <member name="M:SysDataSource.MultiDataset.GetDatasetCount">
@brief 获取数据集个数
@return int 数据集个数

</member>
        <member name="M:SysDataSource.MultiDataset.AddDataset(SysUtility._ptr_t&lt;SysDataSource.Dataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加数据集
@param [in] ptrDatset  数据集
@return void

</member>
        <member name="M:SysDataSource.MultiDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 打开
@param [in] strPath 
@return 

</member>
        <member name="M:SysDataSource.MultiDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.MultiDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.MultiDataset">
@class MultiDataset
	* @brief 多数据集

</member>
        <member name="F:SysDataSource.Dataset.m_bCanWrite">
@brief 是否可以写入 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_bCanCopy">
@brief 是否可以拷贝 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_ptrSpatialReference">
@brief 控件参考

</member>
        <member name="F:SysDataSource.Dataset.m_eDatasetType">
@brief 数据集类型

</member>
        <member name="F:SysDataSource.Dataset.m_strFullName">
@brief 全名

</member>
        <member name="F:SysDataSource.Dataset.m_strName">
@brief 名称

</member>
        <member name="M:SysDataSource.Dataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Dataset.#ctor">
@brief 构造函数

</member>
        <member name="M:SysDataSource.Dataset.CloneMemDataset">
@brief 对内存数据集进行Clone. 如果不是内存数据集，返回空
@return

</member>
        <member name="M:SysDataSource.Dataset.ClearInternalData">
@brief 清除内部缓存
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取元数据
@param [in] const QString 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataDomainList">
@brief 获取数据域列表
@return

</member>
        <member name="M:SysDataSource.Dataset.SetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.Dataset.SetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据
@param [in] papszMetadata ** 输入信息
@para  [in] const char * pszDomain 域

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据
@param [in] const char * 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetInternalHandle">
@brief 获取内部句柄
@return void* 内部句柄指针

</member>
        <member name="M:SysDataSource.Dataset.CanCopy">
@brief 是否可以进行文件级复制
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.CanWrite">
@brief 是否可写
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.Copy(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 复制为指定路径下
@param [in] strFullName 文件路径名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param ptrSpatialRef  空间参考对象指针
@return void 

</member>
        <member name="M:SysDataSource.Dataset.GetSpatialReference">
@brief 获取空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDataSource.Dataset.GetDataSourceType">
@brief 获取数据源类型
@return QString 数据源类型

</member>
        <member name="M:SysDataSource.Dataset.GetType">
@brief 获取数据集类型 
@return DatasetType 数据集类型

</member>
        <member name="M:SysDataSource.Dataset.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strName 名称 
@return void

</member>
        <member name="M:SysDataSource.Dataset.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Dataset.GetFullName">
@brief 获取全路径名
@return QString 全路径名

</member>
        <member name="T:SysDataSource.Dataset">
@brief 类的前置声明和智能指针定义


@class Dataset
@brief 数据集基类

</member>
        <member name="T:SysDataSource.DadaSampleType">
@class DadaSampleType
	* @brief  数据样式类型 枚举

</member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.IDSManager.CreateFeatureDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDataSource.Fields>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.GeometryType,SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.DatasetFactory.CreateFeatureDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDataSource.Fields>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.GeometryType,SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.DatasetFactory.m_mapExtDllName”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.IDSManager.CreateFeatureDataset(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDataSource.Fields>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysGeometry.GeometryType,SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:PIE.DataSource.Feature.GetFeatureClass”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
    </members>
</doc>