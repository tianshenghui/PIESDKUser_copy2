<?xml version="1.0"?>
<doc>
    <assembly>
        "CommonAlgo"
    </assembly>
    <members>
        <member name="M:PIE.CommonAlgo.TransformRGB2IHSAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.TransformRGB2IHSAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformRGB2IHSAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformRGB2IHSAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformRGB2IHSAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.TransformRGB2IHSAlgo">
            <summary>
彩色空间正变换算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.Type">
            <summary>
类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.FileTypeCode">
            <summary>
文件类型编码
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.SatType">
            <summary>
卫星类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.XMLFilePath">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreCali_Exchange_Info.InputFilePath">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPreCali_Exchange_Info">
            <summary>
辐射定标算法接口
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CalibrationType.Reflectivity">
            <summary>
反射率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CalibrationType.Radiance">
            <summary>
辐亮度
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.CalibrationType">
            <summary>
定标类型
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.getXMLNodeValue(System.String,System.String,System.String@)">
            <summary>
读取输入文件对应的xml文件
</summary>
            <param name="strInfile" />
            <param name="strNodeStr" />
            <param name="strOut" />
            <returns />
            <summary>
读取输入文件对应的xml文件
</summary>
            <param name="strInfile" />
            <param name="strNodeStr" />
            <param name="strOut" />
            <returns />
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.parseXML(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
检查输入文件对应的xml文件与data中配置文件是否匹配
</summary>
            <param name="strInfile" />
            <param name="strSatellite" />
            <param name="strSensor" />
            <param name="strSceneDate" />
            <param name="strSunElevation" />
            <param name="strAbsCalibType" />
            <returns />
            <summary>
检查输入文件对应的xml文件与data中配置文件是否匹配
</summary>
            <param name="strInfile" />
            <param name="strSatellite" />
            <param name="strSensor" />
            <param name="strSceneDate" />
            <param name="strSunElevation" />
            <param name="strAbsCalibType" />
            <returns />
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.GetSatelliteID(System.String,System.String@)">
            <summary>
解析txt类型元数据获得该数据的类型（属于哪种卫星数据）
</summary>
            <param name="InputTxt" />
            <param name="strSatelliteID" />
            <summary>
解析txt类型元数据获得该数据的类型（属于哪种卫星数据）
</summary>
            <param name="InputTxt" />
            <param name="strSatelliteID" />
        </member>
        <member name="P:PIE.CommonAlgo.CalibrationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CalibrationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.CalibrationAlgo">
            <summary>
辐射校正算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.VectorToRasterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.strStandardFile">
            <summary>
基准影像文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.y">
            <summary>
指定输出栅格列数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.x">
            <summary>
指定输出栅格行数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.bStandardFile">
            <summary>
0 : 基于指定大小 xy有效，  1 : 基于影像大小 strStandardFile有效
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.strOutputFileType">
            <summary>
转换后的文件类型， GTiff 或 HFA 或 ENVI
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.strOutputFile">
            <summary>
转换后的栅格数据文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.nFieldIndex">
            <summary>
转换所依赖的字段索引
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.VectorToRaster_Exchange_Info.strInputFile">
            <summary>
要转换的矢量数据文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.VectorToRaster_Exchange_Info">
            <summary>
矢量栅格化算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.VectorToRasterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.VectorToRasterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.VectorToRasterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.VectorToRasterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.VectorToRasterAlgo">
            <summary>
矢量栅格化算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandOperAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.BandOperAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandOperAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandOperAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandOperAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BandOperAlgo">
            <summary>
波段运算算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandSpecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.PixelDataType">
            <summary>
数据类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.SelectFileNames">
            <summary>
选中的图像对应的文件file名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.SelectFileBands">
            <summary>
选中的图像对应的波段band编号（是波段编号而非波段索引）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandOper_Exchange_Info.StrExp">
            <summary>
波段运算公式
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BandOper_Exchange_Info">
            <summary>
波段运算算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.BandSpecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandSpecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandSpecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandSpecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BandSpecAlgo">
            <summary>
波谱运算算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterConverterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.RasterConverterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterConverterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterConverterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterConverterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterConverterAlgo">
            <summary>
影像格式转换算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.yEnd">
            <summary>
Y方向终止坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.xEnd">
            <summary>
X方向终止坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.yStart">
            <summary>
Y方向起始坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.xStart">
            <summary>
X方向起始坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.convertBandsIndex">
            <summary>
要转换的波段列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.lOutDataType">
            <summary>
输出文件类型 0 GeoTIFF 1 ENVI IMG 2 ERDAS IMG
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.strOutFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterConverterInfo.rasterDataset">
            <summary>
要转换的数据集
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterConverterInfo">
            <summary>
影像格式转换算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformIHS2RGBAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.TransformIHS2RGBAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformIHS2RGBAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformIHS2RGBAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformIHS2RGBAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.TransformIHS2RGBAlgo">
            <summary>
彩色空间逆变换算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RGBTrans_Exchange_Info.m_vecBandOutIndex">
            <summary>
输出波段
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RGBTrans_Exchange_Info.m_vecBandIndex">
            <summary>
波段向量	
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RGBTrans_Exchange_Info.m_strFileTypeCode">
            <summary>
输出文件类型，默认GTiff
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RGBTrans_Exchange_Info.m_strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RGBTrans_Exchange_Info.m_strInputFile">
            <summary>
输入文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RGBTrans_Exchange_Info">
            <summary>
数据转换算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformFuncAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.TransformFuncAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformFuncAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformFuncAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.TransformFuncAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.TransformFuncAlgo">
            <summary>
主成分正变换算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_outIFFTDataType">
            <summary>
 傅里叶逆变换输出的数据类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.vecBands">
            <summary>
傅里叶变换需要处理的波段向量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.Principal_or_Stretch">
            <summary>
判断进度条的名称是主成分分析还是去相关拉伸
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.lOutBandNum">
            <summary>
主成分正变换时用到输出的波段
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_nType">
            <summary>
缨帽变换，用于区分卫星类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_selBand">
            <summary>
FFT正变换选择的波段号
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_strFileTypeCode">
            <summary>
输出文件类型，默认GTiff
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_strStatFile">
            <summary>
统计文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.m_strInputFile">
            <summary>
输入文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.bForward">
            <summary>
区分正变换还是逆变换
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataTrans_Exchange_Info.AlgoType">
            <summary>
区分调用的是哪个算法
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataTrans_Exchange_Info">
            <summary>
数据转换
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassCombineAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassCombineAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassCombineAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassCombineAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassCombineAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassCombineAlgo">
            <summary>
ImgClassCombineAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMiddleAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltMiddleAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMiddleAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMiddleAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMiddleAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltMiddleAlgo">
            <summary>
ImgProFiltMiddleAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PansharpFuseAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.PansharpFuseAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PansharpFuseAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PansharpFuseAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PansharpFuseAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.PansharpFuseAlgo">
            <summary>
PansharpFuse算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.BMultiThread">
            <summary>
是否多线程
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.AlgoType">
            <summary>
算法类型：0代表pca融合 、1代表pansharp 融合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.ResampleMode">
            <summary>
重采样类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.HighChannel">
            <summary>
高分辨率数据波段
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.MULChannels">
            <summary>
多光谱数据波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.MssFilePath">
            <summary>
 输入多光谱数据路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.Pansharp_Exchange_Info.PanFilePath">
            <summary>
输入高分辨率数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.Pansharp_Exchange_Info">
            <summary>
Pansharp融合算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltSpaDirectAlgo">
            <summary>
ImgProFiltSpaDirectAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMirrorAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageMirrorAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMirrorAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMirrorAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMirrorAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageMirrorAlgo">
            <summary>
ImageMirrorAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.MirrorType">
            <summary>
镜像类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageMirror_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageMirror_Exchange_Info">
            <summary>
图像镜像算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DistanceClassificationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DistanceClassificationAlgo.SetParams(System.Int32)">
            <summary>
设置参数
</summary>
            <param name="handle">C++参数句柄</param>
            <summary>
设置参数
</summary>
            <param name="handle">C++参数句柄</param>
        </member>
        <member name="P:PIE.CommonAlgo.DistanceClassificationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DistanceClassificationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DistanceClassificationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DistanceClassificationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DistanceClassificationAlgo">
            <summary>
DistanceClassificationAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GeoRectifyAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.ResampleMode">
            <summary>
重采样类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.PolyOrder">
            <summary>
多项式次数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.RectifyType">
            <summary>
几何精校正类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.WKT">
            <summary>
WKT投影信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.Cell">
            <summary>
Cell分辨率大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.listPoints">
            <summary>
点集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.FileType">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.GCPFile">
            <summary>
控制点GCP文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info.WarpFile">
            <summary>
输入待校正文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataProcess_GeoRectify_Exchange_Info">
            <summary>
几何精校正算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.GeoRectifyAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GeoRectifyAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GeoRectifyAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GeoRectifyAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.GeoRectifyAlgo">
            <summary>
几何精校正算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KmeansClassificationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.KmeansClassificationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KmeansClassificationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KmeansClassificationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KmeansClassificationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.KmeansClassificationAlgo">
            <summary>
KmeansClassificationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.Threshold">
            <summary>
终止阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.Maxloop">
            <summary>
最大迭代
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.ClassNum">
            <summary>
预期类数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KmeansClassification_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.KmeansClassification_Exchange_Info">
            <summary>
Kmeans分类算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskApplicationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.MaskApplicationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskApplicationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskApplicationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskApplicationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.MaskApplicationAlgo">
            <summary>
MaskApplicationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_strFuncName">
            <summary>
算法进度信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_iMaskValue">
            <summary>
掩膜值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_strFileTypeCode">
            <summary>
输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_strMaskFile">
            <summary>
掩膜文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_strOutputFile">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskApplicationExchange_Info.m_strInputFile">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.MaskApplicationExchange_Info">
            <summary>
应用掩膜算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DeRelationStretchAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DeRelationStretch_Exchange.m_strFileTypeCode">
            <summary>
输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DeRelationStretch_Exchange.m_strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DeRelationStretch_Exchange.m_strInputFile">
            <summary>
输入文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DeRelationStretch_Exchange">
            <summary>
去相关拉伸
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.DeRelationStretchAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DeRelationStretchAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DeRelationStretchAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DeRelationStretchAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DeRelationStretchAlgo">
            <summary>
去相关拉伸算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskCreationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.MaskCreationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskCreationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskCreationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MaskCreationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.MaskCreationAlgo">
            <summary>
MaskCreationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskCreationExchange_Info.m_strFuncName">
            <summary>
掩膜类型 0 分类 1 shp 2 ROI
</summary>
            <summary>
算法进度信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskCreationExchange_Info.m_strFileTypeCode">
            <summary>
输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskCreationExchange_Info.m_strExtFile">
            <summary>
属性文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskCreationExchange_Info.m_strOutputFile">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.MaskCreationExchange_Info.m_strInputFile">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.MaskCreationExchange_Info">
            <summary>
创建掩膜算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BitDepthTransAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strOutFileType">
            <summary>
 输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strOutDataType">
            <summary>
 输出数据类型"Byte"; Int16"; "UInt16"; "Int32";"UInt32";"Float32";"Float64";
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strMaxOu">
            <summary>
 输出最大值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strMinOu">
            <summary>
 输出最小值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strMaxIn">
            <summary>
 输入最大值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strMinIn">
            <summary>
 输入最小值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strOutputFile">
            <summary>
 输出路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info.m_strInputFile">
            <summary>
 输入路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataBitDepthTrans_Exchange_Info">
            <summary>
位深转换算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.BitDepthTransAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BitDepthTransAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BitDepthTransAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BitDepthTransAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BitDepthTransAlgo">
            <summary>
位深转换算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageClipAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageClipAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageClipAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageClipAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageClipAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageClipAlgo">
            <summary>
图像裁剪算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.Geometry">
            <summary>
裁剪几何形状
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.listBands">
            <summary>
波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.InvalidValue">
            <summary>
无效值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.bInvalidValue">
            <summary>
是否设置无效值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.YFactor">
            <summary>
Y比例
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.XFactor">
            <summary>
X比例
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.YEnd">
            <summary>
终点 Y
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.YStart">
            <summary>
起始Y
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.XEnd">
            <summary>
终点 X
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.XStart">
            <summary>
起始 X
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.Type">
            <summary>
裁剪类型(小于等于0表示通过栅格范围裁剪，其他的表示使用几何范围或者shape文件裁剪)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.FileType">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.ShpFilePath">
            <summary>
矢量裁剪文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreImgClip_Exchange_Info.InputFilePath">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPreImgClip_Exchange_Info">
            <summary>
图像裁剪算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ProjectTransAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.ResolutionY">
            <summary>
Y方向分辨率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.ResolutionX">
            <summary>
X方向分辨率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.bGeographicEnabled">
            <summary>
地理变换模型是否启用
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.vecPaths">
            <summary>
批处理输出数据路径集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.vecInFiles">
            <summary>
批处理输入数据路径集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.stGeoTransform">
            <summary>
地理转换结构体
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.InWkt">
            <summary>
输入投影Wkt
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.OutWkt">
            <summary>
输出投影Wkt
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.ResampleAlg">
            <summary>
重采样类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.InputFile">
            <summary>
输入待转换投影文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageProject_Exchange_Info.bDynamic">
            <summary>
是否是动态投影
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageProject_Exchange_Info">
            <summary>
投影转换算法接口
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stGeoTransform.stSevenParameter">
            <summary>
七参数结构体，可能为空
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stGeoTransform.strName">
            <summary>
变换的名字
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stGeoTransform.strDstCS">
            <summary>
目标地理坐标系统
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stGeoTransform.strSrcCS">
            <summary>
源地理坐标系统
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfPPM">
            <summary>
比例系数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfEZ">
            <summary>
z轴旋转量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfEY">
            <summary>
y轴旋转量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfEX">
            <summary>
x轴旋转量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfDZ">
            <summary>
z轴偏移
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfDY">
            <summary>
y轴偏移
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.stSevenPara.dfDX">
            <summary>
x轴偏移
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ProjectTransAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ProjectTransAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ProjectTransAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ProjectTransAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ProjectTransAlgo">
            <summary>
ProjectTrans算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCustomAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltCustomAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCustomAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCustomAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCustomAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltCustomAlgo">
            <summary>
ImgProFiltCustomAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.set_Params(System.Object)">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPrepFYGeoreferenceAlgo">
            <summary>
风云数据预处理
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPrepFYGeoreference_exchange_info">
            <summary>
波段运算算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMosaicParamAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageMosaicParamAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMosaicParamAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMosaicParamAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageMosaicParamAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageMosaicParamAlgo">
            <summary>
图像镶嵌算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.bFastMosaic">
            <summary>
是否快速镶嵌
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.m_strFileTypeCode">
            <summary>
输出影像类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.pMosaicPolygons">
            <summary>
镶嵌面
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.pSrcLyrs">
            <summary>
输入影像
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.pFeatherAreaExt">
            <summary>
宽羽化范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.iFeatherSizeExt">
            <summary>
宽羽化宽度（像素）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.iFeatherSize">
            <summary>
羽化宽度（像素）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.iOutBandType">
            <summary>
输出通道类型，   0：3通道8位输出   1：原始数据格式
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.dOutCentY">
            <summary>
中心点Y
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.dOutCentX">
            <summary>
中心点X
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.dOutScale">
            <summary>
输出比例（米）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.EnvOut">
            <summary>
输出范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicFileInfo.sOutFilePath">
            <summary>
输出文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.buildMosaicFileInfo">
            <summary>
生成镶嵌成果算法参数 
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_sLoadPolygonPath">
            <summary>
导入镶嵌面路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_sShpPath">
            <summary>
镶嵌结果保存路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_pMaskPolygon">
            <summary>
镶嵌结果返回数据
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_bUseGroup">
            <summary>
是否使用分组数据
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_GroupData">
            <summary>
分组数据
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_GroupLyrs">
            <summary>
分组内的图层
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.buildMosaicPolygon.m_iBuildType">
            <summary>
生成镶嵌面的算法类型 0：简单  1：优化  2：智能
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.groupItem.m_GroupLyrs">
            <summary>
分组内的图层
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.groupItem.m_sGroupName">
            <summary>
分组名
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.groupItem">
            <summary>
镶嵌图层分组数据
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.mosaicLayer.m_pBoundPolygon">
            <summary>
图层外接边框，镶嵌范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.mosaicLayer.m_pRsLyr">
            <summary>
镶嵌图层
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.mosaicLayer">
            <summary>
智能镶嵌
</summary>
        </member>
        <member name="M:SysGeometry.GeosFunLibrary.DestoryGEOSGeometry(geos.geom.Geometry*)">
@brief 销毁GEOSGeometry
@param[in] const GEOSGeom geosGeom 空间几何图形对象-GEOS
@return void

</member>
        <member name="M:SysGeometry.GeosFunLibrary.ConvertFromGEOS(geos.geom.Geometry*!System.Runtime.CompilerServices.IsConst)">
@brief 转换Geos的Geometry到PIE的Geometry
@param[in] const GEOSGeom geosGeom 空间几何图形对象-GEOS
@return GeometryPtr 转换成的Geometry

</member>
        <member name="M:SysGeometry.GeosFunLibrary.ConvertToGEOS(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  转换PIE的Geometry到Geos的Geometry
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return GEOSGeom 转换成Geos的Geometry

</member>
        <member name="M:SysGeometry.GeosFunLibrary.IsRectangle(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 判断Geometry是否是Rectangle
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否是Rectangle

</member>
        <member name="M:SysGeometry.GeosFunLibrary.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.GeosFunLibrary.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.GeosFunLibrary">
@class GeosFunLibrary
	* @brief 集合图形计算方法集

</member>
        <member name="D:SysCarto.FeatureLayerPtr">
@brief 矢量图层 智能指针

</member>
        <member name="F:SysCarto.FeatureLayer.m_bAnnoDisplay">
@brief  是否显示注记变量

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrAnnoProps">
@brief  图层注记属性

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrRender">
@brief  矢量要素渲染

</member>
        <member name="F:SysCarto.FeatureLayer.m_strDisplayField">
@brief  显示字段

</member>
        <member name="F:SysCarto.FeatureLayer.m_bIsSelectable">
@brief  是否可以选择

</member>
        <member name="F:SysCarto.FeatureLayer.m_ptrFeatureClass">
@brief  矢量要素类

</member>
        <member name="M:SysCarto.FeatureLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.FeatureLayer.UnRegisterEvents">
@brief  移除注册事件
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.RegisterEvents">
@brief  注册事件
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.OnDataChanged(SysDataSource.Feature*,SysDataSource.Feature*)">
@brief  数据变化槽函数
@param [in] pFeatureOld  旧的要素
@param [in] pFeatureNew  新的要素
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPoint(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层点注记
@param [in] listElement  元素集合
@param [in] ptrPoint   点对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPolygon(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层面注记
@param [in] listElement  元素集合
@param [in] ptrPolygon   面对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotationPolyline(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Polyline&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层线注记
@param [in] listElement  元素集合
@param [in] ptrPolyline   线对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换对象
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotation(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层注记
@param [in] listElement  元素集合
@param [in] ptrGeometry   几何对象
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.UpdateSelectionByType(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType)">
		* @brief  通过类型更新选择
	    * @param [in] lstFIDs  最后一次FID
		* @param [in] selType  选择结果类型
		* @return  void

</member>
        <member name="F:SysCarto.FeatureLayer.LabelProgressSignal">
@brief  标签进度信号

</member>
        <member name="M:SysCarto.FeatureLayer.GetAnnotationElements(QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  获取图层注记元素集
@param [in] listPolygon  多面类型集合
@param [in] listElement  元素集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void 

</member>
        <member name="M:SysCarto.FeatureLayer.DrawAnnotations(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QMap&lt;System.Int32,QList&lt;SysUtility._ptr_t&lt;SysGeometry.Polygon&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制图层注记 
@param [in] painter   绘图设备
@param [in] listPolygon  多面类型集合
@param [in] ptrTrans  显示转换对象
@param [in] ptrTracker   取消转换
@return  void 

</member>
        <member name="M:SysCarto.FeatureLayer.GetSelectionFeatures">
@brief  获取选择要素集合
@return  要素集合

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType,System.Boolean)">
@brief  选择要素集
@param [in] ptrFilter  文件过滤器
@param [in] selType    选择结果类型
@param [in] bJustOne   是否仅仅是一个
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素集
@param [in] lstFeatures  要素ptrFeature集合
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素
@param [in] ptrFeature  要素ptrFeature
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  选择要素集
@param [in] lstFIDs  编号fid集合
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SelectFeature(System.Int64)">
@brief  选择要素 
@param [in] fid  编号fid
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.Refresh">
@brief   刷新

</member>
        <member name="M:SysCarto.FeatureLayer.SetAnnoProperties(SysUtility._ptr_t&lt;SysCarto.AnnotateLayerProperties&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置图层注记属性
@param [in] ptrAnnoProps 图层注记属性
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.GetAnnoProperties">
@brief   获取图层注记属性
@return  AnnotateLayerPropertiesPtr 图层注记属性

</member>
        <member name="M:SysCarto.FeatureLayer.SetDisplayAnnotation(System.Boolean)">
@brief  设置图层是否显示注记
@param [in] bDisplay 是否显示注记
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.IsDisplayAnnotation">
@brief  获取图层是否显示注记 
@return  bool 是否标记

</member>
        <member name="M:SysCarto.FeatureLayer.IsValid">
@brief 是否是有效图层
@return  bool 是否有效

</member>
        <member name="M:SysCarto.FeatureLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.FeatureLayer.RaiseRenderChanged">
@brief  增强渲染
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.FeatureLayer.SetRender(SysUtility._ptr_t&lt;SysCarto.FeatureRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置渲染
@param [in] ptrRender  矢量要素渲染
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.GetRender">
@brief  获取渲染
@return 矢量要素渲染

</member>
        <member name="M:SysCarto.FeatureLayer.SetSelectable(System.Boolean)">
@brief  设置图层是否选中 
@param [in] bSel  是否选中
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.IsSelectable">
@brief  获取图层是否选中 
@return bool 是否选中 

</member>
        <member name="M:SysCarto.FeatureLayer.SetDisplayField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置图层显示字段
@param [in] strField  图层显示字段
@return void 

</member>
        <member name="M:SysCarto.FeatureLayer.GetDisplayField">
@brief  获取图层显示字段
@return QString 图层显示字段

</member>
        <member name="M:SysCarto.FeatureLayer.SetFeatureClass(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置矢量要素类
@param [in] ptrFClass  矢量要素类
@return void

</member>
        <member name="M:SysCarto.FeatureLayer.GetFeatureClass">
@brief  获取矢量要素类
@return SysDataSource::FeatureClassPtr 矢量要素类

</member>
        <member name="M:SysCarto.FeatureLayer.GetExtent">
@brief  获取范围
@return SysGeometry::EnvelopePtr  范围

</member>
        <member name="M:SysCarto.FeatureLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureLayer.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.Element.m_bLocked">
@brief  是否加锁变量

</member>
        <member name="F:SysCarto.Element.m_bFixedSize">
@brief  是否按原比例大小变量

</member>
        <member name="F:SysCarto.Element.m_AnchorPoint">
@brief  锚点

</member>
        <member name="F:SysCarto.Element.m_bRatioed">
@brief  是否按纵横比缩放变量

</member>
        <member name="F:SysCarto.Element.m_CusomerProperty">
@brief  用户属性

</member>
        <member name="F:SysCarto.Element.m_ptrGeometry">
@brief  几何对象

</member>
        <member name="F:SysCarto.Element.m_ElementType">
@brief  元素类型

</member>
        <member name="F:SysCarto.Element.m_bVisible">
@brief  是否可视化变量

</member>
        <member name="F:SysCarto.Element.m_bCanRotate">
@brief  是否可以旋转变量

</member>
        <member name="F:SysCarto.Element.m_strName">
@brief  名称

</member>
        <member name="F:SysCarto.Element.m_strID">
@brief  ID

</member>
        <member name="M:SysCarto.Element.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Element.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.Element.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="M:SysCarto.Element.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.Element.GetAnchorPoint">
@brief 获取锚点
@return 

</member>
        <member name="M:SysCarto.Element.SetAnchorPoint(SysCarto.pieAnchorPointEnum)">
@brief 设置锚点
@param [in] pos 
@return 

</member>
        <member name="M:SysCarto.Element.SetLocked(System.Boolean)">
@brief 设置是否被锁定
@param [in] bLocked  是否被锁定
@return void

</member>
        <member name="M:SysCarto.Element.IsLocked">
@brief 是否被锁定。被锁定之后无法被选中。
@return bool 是否被锁定

</member>
        <member name="M:SysCarto.Element.GetFixedSize">
@brief 获取原比例大小
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.SetFixedAspectRatio(System.Boolean)">
@brief 设置是否按原比例缩放 
@param [in] bRatioed 是否设置
@return void 

</member>
        <member name="M:SysCarto.Element.GetFixedAspectRatio">
@brief 获取是否按原比例缩放 
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] PointPtr originPoint 参照点
@param [in] double sx x方向缩放
@param [in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] PointPtr originPoint 参照点
@param [in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Move(System.Double,System.Double)">
@brief 移动
@param [in] double dx x方向的偏移
@param [in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询边界
@param [in] ptrTrasform  显示转换对象
@return  SysGeometry::EnvelopePtr  包络线对象

</member>
        <member name="M:SysCarto.Element.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.Element.HitTest(System.Double,System.Double,System.Double)">
@brief 点击测试
@param [in]  x  X坐标值
@param [in]  y  Y坐标值
@param [in]  tolerance  偏差量
@return bool  是否成功

</member>
        <member name="M:SysCarto.Element.SetVisibility(System.Boolean)">
@brief  设置可见
@param [in] bVisible 是否设置可见
@return void

</member>
        <member name="M:SysCarto.Element.IsVisible">
@brief 是否可见
@return bool 是 true, 否 false

</member>
        <member name="M:SysCarto.Element.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysCarto.Element.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置几何类型
@param [in] ptrGeometry 几何类型
@return void

</member>
        <member name="M:SysCarto.Element.GetGeometry">
@brief 获取几何类型
@return SysGeometry::GeometryPtr  几何类型

</member>
        <member name="M:SysCarto.Element.SetCusomerProperty(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置用户属性
@param [in] prop 万能数据类型(QT内置数据类型）
@return void

</member>
        <member name="M:SysCarto.Element.GetCustomerProperty">
@brief 获取用户属性
@return QVariant 用户属性

</member>
        <member name="M:SysCarto.Element.CanRotate">
@brief 是否可以旋转
@return bool 是true,否 false

</member>
        <member name="M:SysCarto.Element.GetElementType">
@brief 获取元素类型
@return ElementType 元素类型

</member>
        <member name="M:SysCarto.Element.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in] name 名字
@return void

</member>
        <member name="M:SysCarto.Element.GetName">
@brief 获取名字
@return QString 名字

</member>
        <member name="M:SysCarto.Element.GetID">
@brief 获取ID
@return QString ID

</member>
        <member name="T:SysCarto.IGraphicsContainer">
@brief 声明友元类

</member>
        <member name="T:SysCarto.Element">
@brief 类的前置声明和智能指针定义


@class Element
@brief 元素

</member>
        <member name="T:SysCarto.ElementType">
@class  ElementType
@brief  元素类型 枚举

</member>
        <member name="F:ElementScrew">
@brief 螺旋形

</member>
        <member name="F:ElementLineArrow">
@brief 线箭头

</member>
        <member name="F:ElementArrow">
@brief 箭头

</member>
        <member name="F:ElementCurve">
@brief 曲线

</member>
        <member name="F:ElementMapSurroundFrame">
@brief 圆

</member>
        <member name="F:ElementMapFrame">
@brief 地图框架

</member>
        <member name="F:ElementGroup">
@brief 组

</member>
        <member name="F:ElementText">
@brief 文本

</member>
        <member name="F:ElementFrame">
@brief 框架

</member>
        <member name="F:ElementPicture">
@brief 图片

</member>
        <member name="F:ElementRectangle">
@brief 矩形

</member>
        <member name="F:ElementCircle">
@brief 圆

</member>
        <member name="F:ElementEllipse">
@brief 椭圆

</member>
        <member name="F:ElementPolygon">
@brief 面

</member>
        <member name="F:ElementPolyline">
@brief 线

</member>
        <member name="F:ElementMarker">
@brief 点

</member>
        <member name="F:ElementUnknown">
@brief 无类型

</member>
        <member name="F:SysCarto.IFeatureSelection.m_selType">
@brief 选择结果类型枚举变量

</member>
        <member name="F:SysCarto.IFeatureSelection.m_lstSelIDs">
@brief 选中要素集合

</member>
        <member name="M:SysCarto.IFeatureSelection.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.IFeatureSelection.SelectionChanged">
@brief  信号

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素集集
@param [in] lstFeatures   要素集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSlectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素
@param [in] ptrFeature   要素
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 取消选中要素集
@param [in] lstFIDs   FID编号集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.UnSelectFeature(System.Int64)">
@brief 取消选中要素
@param [in] fid   FID编号
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SetCombinationMethod(SysCarto.SelectionResultType)">
@brief   设置联合方法
@param [in]  selType   选择结果类型
@return  void 

</member>
        <member name="M:SysCarto.IFeatureSelection.GetCombinationMethod">
@brief   获取联合方法
@return  SelectionResultType   选择结果类型

</member>
        <member name="M:SysCarto.IFeatureSelection.ClearSelectionFeatures">
@brief 清除选中要素集
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectionFeatureCount">
@brief 选中要素数量
@return int

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysCarto.SelectionResultType,System.Boolean)">
@brief 选中要素集
@param [in] ptrFilter  文件查询过滤器
@param [in] selType    选择结果类型
@param [in] bJustOne   仅仅是一个
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(QList&lt;SysUtility._ptr_t&lt;SysDataSource.Feature&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选中要素集
@param [in] lstFeatures  要素集集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选择要素
@param [in] ptrFeature  要素
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeatures(QList&lt;System.Int64&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 选择要素集
@param [in] lstFIDs  FID集合
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.SelectFeature(System.Int64)">
@brief 选择要素
@param [in] fid  FID编号
@return void

</member>
        <member name="M:SysCarto.IFeatureSelection.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.IFeatureSelection">
@class  IFeatureSelection
@brief  矢量选择器

</member>
        <member name="T:SysCarto.SelectionResultType">
@class  SelectionResultType
@brief  选择结果类型 枚举

</member>
        <member name="F:SelectionResultXOR">
@brief 选择结果求异或

</member>
        <member name="F:SelectionResultAnd">
@brief 选择结果求交集

</member>
        <member name="F:SelectionResultSubtract">
@brief 减少选择结果

</member>
        <member name="F:SelectionResultAdd">
@brief 添加选择结果

</member>
        <member name="F:SelectionResultNew">
@brief 新选择结果

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_isBlendMode">
@brief  混合标注模式

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_fieldList">
@brief  混合标注模式字段列表

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_operatorList">
@brief  混合标注模式运算符列表

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_enumPointAnnoPos">
@brief  点注记位置

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_nPriority">
@brief  优先权

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_strAnnoField">
@brief  设置注记字段

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_ptrSymbol">
@brief  文本符号

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_dMinimumScale">
@brief  最小比例

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_dMaximumScale">
@brief  最大比例

</member>
        <member name="F:SysCarto.AnnotateLayerProperties.m_ptrFLayer">
@brief  要素图层

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetBlendElementList">
@brief 获取混合标注模式参与字段列表
@return QStringList--字段列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetBlendOperatorList">
@brief 获取混合标注模式运算符列表
@return QStringList--运算符列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetBlendParam(QStringList,QStringList)">
@brief 设置混合标注模式参数
@return operatorL--运算符列表 fieldL-参与字段列表

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.IsBlendMode">
@brief 获取图层标注模式
@return TRUE--混合标注 FALSE-正常标注

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetBlendMode(System.Boolean)">
@brief 设置混合图层标注模式 
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.Clone">
@brief 克隆
@return AnnotateLayerPropertiesPtr 图层注记属性

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetPointAnnotationPosition(SysCarto.AnnotateLayerProperties.piePointAnnoPos)">
@brief 设置点矢量注记显示的位置
@param [in] enumPos  位置
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetPointAnnotationPosition">
@brief 获取点矢量注记显示的位置
@return piePointAnnoPos 位置

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param [in] ptrSymbol  文本符号
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetSymbol">
@brief 获取符号
@return   SysDisplay::TextSymbolPtr 文本符号

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetPriority">
@brief 获取优先权
@return   int 优先权值

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetPriority(System.Int32)">
@brief 设置优先权
@param [in] nValue  优先权值
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetMinimumScale(System.Double)">
@brief 设置最小比例
@param [in] scale  比例
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetMinimumScale">
@brief 获取最小比例
@return  double 最小比例

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetMaximumScale(System.Double)">
@brief 设置最大比例
@param [in] scale  比例
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetMaximumScale">
@brief 获取最大比例
@return  double 最大比例

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetAnnoField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置注记字段 
@param [in] strField  注记字段 
@return void

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetAnnoField">
@brief 获取注记字段 
@return  QString 注记字段

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.SetFeatureLayer(SysUtility._ptr_t&lt;SysCarto.FeatureLayer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置要素图层
@param [in] ptrFLayer  要素图层
@return void  

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.GetFeatureLayer">
@brief 获取要素图层
@return  FeatureLayerPtr 要素图层

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.AnnotateLayerProperties.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.AnnotateLayerProperties">
@brief 类的前置声明和智能指针定义


@class AnnotateLayerProperties
@brief  图层注记属性

</member>
        <member name="D:SysDisplay.TextSymbolPtr">
@brief  文字符号类 智能指针对象

</member>
        <member name="F:SysDisplay.TextSymbol.m_Alignment">
@brief 文本对齐方式

</member>
        <member name="F:SysDisplay.TextSymbol.m_Text">
@brief 文字内容

</member>
        <member name="F:SysDisplay.TextSymbol.m_Size">
@brief 文字大小

</member>
        <member name="F:SysDisplay.TextSymbol.m_Font">
@brief 文字字体

</member>
        <member name="F:SysDisplay.TextSymbol.m_Color">
@brief 文字颜色

</member>
        <member name="F:SysDisplay.TextSymbol.m_Angle">
@brief 文字旋转角度

</member>
        <member name="M:SysDisplay.TextSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.TextSymbol.SetAlignment(SysDisplay.TextAlignment)">
@brief 设置文本对齐方式
@param[in] SysDisplay::TextAlignment alignment 文本对齐方式
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAlignment">
@brief 获得文本对齐方式
@return SysDisplay::TextAlignment 文本对齐方式

</member>
        <member name="M:SysDisplay.TextSymbol.SetText(QString)">
@brief 设置文字
@param[in] QString text 文字
@returnvoid

</member>
        <member name="M:SysDisplay.TextSymbol.GetText">
@brief 获得文字
@return QString 文字

</member>
        <member name="M:SysDisplay.TextSymbol.SetSize(System.Double)">
@brief 设置大小
@param[in] double size 大小
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetSize">
@brief 获得大小
@return double

</member>
        <member name="M:SysDisplay.TextSymbol.SetFont(QFont)">
@brief 设置字体
@param[in] QFont font 字体
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetFont">
@brief 获得字体
@return QFont 字体

</member>
        <member name="M:SysDisplay.TextSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.TextSymbol.SetAngle(System.Double)">
@brief 设置角度
@param[in] double angle 角度
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAngle">
@brief 获得角度
@return double 角度

</member>
        <member name="M:SysDisplay.TextSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.TextSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.TextSymbol">
@class TextSymbol
	* @brief 文本符号

</member>
        <member name="F:SysCarto.FeatureRender.m_Transparency">
@brief 透明度

</member>
        <member name="F:SysCarto.FeatureRender.m_Type">
@brief 要素渲染类型

</member>
        <member name="F:SysCarto.FeatureRender.m_bCanRender">
@brief 是否可以渲染变量

</member>
        <member name="M:SysCarto.FeatureRender.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.FeatureRender.#ctor">
@brief 构造函数

</member>
        <member name="F:SysCarto.FeatureRender.ProgressSignal">
@brief  进度条信号

</member>
        <member name="M:SysCarto.FeatureRender.GetProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 得到属性
@return QVariant 属性

</member>
        <member name="M:SysCarto.FeatureRender.SetProperty(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置属性
@return QVariant 属性

</member>
        <member name="M:SysCarto.FeatureRender.Clone">
@brief 克隆
@return  FeatureRenderPtr 矢量渲染器对象

</member>
        <member name="M:SysCarto.FeatureRender.Draw(SysUtility._ptr_t&lt;SysDataSource.FeatureCursor&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief  绘制
@param [in] ptrFeatureCursor 要素游标
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return void                                             

</member>
        <member name="M:SysCarto.FeatureRender.GetSymbolByFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 根据要素获得对应渲染符号
@param [in] ptrFeature 要素对象
@return 符号对象

</member>
        <member name="M:SysCarto.FeatureRender.SetTransparency(System.Int32)">
@brief 设置透明度百分比（0-100）
@param [in] transparency  透明度百分比（0-100）
@return void

</member>
        <member name="M:SysCarto.FeatureRender.GetTransparency">
@brief 获得透明度百分比（0-100）
@return int 透明度百分比（0-100）

</member>
        <member name="M:SysCarto.FeatureRender.GetType">
@brief   获得渲染类型
@return  FeatureRenderType  渲染类型

</member>
        <member name="M:SysCarto.FeatureRender.CanRender">
@brief 是否可使用此渲染器进行渲染
@return bool 是 true,否 false

</member>
        <member name="T:SysCarto.FeatureLayer">
@brief  声明矢量要素图层类为当前类的友元类


@brief 类的前置声明和智能指针定义


@class FeatureLayer
@brief 矢量图层 

</member>
        <member name="T:SysCarto.FeatureRenderSerializer">
@brief  声明矢量要素序列化渲染类为当前类的友元类

</member>
        <member name="T:SysCarto.FeatureRender">
@brief 类的前置声明和智能指针定义


@class FeatureRender
@brief 矢量渲染器基类

</member>
        <member name="T:SysCarto.FeatureRenderType">
@class FeatureRenderType
@brief 矢量渲染器 枚举类型

</member>
        <member name="F:FRT_MixedSimpleSymbolRender">
@brief 混合简单符号渲染

</member>
        <member name="F:FRT_ChartRender">
@brief Chart渲染

</member>
        <member name="F:FRT_BreaksRender">
@brief 分级渲染

</member>
        <member name="F:FRT_UniqueValueRender">
@brief 唯一值渲染

</member>
        <member name="F:FRT_SimpleSymbolRender">
@brief 简单符号渲染

</member>
        <member name="F:FRT_Unknown">
@brief 未知渲染类型

</member>
        <member name="F:SysDisplay.Symbol.m_SymbolType">
@brief 符号类型

</member>
        <member name="M:SysDisplay.Symbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.Symbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.Symbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.Symbol.Clone">
@brief 克隆
@return SymbolPtr 克隆对象

</member>
        <member name="M:SysDisplay.Symbol.GetType">
@brief 获得符号类型
@return SymbolType 符号类型

</member>
        <member name="T:SysDisplay.Symbol">
@class Symbol
	* @brief 符号

</member>
        <member name="T:SysDisplay.TextAlignment">
@class TextAlignment
	* @brief  文本对齐方式

</member>
        <member name="F:AlignCenter">
@brief 居中对齐

</member>
        <member name="F:AlignRight">
@brief 右对齐

</member>
        <member name="F:AlignLeft">
@brief 左对齐

</member>
        <member name="T:SysDisplay.TextBackgroundType">
@class TextBackgroundType
	* @brief  文本背景类型

</member>
        <member name="F:TBTBalloonCallout">
@brief 气球

</member>
        <member name="T:SysDisplay.TextDirection">
@class TextDirection
	* @brief  文本方向

</member>
        <member name="F:TDVertical">
@brief 纵向

</member>
        <member name="F:TDAngle">
@brief 按角度

</member>
        <member name="F:TDHorizontal">
@brief 横向

</member>
        <member name="T:SysDisplay.TextCase">
@class TextCase
	* @brief  文本大小写

</member>
        <member name="F:TCSmallCaps">
@brief 小型大写

</member>
        <member name="F:TCAllCaps">
@brief 全部大写

</member>
        <member name="F:TCLowercase">
@brief 全部小写

</member>
        <member name="F:TCNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.TextPositionStyle">
@class TextPosition
	* @brief  文本位置样式

</member>
        <member name="F:TPSubscript">
@brief 下标

</member>
        <member name="F:TPSuperscript">
@brief 上标

</member>
        <member name="F:TPNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.BalloonCalloutStyle">
@class BalloonCalloutStyle
	* @brief  气球注释样式

</member>
        <member name="F:BCSOval">
@brief 椭圆

</member>
        <member name="F:BCSRoundedRectangle">
@brief 圆角矩形

</member>
        <member name="F:BCSRectangle">
@brief 矩形

</member>
        <member name="T:SysDisplay.GradientFillStyle">
@class GradientFillStyle
	* @brief  渐变色填充样式

</member>
        <member name="F:GFSNull">
@brief 无填充

</member>
        <member name="F:GFSBuffered">
@brief 缓冲渐变填充

</member>
        <member name="F:GFSCircular">
@brief 圆形渐变填充

</member>
        <member name="F:GFSRectangular">
@brief 矩形渐变填充

</member>
        <member name="F:GFSLinear">
@brief 线性渐变填充

</member>
        <member name="T:SysDisplay.SimpleFillStyle">
@class SimpleFillStyle
	* @brief  简单填充样式

</member>
        <member name="F:SFSDense7Pattern">
@brief 方式7

</member>
        <member name="F:SFSDense6Pattern">
@brief 方式6

</member>
        <member name="F:SFSDense5Pattern">
@brief 方式5

</member>
        <member name="F:SFSDense4Pattern">
@brief 方式4

</member>
        <member name="F:SFSDense3Pattern">
@brief 方式3

</member>
        <member name="F:SFSDense2Pattern">
@brief 方式2

</member>
        <member name="F:SFSDense1Pattern">
@brief 方式1

</member>
        <member name="F:SFSDiagonalCross">
@brief xxxxxxxxxxxxxxxxxxxx

</member>
        <member name="F:SFSCross">
@brief +++++++++++++++++++

</member>
        <member name="F:SFSBackwardDiagonal">
@brief ////////////////////

</member>
        <member name="F:SFSForwardDiagonal">
@brief \\\\\\\\\\\\\\\\\\\

</member>
        <member name="F:SFSVertical">
@brief ||||||||||||||||||

</member>
        <member name="F:SFSHorizontal">
@brief ------------------

</member>
        <member name="F:SFSNull">
@brief 无填充

</member>
        <member name="F:SFSSolid">
@brief 实体填充

</member>
        <member name="T:SysDisplay.LineCapStyle">
@class LineCapStyle
	* @brief 线帽样式

</member>
        <member name="F:LCSSquare">
@brief 矩形线帽样式包含最后的点

</member>
        <member name="F:LCSRound">
@brief 圆角线帽样式

</member>
        <member name="F:LCSButt">
@brief 矩形线帽样式不包含最后点

</member>
        <member name="T:SysDisplay.LineJoinStyle">
@class LineJoinStyle
	* @brief 线连接样式

</member>
        <member name="F:LJSBevel">
@brief 平角转折

</member>
        <member name="F:LJSRound">
@brief 圆角转折

</member>
        <member name="F:LJSMitre">
@brief 直接相交转折点

</member>
        <member name="T:SysDisplay.SimpleLineStyle">
@enum SimpleLineStyle
	* @brief 简单线样式

</member>
        <member name="F:SLSNull">
@brief 无

</member>
        <member name="F:SLSDashDotDot">
@brief _.._.._.

</member>
        <member name="F:SLSDashDot">
@brief _._._._.

</member>
        <member name="F:SLSDot">
@brief ............

</member>
        <member name="F:SLSDash">
@brief -----------

</member>
        <member name="F:SLSSolid">
@brief 实线

</member>
        <member name="T:SysDisplay.SimpleMarkerStyle">
@enum SimpleMarkerStyle
	* @brief 简单点样式

</member>
        <member name="F:SMSDiamond">
@brief 菱形

</member>
        <member name="F:SMSX">
@brief X叉

</member>
        <member name="F:SMSCross">
@brief 十字叉

</member>
        <member name="F:SMSSquare">
@brief 正方形

</member>
        <member name="F:SMSCircle">
@brief 圆形

</member>
        <member name="T:SysDisplay.SymbolType">
@enum SymbolType
	* @brief 样式符号类型

</member>
        <member name="F:SymbolFormattedTextSymbol">
@brief 格式化文本样式

</member>
        <member name="F:SymbolTextSymbol">
@brief 文本样式

</member>
        <member name="F:SymbolMultiLayerFillSymbol">
@brief 多层填充样式

</member>
        <member name="F:SymbolLineFillSymbol">
@brief 线符号填充样式

</member>
        <member name="F:SymbolMarkerFillSymbol">
@brief 点符号填充样式

</member>
        <member name="F:SymbolPictureFillSymbol">
@brief 图片填充样式

</member>
        <member name="F:SymbolGradientFillSymbol">
@brief 渐变填充样式

</member>
        <member name="F:SymbolSimpleFillSymbol">
@brief 简单填充样式

</member>
        <member name="F:SymbolMultiLayerLineSymbol">
@brief 多层线样式

</member>
        <member name="F:SymbolMarkerLineSymbol">
@brief 点符号线样式

</member>
        <member name="F:SymbolPictureLineSymbol">
@brief 图片线样式

</member>
        <member name="F:SymbolCartographicLineSymbol">
@brief 制图线样式

</member>
        <member name="F:SymbolSimpleLineSymbol">
@brief 简单线样式

</member>
        <member name="F:SymbolMultiLayerMarkerSymbol">
@brief 多层点样式

</member>
        <member name="F:SymbolPictureMarkerSymbol">
@brief 图片点样式

</member>
        <member name="F:SymbolCharacterMarkerSymbol">
@brief 字体点样式

</member>
        <member name="F:SymbolArrowMarkerSymbol">
@brief 箭头点样式

</member>
        <member name="F:SymbolSimpleMarkerSymbol">
@brief 简单点样式

</member>
        <member name="F:SymbolUnknownSymbol">
@brief 未知符号

</member>
        <member name="D:SysDataSource.FeatureClassPtr">
@brief 要素类 智能指针

</member>
        <member name="F:SysDataSource.FeatureClass.m_pConnectString">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_nSubDatasetIndex">
@brief  子数据集的索引

</member>
        <member name="F:SysDataSource.FeatureClass.m_mutexEdit">
@brief  互斥锁

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrExtent">
@brief  Envelope包络范围对象

</member>
        <member name="F:SysDataSource.FeatureClass.m_mapFeatureEdit">
@brief  要素编辑集合

</member>
        <member name="F:SysDataSource.FeatureClass.m_ptrFeatureDataset">
@brief  要素数据集

</member>
        <member name="F:SysDataSource.FeatureClass.m_nFeatureCount">
@brief  要素数量

</member>
        <member name="F:SysDataSource.FeatureClass.m_listFid">
@brief  编号FID集合

</member>
        <member name="M:SysDataSource.FeatureClass.GetPolygonFromEllipse(SysUtility._ptr_t&lt;SysGeometry.Ellipse&gt;)">
@brief 从椭圆中获取面对像
@param [in] ptrEllipse 椭圆对象
@return SysGeometry::PolygonPtr 面对像

</member>
        <member name="M:SysDataSource.FeatureClass.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 重置要素读取位置
@return void

@brief 设置查询过滤
@param [in] ptrFilter 查询过滤
@return void

@brief 是否是有效的要素
@param [in] ptrFeature 要素对象
@return bool 是否有效

</member>
        <member name="M:SysDataSource.FeatureClass.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 修改空间参考
@param [in] ptrSpatialRef 空间参考
@return 

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID  编号FID
@return FeaturePtr  要素

</member>
        <member name="M:SysDataSource.FeatureClass.Search(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查找
@param [in] ptrFilter 查询过滤
@return FeatureCursorPtr  要素游标

</member>
        <member name="M:SysDataSource.FeatureClass.IsBeingEdited">
@brief 数据是否已经被编辑过
@return  bool  是否已经被编辑过

</member>
        <member name="M:SysDataSource.FeatureClass.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 创建的要素对象

</member>
        <member name="M:SysDataSource.FeatureClass.AbortEdit">
**
**
@brief 退出编辑
@return void 

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引号
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFields">
@brief 获取字段定义
@return FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.FeatureClass.GetGeomType">
@brief 获取几何类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureClass.Save">
@brief 保存编辑内容
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.RecomputeExtent">
@brief 重新计算范围 
@return bool 计算范围是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureCount">
@brief 获取过滤器 
@return QueryFilterPtr 过滤器

@brief 获取下一个要素
@return FeaturePtr 下一个要素

@brief 获取要素个数
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureClass.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureClass.GetFeatureDataset">
@brief 获取挂载的矢量数据集
@return FeatureDatasetPtr 矢量数据集

</member>
        <member name="M:SysDataSource.FeatureClass.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.FeatureClass.GetFullName">
@brief 获取路径
@return QString 路径

</member>
        <member name="M:SysDataSource.FeatureClass.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureClass.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureDataset 要素数据集对象

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_ptrFeature">
@brief 要素对象指针

</member>
        <member name="F:SysDataSource.FeatureEditInfo.m_eumEditMode">
@brief 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetEditType">
@brief 获取编辑类型
@return IEditModeType 编辑类型

</member>
        <member name="M:SysDataSource.FeatureEditInfo.GetFeature">
@brief 获取Feature
@return 要素对象指针

</member>
        <member name="M:SysDataSource.FeatureEditInfo.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor">
@brief 构造函数
@param [in] Edit_Update 初始化参数 Edit_Update

</member>
        <member name="M:SysDataSource.FeatureEditInfo.#ctor(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;,SysDataSource.IEditModeType)">
@brief 构造函数
@param [in] ptrFeature 要素对象
@param [in] eType  编辑类型

</member>
        <member name="T:SysDataSource.FeatureEditInfo">
@class FeatureEditInfo
@brief 要素编辑信息类

</member>
        <member name="T:SysDataSource.IEditModeType">
@brief 要素编辑 枚举类型

</member>
        <member name="T:SysDataSource.ConnectString">
@brief 类的前置声明和智能指针定义

</member>
        <member name="D:SysDataSource.FeatureCursorPtr">
@brief  要素游标 智能指针对象

</member>
        <member name="F:SysDataSource.FeatureCursor.m_nCurReadIndex">
@brief  当前读取的索引

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrConnection">
@brief  连接指针

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrQueryFilter">
@brief  查询过滤器

</member>
        <member name="F:SysDataSource.FeatureCursor.m_ptrFeatureClass">
@brief  要素类

</member>
        <member name="M:SysDataSource.FeatureCursor.Close">
@brief 关闭
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeatureNoLock">
@brief 下一个要素不加锁
@return  SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.IsValidFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;)">
@brief 是否为有效要素
@param [in] ptrFeature 要素
@return  bool  是否有效

</member>
        <member name="M:SysDataSource.FeatureCursor.SetFieldIgnored(System.Boolean)">
@brief 设置字段忽略
@param [in] bValue 是否忽略
@return  void

</member>
        <member name="M:SysDataSource.FeatureCursor.NextFeature">
@brief 下一个要素
@return SysDataSource::FeaturePtr  要素对象

</member>
        <member name="M:SysDataSource.FeatureCursor.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureCursor.#ctor(SysUtility._ptr_t&lt;SysDataSource.FeatureClass&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数
@param [in] ptrFeatureClass 要素类
@param [in] ptrFilter   查询过滤器

</member>
        <member name="T:SysDataSource.FeatureCursor">
@class FeatureCursor
@brief 要素游标


@brief 声明友元类

</member>
        <member name="D:SysGeometry.EllipsePtr">
@brief 椭圆的智能指针对象

</member>
        <member name="F:SysGeometry.Ellipse.m_RotationAngle">
@brief 旋转角度

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMinor">
@brief 短半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_SemiMajor">
@brief 长半轴

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterY">
@brief 中心点Y

</member>
        <member name="F:SysGeometry.Ellipse.m_CenterX">
@brief 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Ellipse.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Ellipse.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ellipse.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ellipse.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ellipse.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ellipse.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ellipse.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ellipse.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ellipse.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ellipse.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ellipse.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ellipse.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Ellipse.PutCoords(System.Double,System.Double)">
@brief 设置中心点坐标
@param[in] double centerX x坐标
@param[in] double centerY y坐标
@return void

</member>
        <member name="M:SysGeometry.Ellipse.SetRotationAngle(System.Double)">
@brief 设置旋转角度
@param[in] double angel 设置旋转角度
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetRotationAngle">
@brief 获取旋转角度
@return double 旋转角度

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterY(System.Double)">
@brief 设置中心点Y
@param[in] double y 设置中心点Y
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterY">
@brief 获取中心点Y
@return double 中心点Y

</member>
        <member name="M:SysGeometry.Ellipse.SetCenterX(System.Double)">
@brief 设置中心点X
@param[in] double x 设置中心点X
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetCenterX">
@brief 获取中心点X坐标
@return double 中心点X

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMinor(System.Double)">
@brief 设置短半轴
@param[in] double semiMinor 短半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMinor">
@brief 获取短半轴
@return double 短半轴

</member>
        <member name="M:SysGeometry.Ellipse.SetSemiMajor(System.Double)">
@brief 设置长半轴
@param[in] double semiMajor 长半轴
@return void

</member>
        <member name="M:SysGeometry.Ellipse.GetSemiMajor">
@brief 获取长半轴
@return double 长半轴

</member>
        <member name="M:SysGeometry.Ellipse.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ellipse.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ellipse">
@class Ellipse
	* @brief 椭圆

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureDeleted">
@brief 删除要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureUpdated">
@brief 更新要素

</member>
        <member name="F:SysDataSource.IFeatureClassEvents.FeatureAdded">
@brief 添加要素

</member>
        <member name="T:SysDataSource.IFeatureClassEvents">
@class IFeatureClassEvents
@brief 要素类事件

</member>
        <member name="D:SysGeometry.PolygonPtr">
@brief 面对象 智能指针对象

</member>
        <member name="F:SysGeometry.Polygon.m_ExteriorRing">
@brief 外环

</member>
        <member name="F:SysGeometry.Polygon.m_InteriorRings">
@brief 内环集合

</member>
        <member name="M:SysGeometry.Polygon.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Polygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polygon.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polygon.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polygon.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polygon.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polygon.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polygon.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polygon.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Polygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Polygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polygon.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetZ(System.Int32)">
@brief 通过索引获得点的Z值
@param[in] int index 编号
@return double 编号为index的点的Z值

</member>
        <member name="M:SysGeometry.Polygon.GetY(System.Int32)">
@brief 通过索引获得点的Y值
@param[in] int index 编号
@return double 编号为index的点的Y值

</member>
        <member name="M:SysGeometry.Polygon.GetX(System.Int32)">
@brief 通过索引获得点的X值
@param[in] int index 编号
@return double 编号为index的点的X值

</member>
        <member name="M:SysGeometry.Polygon.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.Polygon.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 要赋值点的数量
@param[in] double* px  X坐标的数组中的值
@param[in] double* py  Y坐标的数组中的值
@param[in] double* pz = NULL   Z坐标的数组中的值  默认为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x  X坐标
@param[in] double y  Y坐标
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPointCount">
@brief 获得点数目
@return int 点的数目

</member>
        <member name="M:SysGeometry.Polygon.GetExteriorRing">
@brief 获得外环
@return RingPtr 外环

</member>
        <member name="M:SysGeometry.Polygon.SetExteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置外环
@param[in] RingPtr interiorRing 外环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingCount">
@brief 得到内环个数
@return int 内环个数

</member>
        <member name="M:SysGeometry.Polygon.ClearInteriorRings">
@brief 清除内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemoveInteriorRing(System.Int32)">
@brief 移除内环
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingByIndex(System.Int32)">
@brief 通过编号获得内环
@param[in] int index 编号
@return RingPtr 内环

</member>
        <member name="M:SysGeometry.Polygon.AddInteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加内环
@param[in] RingPtr interiorRing 内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.CloseRings">
@brief 关闭所有的Ring
@return

</member>
        <member name="M:SysGeometry.Polygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polygon">
@class Polygon
	* @brief 面对象

</member>
        <member name="D:SysGeometry.RingPtr">
@brief 闭合环 智能指针对象

</member>
        <member name="M:SysGeometry.Ring.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@return PointPtr  获得的点对象指针

</member>
        <member name="M:SysGeometry.Ring.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Ring.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Ring.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Ring.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ring.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ring.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ring.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ring.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ring.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ring.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ring.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ring.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ring.SetEmpty">
@brief 设置为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.IsPointInRing(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 点是否在环里边
@param[in] SysGeometry::PointPtr ptrPoint 点
@return bool 是否在环里边

</member>
        <member name="M:SysGeometry.Ring.Close">
@brief 闭合
@return

</member>
        <member name="M:SysGeometry.Ring.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ring.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ring">
@class Ring
	* @brief 闭合环

</member>
        <member name="D:SysGeometry.SurfacePtr">
@brief  表面对象的智能指针对象

</member>
        <member name="M:SysGeometry.Surface.GetLength(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Surface.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Surface.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Surface.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysGeometry.Surface.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Surface">
@class Surface
	* @brief 表面对象

</member>
        <member name="D:SysGeometry.PolylinePtr">
@brief 单线段 智能指针对象

</member>
        <member name="M:SysGeometry.Polyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Polyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Polyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Polyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Polyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polyline.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polyline.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polyline.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polyline.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polyline.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polyline.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polyline.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polyline">
@class Polyline
	* @brief 单线段

</member>
        <member name="D:SysGeometry.PointCollectionPtr">
@brief 点集合对象 智能指针对象

</member>
        <member name="M:SysGeometry.PointCollection.IsValidIndex(System.Int32,System.Boolean)">
@brief Index是否有效
@param[in] int index 编号
@param[in] bool bInsert 是否是插入
@return bool 是否有效

</member>
        <member name="F:SysGeometry.PointCollection.m_vecPoint">
@brief 点集合

</member>
        <member name="M:SysGeometry.PointCollection.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetZ(System.Int32)">
@brief 通过索引获得点的Z坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetY(System.Int32)">
@brief 通过索引获得点的Y坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetX(System.Int32)">
@brief 通过索引获得点的X坐标值
@param[in] int index 索引编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.PointCollection.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.PointCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PointCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.PointCollection">
@class PointCollection
	* @brief 点集合对象


@brief 类的前期声明和智能指针的定义

</member>
        <member name="T:SysGeometry.RawPoint">
@brief 点的初始化结构体

</member>
        <member name="D:SysGeometry.CurvePtr">
@brief 曲线的智能指针对象

</member>
        <member name="M:SysGeometry.Curve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Curve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Curve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Curve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Curve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Curve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Curve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Curve">
@class Curve
	* @brief 曲线对象

</member>
        <member name="D:SysCarto.RasterLayerPtr">
@brief 栅格图层  智能指针对象

</member>
        <member name="F:SysCarto.RasterLayer.m_ptrRender">
@brief 栅格渲染

</member>
        <member name="F:SysCarto.RasterLayer.m_ptrDataset">
@brief 栅格数据

</member>
        <member name="M:SysCarto.RasterLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param[in] Layer* Layer对象

</member>
        <member name="M:SysCarto.RasterLayer.Refresh">
@brief 刷新
@return void

</member>
        <member name="M:SysCarto.RasterLayer.IsValid">
@brief 是否是有效图层
@return  bool  是否是有效

</member>
        <member name="M:SysCarto.RasterLayer.Clone">
@brief 克隆
@return LayerPtr 克隆图层对象

</member>
        <member name="M:SysCarto.RasterLayer.RaiseRenderChanged">
@brief 提升渲染改变
@return void

</member>
        <member name="M:SysCarto.RasterLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] dpType 绘制图层相应类型对象
@param [in] ptrTracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RasterLayer.SetRenderer(SysUtility._ptr_t&lt;SysCarto.RasterRender&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置渲染
@param [in] ptrRender 栅格渲染
@return void

</member>
        <member name="M:SysCarto.RasterLayer.SetDataset(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置数据集
@param [in] ptrDataset 栅格数据集
@return void

</member>
        <member name="M:SysCarto.RasterLayer.GetExtent">
@brief 获取范围
@return  SysGeometry::EnvelopePtr    包络线范围

</member>
        <member name="M:SysCarto.RasterLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.RasterLayer.#ctor(SysCarto.LayerCacheModelType)">
@brief 构造函数

</member>
        <member name="T:SysCarto.RasterLayer">
@class RasterLayer
@brief  栅格图层

</member>
        <member name="F:SysCarto.RasterRender.m_bHaveNodate">
@brief 有Nodate数组

</member>
        <member name="F:SysCarto.RasterRender.m_pdNodata">
@brief Nodata数组

</member>
        <member name="F:SysCarto.RasterRender.m_bNeedUpdataLutInfo">
@brief 需要更新Lut的信息

</member>
        <member name="F:SysCarto.RasterRender.m_ppBufferLut">
@brief 像素点缓冲数组

</member>
        <member name="F:SysCarto.RasterRender.m_vecBands">
@brief 波段集合

</member>
        <member name="F:SysCarto.RasterRender.m_resampType">
@brief 栅格重采样类型 

</member>
        <member name="F:SysCarto.RasterRender.m_ResolutionFactor">
@brief 分辨率因子

</member>
        <member name="F:SysCarto.RasterRender.m_bCanRender">
@brief 是否可以渲染

</member>
        <member name="F:SysCarto.RasterRender.m_strDesc">
@brief 描述信息

</member>
        <member name="F:SysCarto.RasterRender.m_RRType">
@brief 栅格渲染类型

</member>
        <member name="F:SysCarto.RasterRender.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.RasterRender.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.RasterRender.UpdateBrightnessContrast">
@brief 更新亮度反转
@return  void

</member>
        <member name="M:SysCarto.RasterRender.RefreshRenderInfo(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 刷新渲染信息
@param [in] ptrDataset 栅格数据集
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetTransParent">
@brief 获取透明度
@return  int 透明度

</member>
        <member name="M:SysCarto.RasterRender.SetTransParent(System.Int32)">
@brief 设置透明度
@param [in] nValue 透明度
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetBrightnessInverse">
@brief 获取亮度反转
@return  bool 是否设置亮度反转

</member>
        <member name="M:SysCarto.RasterRender.SetBrightnessInverse(System.Boolean)">
@brief 设置亮度反转
@param [in] bValue 是否设置亮度反转
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetContrast">
@brief 获取对比度
@return  int 对比度

</member>
        <member name="M:SysCarto.RasterRender.SetContrast(System.Int32)">
@brief 设置对比度
@param [in] nValue 对比度
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetBrightness">
@brief 获取亮度
@return  int 亮度值

</member>
        <member name="M:SysCarto.RasterRender.SetBrightness(System.Int32)">
@brief 设置亮度
@param [in] nValue 亮度值
@return  void

</member>
        <member name="M:SysCarto.RasterRender.Clone">
@brief 克隆
@return RasterRenderPtr 克隆栅格渲染对象

</member>
        <member name="M:SysCarto.RasterRender.DoColorMap(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,System.Byte*,System.Int32,System.Int32)">
@brief 为地图着色
@param [in]  ptrPixelBufferIn   像素缓冲
@param [in]  pRenderBlock       渲染数据块
@param [in]  pDataMask       数据模板
@param [in]  nWidth       宽
@param [in]  nHeight      高
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetRenderBytes(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;)">
@brief 获取渲染字节集
@param [in]  ptrDataset  栅格数据集
@param [in]  ptrEnvelope 包络线范围
@param [in]  nWidth       宽
@param [in]  nHeight      高
@param [in]  ptrTrack     取消追踪对象
@return  uchar*  渲染字节集

</member>
        <member name="M:SysCarto.RasterRender.PrepareRender(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 准备渲染
@param [in]  ptrDataset   栅格数据集
@param [in]  ptrVisEnv    可视包络线范围
@return  void

</member>
        <member name="M:SysCarto.RasterRender.Draw(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] ptrDataset 栅格数据集
@param [in] paiter 绘图面板
@param [in] ptrTrasform 显示转换对象
@param [in] dpType 绘制图层相应类型对象
@param [in] tracker 取消追踪对象
@return void

</member>
        <member name="M:SysCarto.RasterRender.SetResamplingType(SysCarto.RasterResamplingType)">
@brief 设置栅格重采样类型 
@param [in] RasterResamplingType resampType  栅格重采样类型
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetResamplingType">
@brief 获取栅格重采样类型 
@return  RasterResamplingType  栅格重采样类型

</member>
        <member name="M:SysCarto.RasterRender.SetDisplayResolutionFactor(System.Int32)">
@brief 设置分辨率因子 
@param [in] factor 分辨率因子
@return  void

</member>
        <member name="M:SysCarto.RasterRender.GetDisplayResolutionFactor">
@brief 获取分辨率因子 
@return  int  分辨率因子 

</member>
        <member name="M:SysCarto.RasterRender.CanRender">
@brief 是否可以渲染
@return  bool  是否可以

</member>
        <member name="M:SysCarto.RasterRender.GetDescription">
@brief 获取描述信息
@return  QString  描述信息

</member>
        <member name="M:SysCarto.RasterRender.GetName">
@brief 获取名字
@return  QString  名字

</member>
        <member name="M:SysCarto.RasterRender.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.RasterRender">
@brief  类的前置声明 和智能指针定义


@class RasterRender
@brief  栅格渲染

</member>
        <member name="T:SysCarto.RasterRenderType">
@class RasterRenderType
@brief 矢量渲染器类型 枚举

</member>
        <member name="F:RRT_RasterDiscreteColorRender">
@brief 点密度渲染

</member>
        <member name="F:RRT_RasterColormapRender">
@brief 颜色对照表渲染

</member>
        <member name="F:RRT_RasterUniqueValueRender">
@brief 唯一值渲染

</member>
        <member name="F:RRT_RasterClassifyColorRampRender">
@brief 分级渲染

</member>
        <member name="F:RRT_RasterStretchColorRampRender">
@brief 拉伸颜色带渲染

</member>
        <member name="F:RRT_RasterRGBRender">
@brief RGB渲染

</member>
        <member name="F:RRT_Unknown">
@brief 未知渲染类型

</member>
        <member name="F:SysCarto.IRasterFilterProps.m_lstAfterFilter">
@brief   后置栅格过滤器集合

</member>
        <member name="F:SysCarto.IRasterFilterProps.m_lstPreFilter">
@brief   前置栅格过滤器集合

</member>
        <member name="M:SysCarto.IRasterFilterProps.AddAfterRasterFilter(SysUtility._ptr_t&lt;SysCarto.AfterRasterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加后置栅格过滤器
@param  [in] ptrFilter    后置栅格过滤器
@return  void

</member>
        <member name="M:SysCarto.IRasterFilterProps.AddPreRasterFilter(SysUtility._ptr_t&lt;SysCarto.PreRasterFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief   添加前置栅格过滤器
@param [in] ptrFilter    前置栅格过滤器
@return  void

</member>
        <member name="T:SysCarto.IRasterFilterProps">
@class IRasterFilterProps
@brief  栅格过滤器支持

</member>
        <member name="D:SysCarto.AfterRasterFilterPtr">
@brief  后置过滤器 智能指针对象

</member>
        <member name="M:SysCarto.AfterRasterFilter.#ctor">
@brief  构造函数

</member>
        <member name="M:SysCarto.AfterRasterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  过滤器
@param [in] memData 像素点缓冲数据
@param [in] pRenderData 渲染数据 
@param [in] ptrEnvelope 包络线范围
@return void

</member>
        <member name="M:SysCarto.AfterRasterFilter.Dispose">
@brief  析构函数

</member>
        <member name="T:SysCarto.AfterRasterFilter">
@class AfterRasterFilter
@brief  后置过滤器

</member>
        <member name="D:SysCarto.PreRasterFilterPtr">
@brief 栅格前置过滤器  智能指针

</member>
        <member name="M:SysCarto.PreRasterFilter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.PreRasterFilter.Filter(SysUtility._ptr_t&lt;SysDataSource.PixelBuffer&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte*,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 过滤器
@param [in] memData   像素缓冲元数据
@param [in] pDataMask 数据模型
@param [in] ptrEnvelope 包络线范围
@return void

</member>
        <member name="M:SysCarto.PreRasterFilter.FilterExtent(SysUtility._ptr_t&lt;SysDataSource.RasterDataset&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32)">
@brief 过滤器扩展
@param [in] ptrDataset 数据集
@param [in] ptrEnvelope 包络线对象
@param [in] nWidth 宽度
@param [in] nHeight 高度
@return void

</member>
        <member name="M:SysCarto.PreRasterFilter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.PreRasterFilter">
@class  PreRasterFilter
@brief  栅格前置过滤器

</member>
        <member name="F:SysCarto.RasterFilter.m_bUse">
@brief 栅格过滤器是否可用

</member>
        <member name="F:SysCarto.RasterFilter.m_FilterType">
@brief 栅格过滤器类型

</member>
        <member name="F:SysCarto.RasterFilter.m_strDesc">
@brief 描述

</member>
        <member name="F:SysCarto.RasterFilter.m_strName">
@brief 名称

</member>
        <member name="M:SysCarto.RasterFilter.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.RasterFilter.SetUsing(System.Boolean)">
@brief 设置栅格过滤器是否可用
@param [in]  bUse  是否可用
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.IsUsing">
@brief 获取栅格过滤器是否可用 
@return  bool 栅格过滤器是否可用

</member>
        <member name="M:SysCarto.RasterFilter.GetFilterType">
@brief 获取过滤器类型
@return  RasterFilterType 栅格过滤器类型

</member>
        <member name="M:SysCarto.RasterFilter.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置描述
@param [in]  strDesc  描述信息
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.GetDescription">
@brief 获取描述
@return  QString   描述

</member>
        <member name="M:SysCarto.RasterFilter.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名字
@param [in]  strName  名字
@return  void

</member>
        <member name="M:SysCarto.RasterFilter.GetName">
@brief 获取名字
@return  QString   名字

</member>
        <member name="M:SysCarto.RasterFilter.Dispose">
@brief 析构函数

</member>
        <member name="T:SysCarto.RasterFilter">
@class  RasterFilter
@brief  栅格过滤器

</member>
        <member name="T:SysCarto.RasterFilterType">
@class  RasterFilterType
@brief  栅格过滤器类型 枚举

</member>
        <member name="F:RasterFilterType_After">
@brief 后置

</member>
        <member name="F:RasterFilterType_Pre">
@brief 前置

</member>
        <member name="F:RasterFilterType_UnKnown">
@brief 未知类型

</member>
        <member name="T:SysCarto.RasterStretchType">
@class  RasterStretchType
@brief  栅格拉伸类型 枚举

</member>
        <member name="F:RasterStretch_Count">
@brief  数量

</member>
        <member name="F:RasterStretch_PercentMinimumMaximum">
@brief  最小最大百分比

</member>
        <member name="F:RasterStretch_HistogramSpecification">
@brief  直方图均衡化

</member>
        <member name="F:RasterStretch_MinimumMaximum">
@brief  最小最大值

</member>
        <member name="F:RasterStretch_HistogramEqualize">
@brief  直方图相等

</member>
        <member name="F:RasterStretch_StandardDeviations">
@brief  标准差拉伸

</member>
        <member name="F:RasterStretch_Custom">
@brief  自定义拉伸

</member>
        <member name="F:RasterStretch_DefaultFromSource">
@brief  默认从源数据

</member>
        <member name="F:RasterStretch_NONE">
@brief  无类型

</member>
        <member name="F:SysCarto.IRasterDisplayProps.NoDataColor">
@brief 无效数据颜色

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nInvertBrightness">
@brief 是否亮度反转

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nTransparent">
@brief 透明度

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nBrightness">
@brief 亮度

</member>
        <member name="F:SysCarto.IRasterDisplayProps.m_nContrast">
@brief 对比度

</member>
        <member name="T:SysCarto.IRasterDisplayProps">
@class IRasterDisplayProps
@brief  栅格显示支持

</member>
        <member name="T:SysCarto.RasterResamplingType">
@class  RasterResamplingType
@brief  栅格重采样类型  枚举

</member>
        <member name="F:RSP_BilinearGaussBlurPlus">
@brief 通过双线性高斯模糊增强法重采样

</member>
        <member name="F:RSP_BilinearGaussBlur">
@brief 通过双线性高斯模糊法重采样

</member>
        <member name="F:RSP_BilinearInterpolationPlus">
@brief 通过双线性内插增强法重采样

</member>
        <member name="F:RSP_Majority">
@brief 通过多值法重采样

</member>
        <member name="F:RSP_CubicConvolution">
@brief 通过立方卷积法重采样

</member>
        <member name="F:RSP_BilinearInterpolation">
@brief 通过双线性内插法重采样

</member>
        <member name="F:RSP_NearestNeighbor">
@brief 通过邻近值法重采样

</member>
        <member name="F:SysCarto.Layer.m_pCacheModel">
@brief 线程缓存模型

</member>
        <member name="F:SysCarto.Layer.m_bRequireRefresh">
@brief 是否刷新视图

</member>
        <member name="F:SysCarto.Layer.m_ptrSRef">
@brief 图层空间参考

</member>
        <member name="F:SysCarto.Layer.m_ptrAreaOfInterestEnv">
@brief 可见区域

</member>
        <member name="F:SysCarto.Layer.m_dMinimumScale">
@brief 最小比例尺

</member>
        <member name="F:SysCarto.Layer.m_dMaximumScale">
@brief 最大比例尺

</member>
        <member name="F:SysCarto.Layer.m_bIsVisible">
@brief 图层是否可见

</member>
        <member name="F:SysCarto.Layer.m_bIsValid">
@brief 是否是有效图层

</member>
        <member name="F:SysCarto.Layer.m_strDesc">
@brief 图层描述信息

</member>
        <member name="F:SysCarto.Layer.m_layerType">
@brief 图层类型

</member>
        <member name="F:SysCarto.Layer.m_strDataSourcePath">
@brief 数据路径

</member>
        <member name="F:SysCarto.Layer.m_strName">
@brief 图层名称

</member>
        <member name="F:SysCarto.Layer.m_strID">
@brief  图层ID

</member>
        <member name="M:SysCarto.Layer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.Layer.GetOffset(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取渲染位移。
@return void

</member>
        <member name="M:SysCarto.Layer.SetOffset(System.Double,System.Double)">
@brief 设置渲染位移。只影响图层的渲染位置。单位与map可见范围的单位相同
@return void

</member>
        <member name="M:SysCarto.Layer.Refresh">
@brief  刷新图层
@return void 

</member>
        <member name="M:SysCarto.Layer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.Layer.RaisePropertyChanged">
@brief 触发属性变化事件
@return void 
@remark 当属性变化时，调用此方法触发属性变化事件

</member>
        <member name="M:SysCarto.Layer.IsRequireRefresh">
@brief 是否需要刷新视图
@return  bool  是否刷洗

</member>
        <member name="M:SysCarto.Layer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制图层
@param [in] painter 绘图设备对象
@param [in] ptrTransform 显示转换对象
@param [in] dpType 绘图类型
@param [in] ptrTrackerCancel  取消轨迹
@return  void

</member>
        <member name="M:SysCarto.Layer.GetSpatialReference">
@brief 获得图层空间参考
@return SysGeometry::SpatialReferencePtr 空间参考对象

</member>
        <member name="M:SysCarto.Layer.SetMinimumScale(System.Double)">
@brief 设置图层可见最小比例尺
@param[in] double scale  最小比例尺
@return void

</member>
        <member name="M:SysCarto.Layer.GetMinimumScale">
@brief 获得图层可见最小比例尺
@return  double 最小比例尺

</member>
        <member name="M:SysCarto.Layer.SetMaximumScale(System.Double)">
@brief 设置图层可见最大比例尺
@param[in] double scale 最大比例尺
@return  void

</member>
        <member name="M:SysCarto.Layer.GetMaximumScale">
@brief  获得图层可见最大比例尺
@return double 最大比例尺

</member>
        <member name="M:SysCarto.Layer.SetAreaOfInterest(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可见区域
@param[in] SysGeometry::EnvelopePtr ptrEnv  包络线范围
@return  void

</member>
        <member name="M:SysCarto.Layer.GetExtent">
@brief 获得图层范围
@return  SysGeometry::EnvelopePtr 图层范围  

</member>
        <member name="M:SysCarto.Layer.SetVisibility(System.Boolean)">
@brief 设置图层可见性
@param[in] bool visible 是否可见
@return void

</member>
        <member name="M:SysCarto.Layer.GetVisibility">
@brief 获取图层可见性
@return  bool  是否可见

</member>
        <member name="M:SysCarto.Layer.IsValid">
@brief 是否是有效图层
@return  bool  是否有效

</member>
        <member name="M:SysCarto.Layer.GetLayerType">
@brief 获取图层类型
@return  LayerType 图层类型

</member>
        <member name="M:SysCarto.Layer.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图层描述信息
@param [in] strDesc 图层描述信息
@return void

</member>
        <member name="M:SysCarto.Layer.GetDescription">
@brief 获得图层描述信息
@return QString 图层描述信息

</member>
        <member name="M:SysCarto.Layer.GetDataSourcePath">
@brief 获得数据路径
@return QString 数据路径

</member>
        <member name="M:SysCarto.Layer.GetName">
@brief 获得图层名称 
@return  QString 图层名称

</member>
        <member name="M:SysCarto.Layer.GetID">
@brief 获得图层ID
@return  QString  图层ID

</member>
        <member name="M:SysCarto.Layer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Layer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MultiLayer">
@brief 声明多数据集图层为当前类的友元类

</member>
        <member name="T:SysCarto.GroupLayer">
@brief 声明图层组图层为当前类的友元类

</member>
        <member name="T:SysCarto.AnimationLayer">
@brief 声明动画图层为当前类的友元类

</member>
        <member name="T:SysCarto.LayerConstructInfo">
@brief 声明图层创建类为当前类的友元类

</member>
        <member name="T:SysCarto.Map">
@brief 声明地图类为当前类的友元类

</member>
        <member name="T:SysCarto.LayerSerializer">
@brief 声明图层序列化类为当前类的友元类

</member>
        <member name="T:SysCarto.ViewState">
@class  ViewState
@brief  视图状态  枚举

</member>
        <member name="F:ViewStateRenderCompleted">
@brief  渲染完成

</member>
        <member name="F:ViewStateDataLoaded">
@brief  数据加载完成

</member>
        <member name="F:ViewStateNone">
@brief  无

</member>
        <member name="T:SysCarto.LayerCacheModelType">
@class  LayerCacheModelType
@brief  图层缓存类型

</member>
        <member name="F:LayerCacheModelType_LabelCacheModel">
@brief  注记缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageTileModel">
@brief  瓦片图像缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageModel">
@brief  普通图像缓存模型

</member>
        <member name="F:LayerCacheModelType_Unkown">
@brief  普通图像缓存模型

</member>
        <member name="T:SysCarto.LayerType">
@class  LayerType
@brief  图层类型 枚举

</member>
        <member name="F:LayerTypeAnimationLayer">
@brief  动画图层类型

</member>
        <member name="F:LayerTypeTiledLayer">
@brief  瓦片图层类型

</member>
        <member name="F:LayerTypeMultiLayer">
@brief  多图层类型

</member>
        <member name="F:LayerTypeGroupLayer">
@brief  组图层类型

</member>
        <member name="F:LayerTypeGraphicsLayer">
@brief  图形图层类型

</member>
        <member name="F:LayerTypeFeatureLayer">
@brief  矢量要素图层类型

</member>
        <member name="F:LayerTypeRasterLayer">
@brief  栅格图层类型

</member>
        <member name="F:LayerTypeUnknown">
@brief  未知类型

</member>
        <member name="F:SysCarto.ILayerEvents.PropertyChanged">
@brief  属性改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.RenderChanged">
@brief  渲染改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.VisibilityChanged">
@brief  可见性改变信号

</member>
        <member name="T:SysCarto.ILayerEvents">
@class ILayerEvents
@brief  图层事件

</member>
        <member name="T:SysCarto.Layer">
@brief   类的前置声明


@brief 类的前置声明和智能指针对象


@class Layer
@brief 图层基类

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_units">
@brief 单位

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_Bounds">
@brief 全图地图范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_FittedBounds">
@brief 地图定制范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_VisibleBounds">
@brief 地图显示范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_pDevice">
@brief 绘图设备对象指针

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DeviceFrame">
@brief 设备框架范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_ptrSpatialReference">
@brief 地图的空间参考

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_dPageScale">
@brief 制图比例

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_MapScale">
@brief 当前地图比例尺

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DPI">
@brief 当前屏幕的DPI

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_Y">
@brief 每设备单位的地图距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_X">
@brief 每设备单位的地图距离X

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_Y">
@brief 每地图单位的设备距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_X">
@brief 每地图单位的设备距离X

</member>
        <member name="M:SysDisplay.DisplayTransformation.CalculateVisibleExtent">
@brief 根据屏幕范围重新计算可视范围
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.Clone">
@brief 克隆
@return DisplayTransformationPtr 克隆成果 显示转换对象指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPaintDevice(QPaintDevice*)">
@brief  设置绘图设备
@param [in] QPaintDevice* pDevice 绘图设备指针对象
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPaintDevice">
@brief  获取绘图设备
@return  QPaintDevice* 绘图设备指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetUnits(SysUI.pieUnits)">
@brief 设置单位值
@param[in] SysUI::pieUnits units 单位值
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetUnits">
@brief 获取单位值
@return SysUI::pieUnits  单位值

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数		
@param[in] double* deveiceX	设备点X集合
@param[in] double* deviceY	设备点Y集合
@param[out] double* mapX	地图点X集合
@param[out] double* mapY	地图点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从设备点转化为地图点
@param[in] QPoint point 设备点
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
@brief 从设备点转化为地图点
@param[in] int x 设备X
@param[in] int y 设备Y
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数
@param[in] double* mapX	地图点X集合
@param[in] double* mapY	地图点Y集合
@param[out] double* deveiceX	设备点X集合
@param[out] double* deviceY	设备点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图点转化为设备点
@param[in] SysGeometry::PointPtr ptrPoint 地图点
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double)">
@brief 从地图点转化为设备点
@param[in] double 地图点X
@param[in] double 地图点Y
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetZoomResolution">
@brief  获取缩放设备每像素的图上距离
@param[in] bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetZoomResolution(System.Boolean)">
@brief  设置缩放设备每像素的图上距离
@param[in] bool bValue 是否为真
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.ZoomToPageScale(System.Double)">
@brief  缩放制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPageScale(System.Double)">
@brief 设置制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPageScale">
@brief 获得制图比例尺
@return 制图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetMapScale(System.Double)">
@brief 设置地图比例尺
@param[in] double mapscale 地图比例尺
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetMapScale">
@brief 获得地图比例尺
@return 地图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDpi(System.Int32)">
@brief 设置屏幕的DPI
@param[in] int dpi X
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDpi">
@brief 获得屏幕的DPI
@return 屏幕DPI

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetResolution">
@brief 获得设备每像素的图上距离
@return 每像素的图上距离

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetExportFrame">
@brief 获得输出范围
@return QRect 输出框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDeviceFrame">
@brief 获得设备范围
@return QRect 设备框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDeviceFrame(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置设备框架
@param[in] QRect deviceFrame 设备框架
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetFittedBounds">
 @brief FittedBounds 设置VisibleBounds后，要根据DeviceFrame的宽高比进行修改，修正后的值，保存在FittedBounds。
		 用户输入的原始值，保存在VisibleBounds
 @return  SysGeometry::EnvelopePtr  Envelope包络范围对象

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetVisibleBounds">
@brief 获得可视范围
@return virtualSysGeometry::EnvelopePtr 可视范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.IsOutValidExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 判断范围是否是有效范围
@param[in] SysGeometry::EnvelopePtr ptrEnv 范围
@return bool 是否有效

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetVisibleBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可视范围
@param[in] SysGeometry::EnvelopePtr ptrVisibleBounds 可视范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetBounds">
@brief 获得全图范围
@return SysGeometry::EnvelopePtr 全图范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全图范围
@param[in] SysGeometry::EnvelopePtr ptrBounds 全图范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetSpatialReference">
@brief 获得空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param[in] SysGeometry::SpatialReferencePtr ptrSReference 空间参考
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysDisplay.ITransformEvents.VisibleBoundsUpdated">
@brief 可视地图范围事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation
@param[out] bool 范围是否变化

</member>
        <member name="F:SysDisplay.ITransformEvents.UnitsUpdated">
@brief 单位更新事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.RotationUpdated">
@brief 地图旋转变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.ResolutionUpdated">
@brief 分辨率变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.DeviceFrameUpdated">
@brief 设备范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.BoundsUpdated">
@brief 地图范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="T:SysDisplay.ITransformEvents">
@class ITransformEvents
@brief 变化事件类

</member>
        <member name="T:SysDisplay.DisplayTransformation">
@brief 类的前置声明


@brief 类的前置声明和智能指针定义
@return


@class DisplayTransformation
	* @brief 显示转换

</member>
        <member name="D:boost.typeindex.type_info">
Depending on a compiler flags, optimal implementation of type_info will be used 
as a default boost::typeindex::type_info.

Could be a std::type_info, boost::typeindex::detail::ctti_data or 
some user defined class.

type_info \b is \b not copyable or default constructible. It is \b not assignable too!
</member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysUI.pieUnits">
@class pieUnits
	* @brief PIE中长度单位

</member>
        <member name="F:UnitsCount">
@brief 单位数量

</member>
        <member name="F:UnitsDecimeters">
@brief 分米

</member>
        <member name="F:UnitsDecimalDegrees">
@brief 度（十进制）

</member>
        <member name="F:UnitsKilometers">
@brief 千米

</member>
        <member name="F:UnitsMeters">
@brief 米

</member>
        <member name="F:UnitsCentimeters">
@brief 厘米

</member>
        <member name="F:UnitsMillimeters">
@brief 毫米

</member>
        <member name="F:UnitsNauticalMiles">
@brief 海里

</member>
        <member name="F:UnitsMiles">
@brief 英里

</member>
        <member name="F:UnitsYards">
@brief 码

</member>
        <member name="F:UnitsFeet">
@brief 英尺

</member>
        <member name="F:UnitsPoints">
@brief 点

</member>
        <member name="F:UnitsInches">
@brief 英寸

</member>
        <member name="F:UnitsUnknown">
@brief 未知

</member>
        <member name="D:SysUI.TrackerCancelPtr">
@brief 取消追踪器类智能指针

</member>
        <member name="F:SysUI.TrackerCancel.m_mutex">
@brief 互斥锁

</member>
        <member name="F:SysUI.TrackerCancel.m_State">
@brief 状态

</member>
        <member name="M:SysUI.TrackerCancel.Reset">
@brief 重置
@return

</member>
        <member name="M:SysUI.TrackerCancel.IsCanced">
@brief 是否已经取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Cancel">
@brief 取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysUI.TrackerCancel.#ctor">
@brief 构造函数

</member>
        <member name="T:SysUI.TrackerCancel">
@class TrackerCancel
	* @brief  取消追踪器类

</member>
        <member name="T:SysUI.LayerDrawPhaseType">
@class DrawPhaseType
	* @brief 绘图类型

</member>
        <member name="F:DPSelection">
@brief  选择集

</member>
        <member name="F:DPAnnotation">
@brief  标注

</member>
        <member name="F:DPGeography">
@brief  Geo图形

</member>
        <member name="M:PIE.CommonAlgo.RasterToVectorAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.RasterToVectorAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToVectorAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToVectorAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToVectorAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterToVectorAlgo">
            <summary>
栅格矢量化算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.isCountPolygonInfo">
            <summary />
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.isSaveAsOneFile">
            <summary>
保存单个文件标志
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.vpixTable">
            <summary>
像素值索引表,通常默认为0
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.savingPathList">
            <summary>
保存路径列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.indexNameList">
            <summary>
类别名称列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.pixList">
            <summary>
类别对应像素列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.indexList">
            <summary>
类别列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterVectorization_Exchange_Info.pchrasterIndexImgPath">
            <summary>
索引图路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterVectorization_Exchange_Info">
            <summary>
栅格矢量化算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMeanValueAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltMeanValueAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMeanValueAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMeanValueAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltMeanValueAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltMeanValueAlgo">
            <summary>
ImgProFiltMeanValueAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostMMAAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassPostMMAAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostMMAAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostMMAAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostMMAAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassPostMMAAlgo">
            <summary>
ImgClassPostMMAAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCommonAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltCommonAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCommonAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCommonAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltCommonAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltCommonAlgo">
            <summary>
ImgProFiltCommonAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.HotMapContructAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.HotMapContructAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.HotMapContructAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.HotMapContructAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.HotMapContructAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.HotMapContructAlgo">
            <summary>
图像裁剪算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.HotMapContruct_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.DeviceHeight">
            <summary>
输出影像高度
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.CellSize">
            <summary>
像元大小(影响输出宽高 为负数不参与计算)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.OutputRasterDataset">
            <summary>
输出栅格数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.OutputFeatureDataset">
            <summary>
输出矢量数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.InputFeatureDataset">
            <summary>
输入矢量数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.BCreateFeatureDataset">
            <summary>
是否创建矢量数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.DeviceWidth">
            <summary>
输出影像宽度(高度自动计算)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.Radius">
            <summary>
半径(像素单位)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.DefualtWeightValue">
            <summary>
默认权重值（0-255,不使用权重字段情况下）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.WeightFeildName">
            <summary>
权重字段名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.HotMapContruct_Exchange_Info.BUseWeightFiled">
            <summary>
是否使用权重字段
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.HotMapContruct_Exchange_Info">
            <summary>
图像重采样算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ObjClassAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ObjClassAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ObjClassAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ObjClassAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ObjClassAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ObjClassAlgo">
            <summary>
面向对象分类算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometryAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.RasterizeGeometryAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometryAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometryAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometryAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterizeGeometryAlgo">
            <summary>
矢量栅格化算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.ResultPixelBuffer">
            <summary>
栅格化后的栅格数据【输出信息】
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.GeoTrans">
            <summary>
栅格化后的栅格仿射参数【输出信息】
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.TopLeftY">
            <summary>
栅格化后的栅格左上角在参考栅格数据集中的列号【输出信息】
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.TopLeftX">
            <summary>
栅格化后的栅格左上角在参考栅格数据集中的行号【输出信息】
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.Geometry">
            <summary>
要栅格化的Geometry【输入信息】
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.RasterDataset">
            <summary>
参考栅格数据集【输入信息】
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterizeGeometry_Exchange_Info">
            <summary>
矢量栅格化算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CFusionAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.CFusionAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CFusionAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CFusionAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.CFusionAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.CFusionAlgo">
            <summary>
CFusion算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.BMultiThread">
            <summary>
是否多线程
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.lMaxCache">
            <summary>
最大缓存
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.HighResNullValue">
            <summary>
高分辨率数据波段
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.LowResNullValue">
            <summary>
多光谱数据波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.OutFileTypeCode">
            <summary>
输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.ResampleMode">
            <summary>
重采样类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.LowBands">
            <summary>
多光谱数据波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.LowResFile">
            <summary>
多光谱数据波段名称集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.CFusion_Exchange_Info.Type">
            <summary>
算法类型值
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.CFusion_Exchange_Info">
            <summary>
CFusion融合算法接口
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.UTMString">
            <summary>
计算中央经线带数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataAutoMagicAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.DataAutoMagicAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataAutoMagicAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataAutoMagicAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataAutoMagicAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataAutoMagicAlgo">
            <summary>
图像裁剪算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataAutoMagic_Exchange_Info.Type">
            <summary>
自动提取类型(默认为0)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataAutoMagic_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataAutoMagic_Exchange_Info.ShpFilePath">
            <summary>
范围文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataAutoMagic_Exchange_Info.InputFilePathList">
            <summary>
输入文件路径列表
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataAutoMagic_Exchange_Info">
            <summary>
自动提取数据算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImagePyramidBuildAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImagePyramidBuildAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImagePyramidBuildAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImagePyramidBuildAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImagePyramidBuildAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImagePyramidBuildAlgo">
            <summary>
创建金字塔算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageResampleAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.OutHeight">
            <summary>
重采样高
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.OutWidth">
            <summary>
重采样宽
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.Mode">
            <summary>
重采样模式方法类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageResample_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageResample_Exchange_Info">
            <summary>
图像重采样算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageResampleAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageResampleAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageResampleAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageResampleAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageResampleAlgo">
            <summary>
ImageResampleAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KrigingInterpolationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.KrigingInterpolationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KrigingInterpolationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KrigingInterpolationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KrigingInterpolationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.KrigingInterpolationAlgo">
            <summary>
克里金插值算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.CellSize">
            <summary>
像元大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.Height">
            <summary>
高
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.Width">
            <summary>
宽
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.OutputRasterDataset">
            <summary>
输出数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.InputFeatureDataset">
            <summary>
输入数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info.FieldIndex">
            <summary>
字段编号
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.KrigingInterpolation_Exchange_Info">
            <summary>
克里金插值算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.Finalize">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.Dispose">
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostClumpAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassPostClumpAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostClumpAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostClumpAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostClumpAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassPostClumpAlgo">
            <summary>
聚类处理算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltFrequencyAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltFrequencyAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltFrequencyAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltFrequencyAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltFrequencyAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltFrequencyAlgo">
            <summary>
ImgProFiltFrequencyAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEBlockAdjustmentAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.PIEBlockAdjustmentAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEBlockAdjustmentAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEBlockAdjustmentAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEBlockAdjustmentAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数 
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.PIEBlockAdjustmentAlgo">
            <summary>
区域网平差算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.FuncName">
            <summary>
算法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.OutGcpPath">
            <summary>
GCP文件输出路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlPydLevel">
            <summary>
金字塔匹配等级
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlErrorThres">
            <summary>
粗差剔除阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlCoefThresn">
            <summary>
金字塔其它层 相关系数阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlCoefThres0">
            <summary>
金字塔底层 相关系数阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlSearchSize">
            <summary>
搜索窗口大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlMatchSize">
            <summary>
匹配窗口大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.CtrlBlockSize">
            <summary>
输入项 分块大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.BMatchCtrl">
            <summary>
是否匹配控制点
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkPydLevel">
            <summary>
金字塔匹配等级
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkErrorThres">
            <summary>
粗差剔除阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkCoefThresn">
            <summary>
金字塔其它层 相关系数阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkCoefThres0">
            <summary>
金字塔底层 相关系数阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkSearchSize">
            <summary>
搜索窗口大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkMatchSize">
            <summary>
匹配窗口大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.LinkBlockSize">
            <summary>
输入项 分块大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.BMatchLink">
            <summary>
是否匹配连接点
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.AverHeight">
            <summary>
平均高程
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.ListDemFile">
            <summary>
DEM文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.ListSrcImgs">
            <summary>
基准影像
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.ListRpcFile">
            <summary>
Rpc路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.ListCrcImgs">
            <summary>
待校正影像
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPreBlockAdjustment_Exchange_Info">
            <summary>
区域网平差算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.get_Description">
            <summary>
描述
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.get_Name">
            <summary>
名称
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostSieveAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassPostSieveAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostSieveAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostSieveAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostSieveAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassPostSieveAlgo">
            <summary>
分类后处理算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.AtmosphericCorrectionAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.FileTypeCode">
            <summary>
输出影像类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.OutputSR">
            <summary>
输出影像路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.AeroRetrieval">
            <summary>
是否反演气溶胶
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.InitialVIS">
            <summary>
输入初始能见度
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.AerosolType">
            <summary>
气溶胶类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.AtmModel">
            <summary>
大气模式
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.InputXML">
            <summary>
元数据文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.InputFile">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataProcess_AtmCor_Info.DataType">
            <summary>
数据类型（1--DN值；2--辐亮度；3--表观反射率）
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataProcess_AtmCor_Info">
            <summary>
大气校正算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.AtmosphericCorrectionAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.AtmosphericCorrectionAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.AtmosphericCorrectionAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.AtmosphericCorrectionAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.AtmosphericCorrectionAlgo">
            <summary>
大气校正算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageSieveFilterAlgo.set_Params(System.Object)">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageSieveFilterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageSieveFilterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageSieveFilterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageSieveFilterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageSieveFilterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageSieveFilterAlgo">
            <summary>
ImageSieveFilter算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilterDataset_Exchange_info.MinArea">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilterDataset_Exchange_info.OutputRasterDataset">
            <summary>
输出数据集（如果为空则直接操作输入数据集）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilterDataset_Exchange_info.InputRasterDataset">
            <summary>
输入数据集
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageSieveFilterDataset_Exchange_info">
            <summary>
剔除栅格块结构体-数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilter_Exchange_info.MinArea">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilter_Exchange_info.OutputFile">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageSieveFilter_Exchange_info.InputFile">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageSieveFilter_Exchange_info">
            <summary>
剔除栅格块结构体
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandCombinationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.m_iOutRangeCrossType">
            <summary>
输出范围方式方式，0-交集，1-并集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.regioninfo">
            <summary>
输入范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.m_strFuncName">
            <summary>
算法描述信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.m_strFileTypeCode">
            <summary>
输出文件编码类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.tstrfile">
            <summary>
输出路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.bands">
            <summary>
输入波段
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.BandCombination_Exchange_Info.m_vecFileptr">
            <summary>
输入影像
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BandCombination_Exchange_Info">
            <summary>
波段合成算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.IsregionValid">
            <summary>
判断region是否有效
</summary>
            <returns>有效返回true，反之返回false</returns>
            <summary>
判断region是否有效
</summary>
            <returns>有效返回true，反之返回false</returns>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.GetRegionULCols">
            <summary>
获取region的列数
</summary>
            <returns>region的列数</returns>
            <summary>
获取region的列数
</summary>
            <returns>region的列数</returns>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.GetRegionULLines">
            <summary>
获取region的行数
</summary>
            <returns>region的行数</returns>
            <summary>
获取region的行数
</summary>
            <returns>region的行数</returns>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.GetRegionULy">
            <summary>
获取region左上角的行坐标
</summary>
            <returns>左上角的行坐标</returns>
            <summary>
获取region左上角的行坐标
</summary>
            <returns>左上角的行坐标</returns>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.GetRegionULx">
            <summary>
获取region左上角的列坐标
</summary>
            <returns>返回值说明</returns>
            <summary>
获取region左上角的列坐标
</summary>
            <returns>返回值说明</returns>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetReginULLinesCols(System.Int32,System.Int32)">
            <summary>
设置region的行数和列数
</summary>
            <param name="lines">lines region的行数</param>
            <param name="cols">cols region的列数</param>
            <summary>
设置region的行数和列数
</summary>
            <param name="lines">lines region的行数</param>
            <param name="cols">cols region的列数</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegionULxCols(System.Int32)">
            <summary>
设置region的列数
</summary>
            <param name="cols">cols region的列数</param>
            <summary>
设置region的列数
</summary>
            <param name="cols">cols region的列数</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegionULLines(System.Int32)">
            <summary>
设置region的行数
</summary>
            <param name="lines">lines region的行数</param>
            <summary>
设置region的行数
</summary>
            <param name="lines">lines region的行数</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegionULxy(System.Int32,System.Int32)">
            <summary>
设置region左上角的坐标
</summary>
            <param name="x">x 左上角的列坐标</param>
            <param name="y">y 左上角的列坐标</param>
            <summary>
设置region左上角的坐标
</summary>
            <param name="x">x 左上角的列坐标</param>
            <param name="y">y 左上角的列坐标</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegionULy(System.Int32)">
            <summary>
设置region左上角的行坐标
</summary>
            <param name="y">y 左上角的列坐标</param>
            <summary>
设置region左上角的行坐标
</summary>
            <param name="y">y 左上角的列坐标</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegionULx(System.Int32)">
            <summary>
设置region左上角的列坐标
</summary>
            <param name="x">x 左上角的列坐标</param>
            <summary>
设置region左上角的列坐标
</summary>
            <param name="x">x 左上角的列坐标</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.SetRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
设置region 参数
</summary>
            <param name="x"> x 左上角的列坐标</param>
            <param name="y">y 左上角的行坐标</param>
            <param name="lines">lines region的行数</param>
            <param name="cols">cols region的列数</param>
            <summary>
设置region 参数
</summary>
            <param name="x"> x 左上角的列坐标</param>
            <param name="y">y 左上角的行坐标</param>
            <param name="lines">lines region的行数</param>
            <param name="cols">cols region的列数</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
对函数进行描述说明
</summary>
            <param name="x">x 左上角的列坐标</param>
            <param name="y">y 左上角的行坐标</param>
            <param name="lines">lines region的行数</param>
            <param name="cols">cols region的列数</param>
        </member>
        <member name="M:PIE.CommonAlgo.Interestregion.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.Interestregion">
            <summary>
波段合成输入图像的感兴趣区
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.BandCombinationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandCombinationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandCombinationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.BandCombinationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.BandCombinationAlgo">
            <summary>
辐射校正算法
</summary>
        </member>
        <member name="M:InterestRegion.IsregionValid">
判断region是否有效
@return 有效返回true，反之返回false

</member>
        <member name="M:InterestRegion.GetRegionULCols">
获取region的列数
@return region的列数

</member>
        <member name="M:InterestRegion.GetRegionULLines">
获取region的行数
@return region的行数

</member>
        <member name="M:InterestRegion.GetRegionULy">
获取region左上角的行坐标
@return  左上角的行坐标

</member>
        <member name="M:InterestRegion.GetRegionULx">
获取region左上角的列坐标
@return 左上角的列坐标

</member>
        <member name="M:InterestRegion.SetReginULLinesCols(System.UInt16,System.UInt16)">
设置region的行数和列数
	* @param[in] lines region的行数
	* @param[in] cols region的列数

</member>
        <member name="M:InterestRegion.SetRegionULxCols(System.UInt16)">
设置region的列数
@param[in] cols region的列数

</member>
        <member name="M:InterestRegion.SetRegionULLines(System.UInt16)">
设置region的行数
@param[in] lines region的行数

</member>
        <member name="M:InterestRegion.SetRegionULxy(System.UInt16,System.UInt16)">
设置region左上角的坐标
@param[in] x 左上角的列坐标
@param[in] y 左上角的列坐标

</member>
        <member name="M:InterestRegion.SetRegionULy(System.UInt16)">
设置region左上角的行坐标
@param[in] y 左上角的列坐标

</member>
        <member name="M:InterestRegion.SetRegionULx(System.UInt16)">
设置region左上角的列坐标
@param[in] x 左上角的列坐标

</member>
        <member name="M:InterestRegion.SetRegion(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
设置region 参数
@param[in] x 左上角的列坐标
@param[in] y 左上角的行坐标
@param[in] lines region的行数
@param[in] cols region的列数

</member>
        <member name="M:InterestRegion.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
构造函数
@param[in] x 左上角的列坐标
@param[in] y 左上角的行坐标
@param[in] lines region的行数
@param[in] cols region的列数

</member>
        <member name="M:PIE.CommonAlgo.FormatTranAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.FormatTran_Exchange_Info.m_strFileType">
            <summary>
输出文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.FormatTran_Exchange_Info.lOutDataType">
            <summary>
存储类型 0 BIP 1 BSQ 2 BIL
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.FormatTran_Exchange_Info.strOutFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.FormatTran_Exchange_Info.strInFile">
            <summary>
输入文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.FormatTran_Exchange_Info">
            <summary>
存储格式转换算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.FormatTranAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.FormatTranAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.FormatTranAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.FormatTranAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.FormatTranAlgo">
            <summary>
存储格式转换算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEMatchAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.PIEMatchAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEMatchAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEMatchAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEMatchAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.PIEMatchAlgo">
            <summary>
影像匹配算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_strFuncName">
            <summary>
算法描述信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_bIs3DPt">
            <summary>
是否有高程值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_bIsMeasure">
            <summary>
是否人工量测
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_featureNum">
            <summary>
输入项，提取特征点个数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_rmsThres">
            <summary>
输入项，阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_coefThresn">
            <summary>
输入项，阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_coefThres0">
            <summary>
输入项，阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_basePt">
            <summary>
输入输出项，控制点在基准影像上的 坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_matchPt">
            <summary>
输入输出项，控制点在待校正影像上的坐标
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_vDataLayers">
            <summary>
输入项，界面使用
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_ErroFile">
            <summary>
输入项，控制点文件，如果不为空，输出控制点文件，否则不输出
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_GCPFile">
            <summary>
输入项，控制点文件，如果不为空，输出控制点文件，否则不输出
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_GCPWKT">
            <summary>
输入输出项，控制点坐标系
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_demFileName">
            <summary>
基准数据，可能是文件或文件夹
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_matchRpcFileName">
            <summary>
基准数据，可能是文件或文件夹
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_matchFileName">
            <summary>
输入项，待校正影像
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.STMatchInfo.m_BaseData">
            <summary>
基准数据，可能是文件或文件夹
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.STMatchInfo">
            <summary>
影像匹配算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ParaInvThresholdAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ParaInvThresholdAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ParaInvThresholdAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ParaInvThresholdAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ParaInvThresholdAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ParaInvThresholdAlgo">
            <summary>
水体阈值提取
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info.ListBands">
            <summary>
波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info.Type">
            <summary>
类型(提取算法类型)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info.Threshold">
            <summary>
阈值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info.InputFilePath">
            <summary>
输入文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ParaInvThreshold_Exchange_Info">
            <summary>
水体阈值提取算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostPAAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassPostPAAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostPAAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostPAAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostPAAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassPostPAAlgo">
            <summary>
ImgClassPostPAAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToContourContructAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.RasterToContourContructAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToContourContructAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToContourContructAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToContourContructAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterToContourContructAlgo">
            <summary>
图像裁剪算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.OutputContourFaceFDataset">
            <summary>
输出等值面（内存）
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.OutputContourLineFDataset">
            <summary>
输出等值线 (内存)
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.InputRasterDataset">
            <summary>
输入栅格数据集
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.BGenerateContourLine">
            <summary>
是否生成等值线
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.BGenerateContourFace">
            <summary>
是否生成等值面
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.BAutoSetStartEndValue">
            <summary>
是否自动计算起始终止值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.BClosed">
            <summary>
是否闭合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.EndValue">
            <summary>
终止值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.StartValue">
            <summary>
起始值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.ValueInterval">
            <summary>
间隔
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.SampleRatio">
            <summary>
采样比
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info.BandIndex">
            <summary>
波段
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.RasterToContourContruct_Exchange_Info">
            <summary>
栅格生成等值线算法参数
</summary>
        </member>
        <member name="D:SysDataSource.RasterDatasetPtr">
@brief 栅格数据集 智能指针

</member>
        <member name="F:SysDataSource.RasterDataset.m_ptrEnvelope">
@brief  包络线对象

</member>
        <member name="F:SysDataSource.RasterDataset.m_strGCPProj">
@brief  控制点项目

</member>
        <member name="F:SysDataSource.RasterDataset.m_nGCPCount">
@brief  控制点数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGCPs">
@brief  控制点数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_nBandCount">
@brief  波段数量

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterHeight">
@brief  栅格高度

</member>
        <member name="F:SysDataSource.RasterDataset.m_nRasterWidth">
@brief  栅格宽度

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoInvTransform">
@brief  反向纺射变换参数数组   ----

</member>
        <member name="F:SysDataSource.RasterDataset.m_pGeoTransform">
@brief  纺射变换参数数组

</member>
        <member name="F:SysDataSource.RasterDataset.m_vecRasterBandPtr">
@brief  栅格波段集合

</member>
        <member name="M:SysDataSource.RasterDataset.GetBandCount">
@brief 获取波段数
@return  int 波段数

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterYSize">
@brief 获取栅格高度
@return int 栅格高度

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterXSize">
@brief 获取栅格宽度
@return int 栅格宽度

</member>
        <member name="M:SysDataSource.RasterDataset.SetGeoTransform(System.Double*)">
@brief 设置纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetGeoTransform(System.Double*)">
@brief 获取纺射变换参数
@param [in] pTrans 参数
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.AddRasterBand(SysUtility._ptr_t&lt;SysDataSource.RasterBand&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  添加波段
@param  [in] rasterBand 栅格波段
@return bool 是否成功 

</member>
        <member name="M:SysDataSource.RasterDataset.GetRasterBand(System.Int32)">
@brief 获取波段类
@param [in] nIndex 波段索引号。从0开始
@return RasterBandPtr 波段类

</member>
        <member name="M:SysDataSource.RasterDataset.WriteHistInfo">
@brief 统计信息写入到.HistInfo.XML文件
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.CalculateHistInfo">
@brief 计算统计信息。重新计算
@return bool 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.ReadHistInfo">
@brief 从.HistInfo.XML中读取统计信息
@return 是否读取成功

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPSpatialRef(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取控制点的投影
@param[out] strProj 控制点的投影WKT字符串
@return void 

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPs">
@brief 获取控制点数组
@return const GDAL_GCP*  控制点数组

</member>
        <member name="M:SysDataSource.RasterDataset.WorldToPixel_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 地理坐标转为栅格坐标
@param [in] dblX 地理坐标x
@param [in] dblY 地理坐标y
@param [in] lCol 栅格坐标x
@param [in] lRow 栅格坐标y
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.PixelToWorld_Ex(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 栅格坐标转地理坐标
@param [in] lCol 栅格坐标
@param [in] lRow 栅格坐标
@param [in] dblX 地理坐标
@param [in] dblY 地理坐标
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.RasterDataset.GetGCPCount">
@brief  获取控制点的个数
@return 控制点的个数

</member>
        <member name="M:SysDataSource.RasterDataset.GetPyramidLevel">
@brief 返回金字塔层数
@return int 返回金字塔层数，如果没有金字塔则返回0

</member>
        <member name="M:SysDataSource.RasterDataset.BuildPyramid(System.Single,SysDataSource.DadaSampleType,=FUNC:System.Int32(System.Double,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)">
@brief 建立金字塔
@param[in] float fSampleRate 重采样比率
@param[in] DadaSampleType sample_type 采样方式："NEAREST", "AVERAGE" or "MODE"等
@param[in] ProgressFunc pProgressFunc 进度回调函数
@param[in] void* pProgressArg 进度回调函数参数
@return bool 若创建成功则返回true，否则为false

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 读取数据，保存在PixelBuffer中
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] bandMap 波段映射集合
@return SysDataSource::PixelBufferPtr  图片渲染缓冲对象

</member>
        <member name="M:SysDataSource.RasterDataset.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入的宽度
@param [in] nHei 写入的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 缓冲宽度
@param [in] nBufYSize 缓冲高度
@param [in] eBufType 写入类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取的宽度
@param [in] nHei 读取的高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 目标宽度
@param [in] nBufYSize 目标高度
@param [in] eBufType 读取类型
@param [in] nBandCount 波段数
@param [in] pBandMap 波段映射
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.UseRPC(System.Boolean)">
@brief 是否使用RPC
@param [in] bUse 是否使用RPC 
@return void

</member>
        <member name="M:SysDataSource.RasterDataset.IsUsingRPC">
@brief 是否使用RPC投影
@return bool 是否使用

</member>
        <member name="M:SysDataSource.RasterDataset.UseRasterCoords">
@brief 设置为使用栅格坐标
@return  void

</member>
        <member name="M:SysDataSource.RasterDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 打开模式
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterDataset.#ctor">
@brief 构造函数

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrHistogram">
@brief 直方图对象

</member>
        <member name="F:SysDataSource.RasterBand.m_nBandID">
@brief 波段的ID编号  从1开始

</member>
        <member name="F:SysDataSource.RasterBand.m_bHaveNoDataValue">
@brief 是否具有波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_dNodataValue">
@brief 波段的无效值

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeY">
@brief 数据存储分块的高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nBlockSizeX">
@brief 数据存储分块的宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeY">
@brief 波段高度

</member>
        <member name="F:SysDataSource.RasterBand.m_nSizeX">
@brief 波段宽度

</member>
        <member name="F:SysDataSource.RasterBand.m_ePixelDataType">
@brief 波段数据类型

</member>
        <member name="F:SysDataSource.RasterBand.m_vecCategoryName">
@brief 分类信息

</member>
        <member name="F:SysDataSource.RasterBand.m_ptrColorTable">
@brief 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.ComputerHistogram">
@brief 统计直方图信息
@return void 

</member>
        <member name="M:SysDataSource.RasterBand.GetBandID">
@brief  获取当前波段在数据集中的序号，如果返回0，则表示当前波段没有数据集。
@return int 当前波段在数据集中的序号

</member>
        <member name="M:SysDataSource.RasterBand.GetYSize">
@brief  获取波段高度
@return int 高度

</member>
        <member name="M:SysDataSource.RasterBand.GetXSize">
@brief  获取波段宽度
@return int 宽度

</member>
        <member name="M:SysDataSource.RasterBand.GetRasterDataType">
@brief  获取波段数据类型
@return PixelDataType 波段数据类型

</member>
        <member name="M:SysDataSource.RasterBand.SetHistogramInfo(SysUtility._ptr_t&lt;SysDataSource.StatsHistogram&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置直方图信息
@param[in] ptrHistogram 直方图对象
@return void

</member>
        <member name="M:SysDataSource.RasterBand.IsHistogramInfoCalculated">
@brief  是否计算直方图信息
@return bool  是 true，否 false 

</member>
        <member name="M:SysDataSource.RasterBand.GetHistogramInfo">
@brief  获取直方图信息
@return StatsHistogramPtr  直方图对象 

</member>
        <member name="M:SysDataSource.RasterBand.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.RasterBand.SetColorTable(SysUtility._ptr_t&lt;SysDataSource.ColorTable&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置颜色表信息
@param[in] ColorTablePtr ptrColorTable 颜色表信息
@return void

</member>
        <member name="M:SysDataSource.RasterBand.GetColorTable">
@brief  获取颜色表信息
@return ColorTablePtr 颜色表信息

</member>
        <member name="M:SysDataSource.RasterBand.SetNoDataValue(System.Double)">
@brief 设置当前波段中的无效数据值
@param[in] double 当前波段的无效值
@return void

</member>
        <member name="M:SysDataSource.RasterBand.Write(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 写入数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 写入宽度
@param [in] nHei 写入高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 写入数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@param [in] nBandSpace 波段间距  ---
@return

</member>
        <member name="M:SysDataSource.RasterBand.Read(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,SysDataSource.PixelDataType,System.Int32,System.Int32)">
@brief 读取数据块
@param [in] nx 栅格x坐标
@param [in] ny 栅格y坐标
@param [in] nWid 读取宽度
@param [in] nHei 读取高度
@param [in] pData 数据缓冲
@param [in] nBufXSize 数据缓冲宽度
@param [in] nBufYSize 数据缓冲高度
@param [in] eBufType 读取数据类型
@param [in] nPixelSpace 像素间距
@param [in] nLineSpace 行间距
@return 是否成功

</member>
        <member name="M:SysDataSource.RasterBand.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.RasterBand.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.RasterBand">
@brief 类的前置声明 和 智能指针定义


@class RasterBand
	* @brief 栅格波段类

</member>
        <member name="T:SysDataSource.RasterDataset">
@brief 类的前置声明 和 智能指针定义


@class RasterDataset
	* @brief  栅格数据集


@brief  类的前置声明 和智能指针定义

</member>
        <member name="D:SysDataSource.StatsHistogramPtr">
@brief 直方图对象类 智能指针

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStep">
@brief 梯度

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMax">
@brief ENVI方式%拉伸的对应范围最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStretchMin">
@brief ENVI方式%拉伸的对应范围最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_iMatchBandIndex">
@brief 匹配的波段序号

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bStats">
@brief 是否具有统计信息

</member>
        <member name="F:SysDataSource.StatsHistogram.m_bHistogram">
@brief 是否有直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppOutStatsHistogram">
@brief 输出直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_ppHistogram">
@brief 直方图

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMax">
@brief 直方图最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dHistMin">
@brief 直方图最小值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dStdDev">
@brief 方差

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMean">
@brief 均值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMax">
@brief 统计最大值

</member>
        <member name="F:SysDataSource.StatsHistogram.m_dMin">
@brief 统计最小值

</member>
        <member name="M:SysDataSource.StatsHistogram.GetStep">
@brief 获取梯度
@return  double 梯度

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStep(System.Double)">
@brief 设置梯度
@param [in] dStep 梯度
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetLinearStretch(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取线性拉伸参数
@param [in out] dStretchMin 拉伸最小值
@param [in out] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetLinearStretch(System.Double,System.Double)">
@brief 设置线性拉伸参数
@param [in] dStretchMin 拉伸最小值
@param [in] dStretchMax 拉伸最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetMatchBandIndex(System.Int32)">
@brief 设置匹配的波段索引
@param [in] iBandIndex 波段索引
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetMatchBandIndex">
@brief 获取匹配的波段索引
@return  int 波段索引

</member>
        <member name="M:SysDataSource.StatsHistogram.GetOutStatsHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取输出直方图
@param [in out] ppdHistogram 直方图信息 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram">
@brief 获取直方图信息
@return  double**  直方图信息

</member>
        <member name="M:SysDataSource.StatsHistogram.GetHistogram(System.Double***!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图 
@param [in out] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetOutStatsHistogram(System.Double**)">
@brief 设置输出直方图信息 
@param [in out] ppdHistogram   直方图信息
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogram(System.Double**)">
@brief 设置直方图信息 
@param [in] ppdHistogram 直方图
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Update">
@brief 刷新直方图(重新赋值后均需调Update)
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryStats(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取统计信息
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@param [in out] dMean   均值 
@param [in out] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.QueryHistogramMinmax(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取直方图最小最大值
@param [in out] dMin    最小值
@param [in out] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetHistogramMinMax(System.Double,System.Double)">
@brief 设置直方图最小最大值
@param [in] dMin    最小值
@param [in] dMax    最大值
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.SetStats(System.Double,System.Double,System.Double,System.Double)">
@brief 设置统计信息 
@param [in] dMin    最小值 
@param [in] dMax    最大值 
@param [in] dMean   均值 
@param [in] dStdDev 方差 
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.HasStats">
@brief 判断StatsHistogram类是否具有统计信息 
@return  bool 是否具有统计信息

</member>
        <member name="M:SysDataSource.StatsHistogram.HasHistogram">
@brief 判断StatsHistogram类是否具有直方图 
@return  bool 是否具有直方图

</member>
        <member name="M:SysDataSource.StatsHistogram.Empty">
@brief 清空直方图信息使其失效
@return  void

</member>
        <member name="M:SysDataSource.StatsHistogram.Accumulate(System.Double,System.Int32)">
@brief 赋于直方图dValue值的个数 
@param [in] dValue 值
@param [in] nCount 统计个数
@return  void 

</member>
        <member name="M:SysDataSource.StatsHistogram.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.StatsHistogram.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.StatsHistogram">
@class StatsHistogram
	* @brief  直方图对象类

</member>
        <member name="D:SysDataSource.PixelBufferPtr">
@brief 图片渲染缓冲类 智能指针

</member>
        <member name="F:SysDataSource.PixelBuffer.m_ePixelDataType">
@brief 图片渲染数据类型

</member>
        <member name="F:SysDataSource.PixelBuffer.m_vecBandMap">
@brief 地图波段BandMap集合

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nHei">
@brief 高度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_nWid">
@brief 宽度

</member>
        <member name="F:SysDataSource.PixelBuffer.m_pData">
@brief  数据指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetHeight">
@brief 获取高
@return int 高度

</member>
        <member name="M:SysDataSource.PixelBuffer.GetWidth">
@brief 获取宽
@return int 宽度

</member>
        <member name="M:SysDataSource.PixelBuffer.SetData(SysDataSource.PixelDataType,System.Void*)">
@brief 设置数据指针
@param [in] eType 图片渲染数据类型
@param [in] pData 数据
@return

</member>
        <member name="M:SysDataSource.PixelBuffer.GetData">
@brief 获取数据指针
@return void* 数据内存指针

</member>
        <member name="M:SysDataSource.PixelBuffer.GetDataType">
@brief 获取类型
@return PixelDataType 类型

</member>
        <member name="M:SysDataSource.PixelBuffer.GetBandMap">
@brief 获取BandMap
@return 地图波段BandMap的集合

</member>
        <member name="M:SysDataSource.PixelBuffer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType,System.Void*)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型
@param [in] pData 数据

</member>
        <member name="M:SysDataSource.PixelBuffer.#ctor(System.Int32,System.Int32,QVector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.PixelDataType)">
@brief 有参构造函数
@param [in] nWid 宽度
@param [in] nHei 高度
@param [in] bandMap 地图波段集合
@param [in] eType 图片渲染数据类型

</member>
        <member name="T:SysDataSource.PixelBuffer">
@class  PixelBuffer 
@brief  图片渲染缓冲类

</member>
        <member name="F:SysDataSource.ColorTable.m_vecColorEntry">
@brief 颜色表项集合

</member>
        <member name="M:SysDataSource.ColorTable.Clone">
@brief 克隆
@return ColorTablePtr  克隆对象

</member>
        <member name="M:SysDataSource.ColorTable.ClearColorEntry">
@brief  清空颜色表
@return void

</member>
        <member name="M:SysDataSource.ColorTable.AddColorEntry(SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加颜色表项
@param [in] ptrColorEntry 颜色表项
@return void

</member>
        <member name="M:SysDataSource.ColorTable.SetColorEntry(System.Int32,SysUtility._ptr_t&lt;SysDataSource.ColorEntry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置颜色表项
@param [in] nIndex 颜色表项编号
@param [in] ptrColorEntry 颜色表项
@return bool 是否成功

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntry(System.Int32)">
@brief 获取颜色表项
@param [in] nIndex 颜色表项编号
@return ColorEntryPtr 颜色表项

</member>
        <member name="M:SysDataSource.ColorTable.GetColorEntryCount">
@brief 获取颜色表项个数
@return int 颜色表项个数

</member>
        <member name="M:SysDataSource.ColorTable.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorTable.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorTable">
@brief 类的前置声明和智能指针定义


@class ColorTable
	* @brief 颜色表ColorTable对象类

</member>
        <member name="M:SysDataSource.ColorEntry.Clone">
@brief 克隆
@return ColorEntryPtr 克隆对象

</member>
        <member name="M:SysDataSource.ColorEntry.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
@brief 有参构造函数

</member>
        <member name="M:SysDataSource.ColorEntry.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.ColorEntry">
@brief 类的前置声明和智能指针定义


@class ColorEntry
	* @brief 颜色表项ColorEntry对象类

</member>
        <member name="D:SysDataSource.FeatureDatasetPtr">
@brief 要素数据集 智能指针

</member>
        <member name="F:SysDataSource.FeatureDataset.m_sTextCodec">
@brief 字符编码

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrQueryFilter">
@brief 查询过滤对象

</member>
        <member name="F:SysDataSource.FeatureDataset.m_eGeometryType">
@brief 几何类型

</member>
        <member name="F:SysDataSource.FeatureDataset.m_ptrFields">
@brief 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFields">
@brief 获取字段
@return FieldsPtr 字段对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetGeomType">
@brief 获取类型
@return SysGeometry::GeometryType 几何类型

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateSpatialIndex(System.Int32)">
@brief 创建空间索引
@param [in] nDepth 空间索引的级别。最大12
@return 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.CanCreateSpatialIndex">
@brief 是否能创建空间索引
@return 是否能

</member>
        <member name="M:SysDataSource.FeatureDataset.GetEncoding">
@brief 获取字符编码
@return QString 字符编码

</member>
        <member name="M:SysDataSource.FeatureDataset.SetEncoding(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字符编码
@param [in] strEncoding  字符编码
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetFieldIgnored(System.Boolean)">
@brief 设置是否忽略字段
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsFieldIgnored">
@brief  是否忽略字段的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.SetGeometryIgnored(System.Boolean)">
@brief 设置是否忽略Geometry的加载
@param [in] bIgnore 是否忽略
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.IsGeometryIgnored">
@brief 是否忽略Geometry的加载
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.FeatureDataset.RecomputeExtent">
@brief 重新计算范围
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.SetNextByIndex(System.Int64)">
@brief 通过索引设置下一个要素数据集
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysDataSource.FeatureDataset.CreateNewFeature">
@brief 创建要素
@return FeaturePtr 要素

</member>
        <member name="M:SysDataSource.FeatureDataset.AlterFieldDefn(System.Int32,SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldAlterType)">
@brief 修改字段
@param [in] iField 编号FID
@param [in] ptrNewField  新的字段
@param [in] eAlterType 修改的类型
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteField(System.Int32)">
@brief 删除字段
@param [in] nIndex 索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 -----------------
		* @brief 添加字段
		* @param [in] strName 字段名称
		* @param [in] eType   字段类型 
		* @return bool 是否成功

@brief 添加字段
@param [in] ptrField 字段
@param [in] bApproxOK 如果不符合要求是否继续添加
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Save">
@brief 保存
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeatureCount">
@brief 获取要素数量
@return qlonglong 要素个数

</member>
        <member name="M:SysDataSource.FeatureDataset.DeleteFeature(System.Int64)">
@brief 删除要素
@param [in] nFID  编号FID
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.AddFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.UpdateFeature(SysUtility._ptr_t&lt;SysDataSource.Feature&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新要素
@param [in] ptrFeature 要素对象
@return bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.GetFeature(System.Int64)">
@brief 获取要素
@param [in] nFID 编号nFID 
@return  FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.GetNextFeature">
@brief 获取下一个要素
@return FeaturePtr 要素对象

</member>
        <member name="M:SysDataSource.FeatureDataset.ResetReading">
@brief 重置要素读取位置 
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.SetQueryFilter(SysUtility._ptr_t&lt;SysDataSource.QueryFilter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置查询过滤
@param [in] ptrFilter 过滤器
@return void

</member>
        <member name="M:SysDataSource.FeatureDataset.GetQueryFilter">
@brief 获取过滤器
@return QueryFilterPtr 过滤器对象

</member>
        <member name="M:SysDataSource.FeatureDataset.Open(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.OpenMode)">
@brief 打开
@param [in] strPath 路径
@param [in] mode 读写类型
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.FeatureDataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.FeatureDataset.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FieldAlterType">
@brief 字段更改类型 枚举

</member>
        <member name="F:Alter_All_Flag">
Alter all parameters of field definition.

</member>
        <member name="F:Alter_Default_Flag">
Alter field DEFAULT value.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Nullable_Flag">
Alter field NOT NULL constraint.
		* @since GDAL 2.0

</member>
        <member name="F:Alter_Width_Precision_Flag">
Alter field width and precision.

</member>
        <member name="F:Alter_Type_Flag">
Alter field type.

</member>
        <member name="F:Alter_Name_Flag">
Alter field name.

</member>
        <member name="D:SysDataSource.QueryFilterPtr">
@brief 查询类 智能指针

</member>
        <member name="F:SysDataSource.QueryFilter.m_ptrGeometryQuery">
@brief 空间查询条件

</member>
        <member name="F:SysDataSource.QueryFilter.m_strQuery">
@brief 查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetQueryGeometry">
@brief 获取空间查询条件
@return SysGeometry::GeometryPtr 空间查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.GetAttributeQueryString">
@brief 获取属性查询条件
@return QString 属性查询条件

</member>
        <member name="M:SysDataSource.QueryFilter.SetSpatialQuery(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间查询条件
@param [in] ptrGeometryQuery 几何查询
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.SetAttributeQuery(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置属性查询条件
@param [in] strQuery 查询条件
@return void 

</member>
        <member name="M:SysDataSource.QueryFilter.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.QueryFilter.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.QueryFilter">
@class  QueryFilter
@brief  查询类

</member>
        <member name="F:SysDataSource.Feature.m_pFeatureClass">
@brief 要素类对象指针

</member>
        <member name="F:SysDataSource.Feature.m_vecField">
@brief 字段集合

</member>
        <member name="F:SysDataSource.Feature.m_ptrGeometry">
@brief 几何对象

</member>
        <member name="F:SysDataSource.Feature.m_ptrFields">
@brief 字段

</member>
        <member name="F:SysDataSource.Feature.m_nFID">
@brief FID值

</member>
        <member name="M:SysDataSource.Feature.GetFeatureClass">
@brief 获取要素类
@return FeatureClass* 要素类对象指针

</member>
        <member name="M:SysDataSource.Feature.Clone">
@brief 克隆
@return FeaturePtr 克隆成果

</member>
        <member name="M:SysDataSource.Feature.GetFields">
@brief 获取字段定义
@return  FieldsPtr 字段对象指针

</member>
        <member name="M:SysDataSource.Feature.IsValueNull(System.Int32)">
@brief 字段是否为空
@param [in] nIndex 字段索引
@return bool  是否为空

</member>
        <member name="M:SysDataSource.Feature.GetValueAsString(System.Int32)">
@brief 获取字段值的字符串
@param [in] nIndex 索引
@return  QString  字符串

</member>
        <member name="M:SysDataSource.Feature.GetValue(System.Int32)">
@brief 获取字段值
@param [in] nIndex 索引
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.GetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段值
@param [in] strFieldName 字段名
@return QVariant 字段值

</member>
        <member name="M:SysDataSource.Feature.SetValue(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] strFieldName 字段名称
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetValue(System.Int32,QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置字段值
@param [in] nIndex 字段索引
@param [in] field 值
@return void

</member>
        <member name="M:SysDataSource.Feature.SetFID(System.Int64)">
@brief 设置FID
@param [in] nFID
@return void

</member>
        <member name="M:SysDataSource.Feature.GetFID">
@brief 获取FID
@return  qlonglong 获取FID

</member>
        <member name="M:SysDataSource.Feature.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Feature.GetFieldName(System.Int32)">
@brief 获取字段名
@param [in] nIndex 索引号
@return QString字段名

</member>
        <member name="M:SysDataSource.Feature.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引
@param [in] strName 字段名
@return  int字段索引

</member>
        <member name="M:SysDataSource.Feature.GetFieldCount">
@brief 获取字段数量
@return int 字段数量

</member>
        <member name="M:SysDataSource.Feature.GetGeometry">
@brief 获取几何对象Geometry
@return   几何对象Geometry

</member>
        <member name="M:SysDataSource.Feature.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置几何对象Geometry
@param [in] ptrGeometry 几何对象
@return void

</member>
        <member name="M:SysDataSource.Feature.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Feature.#ctor(SysUtility._ptr_t&lt;SysDataSource.Fields&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 构造函数

</member>
        <member name="T:SysDataSource.Feature">
@class Feature
	* @brief 矢量类


@brief 类的前置声明

</member>
        <member name="T:SysDataSource.FeatureClass">
@brief 类的前置声明和智能指针定义


@brief 定义友元类


@brief 类的前置声明和智能指针定义


@class FeatureClass
@brief  要素类

</member>
        <member name="D:SysDataSource.FieldsPtr">
@brief 字段集类 智能指针

</member>
        <member name="F:SysDataSource.Fields.m_bFieldIgnored">
@brief  是否忽略字段

</member>
        <member name="F:SysDataSource.Fields.m_bGeometryIgnored">
@brief  是否忽略Geometry 

</member>
        <member name="F:SysDataSource.Fields.m_vecField">
@brief  字段集合

</member>
        <member name="M:SysDataSource.Fields.SetPrecision(System.Int32,System.Int32)">
@brief  设置精度
@param [in] nIndex 索引号
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Fields.GetPrecision(System.Int32)">
@brief  获取精度
@param [in] nIndex 索引号
@return int 精度

</member>
        <member name="M:SysDataSource.Fields.SetWidth(System.Int32,System.Int32)">
@brief  设置宽度
@param [in] nIndex 索引号
@param [in] nWidth 宽度
@return void 

</member>
        <member name="M:SysDataSource.Fields.GetWidth(System.Int32)">
@brief  获取宽度
@param [in] nIndex 索引号
@return int 宽度

</member>
        <member name="M:SysDataSource.Fields.IsFieldIgnored">
@brief  是否忽略字段
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.IsGeometryIgnored">
@brief 是否忽略Geometry 
@return bool 是否忽略

</member>
        <member name="M:SysDataSource.Fields.DeleteField(System.Int32)">
@brief 删除字段 
@param [in] nIndex 字段索引
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.DeleteField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] strName 字段名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加字段
@param [in] ptrField 字段
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.AddField(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 添加字段
@param [in] strName 字段名称
@param [in] eType 字段类型
@param [in] nWidth 字段长度，以字节为单位
@param [in] nPrecision 字段精度
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Fields.GetFieldIndex(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取字段索引号
@param [in] strName 字段名称
@return int 字段索引号

</member>
        <member name="M:SysDataSource.Fields.GetFieldCount">
@brief 获取字段数
@return int 字段数

</member>
        <member name="M:SysDataSource.Fields.GetFieldName(System.Int32)">
@brief 获取字段名称
@param [in] nIndex 索引
@return  QString 字段名称

</member>
        <member name="M:SysDataSource.Fields.GetFieldType(System.Int32)">
@brief 获取字段类型
@param [in] nIndex 索引
@return FieldType 字段类型

</member>
        <member name="M:SysDataSource.Fields.DeleteField(SysUtility._ptr_t&lt;SysDataSource.Field&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除字段
@param [in] nIndex 字段对象
@return void

</member>
        <member name="M:SysDataSource.Fields.GetField(System.Int32)">
@brief 根据索引获取字段对象
@param [in] nIndex 索引
@return FieldPtr 字段对象

</member>
        <member name="M:SysDataSource.Fields.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Fields.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDataSource.FeatureDataset">
@brief  要素数据集


@class FeatureDataset
	* @brief  要素数据集类

</member>
        <member name="T:SysDataSource.Fields">
@class Fields
	* @brief  字段集类

</member>
        <member name="F:SysDataSource.Field.m_nPrecision">
@brief 精度

</member>
        <member name="F:SysDataSource.Field.m_nWidth">
@brief 宽度

</member>
        <member name="F:SysDataSource.Field.m_enumFieldType">
@brief 字段类型  枚举变量

</member>
        <member name="F:SysDataSource.Field.m_DefaultValue">
@brief 默认值

</member>
        <member name="F:SysDataSource.Field.m_strAliasName">
@brief 别名

</member>
        <member name="F:SysDataSource.Field.m_strName">
@brief 名字

</member>
        <member name="M:SysDataSource.Field.Clone">
@brief 克隆
@return  FieldPtr 克隆结果 字段对象指针

</member>
        <member name="M:SysDataSource.Field.SetPrecision(System.Int32)">
@brief 设置精度
@param [in] nPrecision 精度
@return void

</member>
        <member name="M:SysDataSource.Field.GetPrecision">
@brief 获取精度
@return  int 精度

</member>
        <member name="M:SysDataSource.Field.SetWidth(System.Int32)">
@brief 设置宽度
@param [in] nWidth 宽度
@return void

</member>
        <member name="M:SysDataSource.Field.GetWidth">
@brief 获取宽度
@return  int 宽度

</member>
        <member name="M:SysDataSource.Field.SetFieldType(SysDataSource.FieldType)">
@brief 设置字段类型
@param [in] type 字段类型
@return void

</member>
        <member name="M:SysDataSource.Field.GetFieldType">
@brief 获取字段类型
@return FieldType  字段类型

</member>
        <member name="M:SysDataSource.Field.SetDefaultValue(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置默认值
@param [in] value  默认值
@return void 

</member>
        <member name="M:SysDataSource.Field.GetDefaultValue">
@brief 获取默认值
@return QVariant  默认值

</member>
        <member name="M:SysDataSource.Field.SetAliasName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置别名
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetAliasName">
@brief 获取别名
@return QString 字段别名

</member>
        <member name="M:SysDataSource.Field.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strAliasName 字段别名
@return void

</member>
        <member name="M:SysDataSource.Field.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Field.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Field.#ctor(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysDataSource.FieldType,System.Int32,System.Int32)">
@brief 有参构造函数
@param [in] strName 名称
@param [in] eType   类型
@param [in] nWidth  宽度
@param [in] nPrecision 精度

</member>
        <member name="T:SysDataSource.Field">
@brief 类的前置声明和智能指针定义


@class Field
	* @brief 字段类

</member>
        <member name="F:SysDataSource.Dataset.m_bCanWrite">
@brief 是否可以写入 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_bCanCopy">
@brief 是否可以拷贝 布尔变量

</member>
        <member name="F:SysDataSource.Dataset.m_ptrSpatialReference">
@brief 控件参考

</member>
        <member name="F:SysDataSource.Dataset.m_eDatasetType">
@brief 数据集类型

</member>
        <member name="F:SysDataSource.Dataset.m_strFullName">
@brief 全名

</member>
        <member name="F:SysDataSource.Dataset.m_strName">
@brief 名称

</member>
        <member name="M:SysDataSource.Dataset.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDataSource.Dataset.#ctor">
@brief 构造函数

</member>
        <member name="M:SysDataSource.Dataset.CloneMemDataset">
@brief 对内存数据集进行Clone. 如果不是内存数据集，返回空
@return

</member>
        <member name="M:SysDataSource.Dataset.ClearInternalData">
@brief 清除内部缓存
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取元数据
@param [in] const QString 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataDomainList">
@brief 获取数据域列表
@return

</member>
        <member name="M:SysDataSource.Dataset.SetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return

</member>
        <member name="M:SysDataSource.Dataset.GetMetadataItem(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据信息
@param [in] pszName   名字
@param [in] pszDomain 区域
@return char * 元数据信息描述

</member>
        <member name="M:SysDataSource.Dataset.SetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 设置元数据
@param [in] papszMetadata ** 输入信息
@para  [in] const char * pszDomain 域

</member>
        <member name="M:SysDataSource.Dataset.GetMetadata(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief 获取元数据
@param [in] const char * 输入信息
@return  char** 元数据指针

</member>
        <member name="M:SysDataSource.Dataset.GetInternalHandle">
@brief 获取内部句柄
@return void* 内部句柄指针

</member>
        <member name="M:SysDataSource.Dataset.CanCopy">
@brief 是否可以进行文件级复制
@return  bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.CanWrite">
@brief 是否可写
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.Copy(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 复制为指定路径下
@param [in] strFullName 文件路径名称
@return bool 是否成功

</member>
        <member name="M:SysDataSource.Dataset.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param ptrSpatialRef  空间参考对象指针
@return void 

</member>
        <member name="M:SysDataSource.Dataset.GetSpatialReference">
@brief 获取空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDataSource.Dataset.GetDataSourceType">
@brief 获取数据源类型
@return QString 数据源类型

</member>
        <member name="M:SysDataSource.Dataset.GetType">
@brief 获取数据集类型 
@return DatasetType 数据集类型

</member>
        <member name="M:SysDataSource.Dataset.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置名称
@param [in] strName 名称 
@return void

</member>
        <member name="M:SysDataSource.Dataset.GetName">
@brief 获取名称
@return QString 名称

</member>
        <member name="M:SysDataSource.Dataset.GetFullName">
@brief 获取全路径名
@return QString 全路径名

</member>
        <member name="T:SysDataSource.Dataset">
@brief 类的前置声明和智能指针定义


@class Dataset
@brief 数据集基类

</member>
        <member name="T:SysDataSource.DadaSampleType">
@class DadaSampleType
	* @brief  数据样式类型 枚举

</member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="M:PIE.CommonAlgo.ImgProFiltHomoAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltHomoAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltHomoAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltHomoAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltHomoAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltHomoAlgo">
            <summary>
ImgProFiltHomoAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MLClassificationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.MLClassificationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MLClassificationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MLClassificationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.MLClassificationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.MLClassificationAlgo">
            <summary>
MLClassificationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ClassifierType">
            <summary>
监督分类分类类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ListRoiColors">
            <summary>
ROI颜色集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ListRoiNames">
            <summary>
ROI名称集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ROICof">
            <summary>
ROICof集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ROIMean">
            <summary>
ROI均值集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.ROINums">
            <summary>
ROI个数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.SelBandIndexs">
            <summary>
多光谱数据选择波段集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.SelBandNums">
            <summary>
多光谱数据选择波段个数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.CEnd">
            <summary>
列结束值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.CStart">
            <summary>
列起始值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.REnd">
            <summary>
行结束值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.RStart">
            <summary>
行起始值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像数据路径
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.#ctor(System.Int32)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SupervisedClassification_Exchange_Info.#ctor">
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.SupervisedClassification_Exchange_Info">
            <summary>
监督分类算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.Kernel">
            <summary>
自定义滤波值数组
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.LN">
            <summary>
模板尺寸N
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.LM">
            <summary>
模板尺寸M
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.FilterType">
            <summary>
滤波类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleCustom.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageFittleCustom">
            <summary>
自定义滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.AlgoType">
            <summary>
算法类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.Constant">
            <summary>
阶数或常数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.CutFreq">
            <summary>
截止频率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.HighGains">
            <summary>
高频增益
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.LowGains">
            <summary>
低频增益
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.HighPass">
            <summary>
是巴特沃斯高通变换还是高斯高通变换
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageHomoInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageHomoInfo">
            <summary>
同态滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.RadiusOut">
            <summary>
输出频率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.Radius">
            <summary>
截止频率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.HighPass">
            <summary>
是高通滤波还是低通滤波
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.FuncType">
            <summary>
滤波方法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFreqInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageFreqInfo">
            <summary>
频率滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.FilterCommonType">
            <summary>
滤波类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageCommonInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageCommonInfo">
            <summary>
常用滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.LN">
            <summary>
模板尺寸N
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.LM">
            <summary>
模板尺寸M
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMeanValueInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageMeanValueInfo">
            <summary>
均值滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.FilterType">
            <summary>
滤波类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.LN">
            <summary>
模板尺寸N
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.LM">
            <summary>
模板尺寸M
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageMiddleInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageMiddleInfo">
            <summary>
中值滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.FilterDirect">
            <summary>
定向滤波方向类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageDirectInfo.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageDirectInfo">
            <summary>
定向滤波算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.FilterType">
            <summary>
微分锐化类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.XMLFile">
            <summary>
XML文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImageFittleEdge.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImageFittleEdge">
            <summary>
微分锐化算法参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgProFiltDiffSharpAlgo">
            <summary>
ImgProFiltDiffSharpAlgo算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.WaterStatisticsAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterAmountInfo.dWaterAmount">
            <summary>
水量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterAmountInfo.dWaterHeight">
            <summary>
水体深度
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterAmountInfo.pszOutFile">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterAmountInfo.pszShpFile">
            <summary>
水体矢量路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterAmountInfo.pszInDEMFile">
            <summary>
DEM 文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.WaterAmountInfo">
            <summary>
水量计算算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterDepthInfo.dWaterHeight">
            <summary>
水体深度
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterDepthInfo.pszOutFile">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterDepthInfo.pszShpFile">
            <summary>
水体矢量路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.WaterDepthInfo.pszInDEMFile">
            <summary>
DEM 文件路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.WaterDepthInfo">
            <summary>
水深计算算法参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.WaterStatisticsAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.WaterStatisticsAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.WaterStatisticsAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.WaterStatisticsAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.WaterStatisticsAlgo">
            <summary>
水体统计算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostStaAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImgClassPostStaAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostStaAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostStaAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImgClassPostStaAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImgClassPostStaAlgo">
            <summary>
分类后处理算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.SelIndex">
            <summary>
选中索引
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.IsShp">
            <summary>
是否是矢量
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.Fileinfo">
            <summary>
精度结果
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.FuncName">
            <summary>
功能名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.strClassInfo">
            <summary>
分类数据信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.strRealInfo">
            <summary>
真实地面信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.ClassIndex">
            <summary>
分类类别索引集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.RealIndex">
            <summary>
真实类别索引集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.ClassName">
            <summary>
输入分类数据文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StImgClassPostPA.RealName">
            <summary>
输入真实地面文件
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StImgClassPostPA">
            <summary>
分类后处理,精度分析
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.FuncName">
            <summary>
功能名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.VecColor">
            <summary>
颜色列表
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.Weight">
            <summary>
中心像元比重
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.KernelY">
            <summary>
核大小Y
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.KernelX">
            <summary>
核大小X
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.MajMin">
            <summary>
分析方法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.VeciNotselclass">
            <summary>
未选中类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.Veciselclass">
            <summary>
选中类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.OutputFileName">
            <summary>
输出合并后主次要分析数据路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StMajMinParameter.InputFileName">
            <summary>
输入分类数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StMajMinParameter">
            <summary>
主次要分析算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.FuncName">
            <summary>
功能名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.CompareIndex">
            <summary>
记录发生变化的分类序号，默认值-1；
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.MatchOutput">
            <summary>
输出匹配数组
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.MatchInput">
            <summary>
输入匹配数组
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.ClassCount">
            <summary>
分类合并后类别数目
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.OutputFileName">
            <summary>
输出合并后分类数据路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostComb.InputFileName">
            <summary>
输入分类数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StClassPostComb">
            <summary>
分类合并算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostclump.kernel">
            <summary>
x，y，其它数字参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostclump.classindex">
            <summary>
选择的分类数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostclump.outputfile">
            <summary>
输出数据路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StClassPostclump.inputfile">
            <summary>
输入数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StClassPostclump">
            <summary>
过滤算法参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StclassStat.statinfo">
            <summary>
返回统计信息
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.StclassStat.inputname">
            <summary>
输入路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.StclassStat">
            <summary>
分类统计算法参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageRotationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.RotationAngle">
            <summary>
旋转角度
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.RotationType">
            <summary>
旋转类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ImageRotation_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageRotation_Exchange_Info">
            <summary>
图像旋转算法接口
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ImageRotationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageRotationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageRotationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ImageRotationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ImageRotationAlgo">
            <summary>
ImageRotationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.GPC_MapSubdivision.m_ListMapString">
            <summary>
分幅地图编号的集合
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GPC_MapSubdivision.Clear">
            <summary>
清空
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GPC_MapSubdivision.CalMapNumberArray(System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Double},System.Int32)">
            <summary>
通过比例尺与输出范围获取分幅信息
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GPC_MapSubdivision.MapString2Val(System.String,System.Collections.Generic.List`1{System.Double},System.Collections.Generic.List`1{System.Double})">
            <summary>
根据分幅编号得到分幅范围
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GPC_MapSubdivision.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.GPC_MapSubdivision.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.GPC_MapSubdivision">
            <summary>
国家基本比例尺地形图分幅与编号
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.NeuralNetworkClusterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.NeuralNetworkClusterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.NeuralNetworkClusterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.NeuralNetworkClusterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.NeuralNetworkClusterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.NeuralNetworkClusterAlgo">
            <summary>
NeuralNetworkClusterAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.Ispeed">
            <summary>
收敛速率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.Traintimes">
            <summary>
迭代次数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.Windowsize">
            <summary>
窗口大小
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.ClassNum">
            <summary>
分类数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.AlgType">
            <summary>
分类方法类别
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.NeuralNetworkCluster_Exchange_Info">
            <summary>
人工神经网络算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ISODataClassificationAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.ISODataClassificationAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ISODataClassificationAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ISODataClassificationAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.ISODataClassificationAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ISODataClassificationAlgo">
            <summary>
ISODataClassificationAlgo算法
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.FuncName">
            <summary>
方法名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.FileTypeCode">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.LowBands">
            <summary>
遥感数据波段选择集合
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.MinDis">
            <summary>
最小中心距离
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.Dev">
            <summary>
最大标准差
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.MaxLoop">
            <summary>
最大迭代次数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.MaxMerge">
            <summary>
最大合并对数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.MinSam">
            <summary>
最少像元数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.InitClassNum">
            <summary>
初始类数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.ProspClassNum">
            <summary>
预期类数
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.OutputFilePath">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.ISODataClassification_Exchange_Info.InputFilePath">
            <summary>
输入遥感影像数据路径
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.ISODataClassification_Exchange_Info">
            <summary>
ISOData分类算法接口
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEOrthoAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.PIEOrthoAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEOrthoAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEOrthoAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.PIEOrthoAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.PIEOrthoAlgo">
            <summary>
大气校正算法
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.RaiseExecuteCompletedEvent(System.Void*)">
            <summary>
触发完成事件
</summary>
            <param name="pArgs">参数</param>
            <return />
            <summary>
触发完成事件
</summary>
            <param name="pArgs">参数</param>
            <return />
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.RaiseProgressChangedEvent(System.Double,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*)">
            <summary>
触发进度变化事件
</summary>
            <param name="dComplete">进度</param>
            <param name="strMsg">信息</param>
            <param name="pArgs">参数</param>
            <return />
            <summary>
触发进度变化事件
</summary>
            <param name="dComplete">进度</param>
            <param name="strMsg">信息</param>
            <param name="pArgs">参数</param>
            <return />
        </member>
        <member name="F:PIE.CommonAlgo.SystemAlgo.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.#ctor(SysUtility._ptr_t&lt;SysAlgo.ISysAlgo&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.CreateInstance(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
创建实例
</summary>
            <param name="strLibName">Lib名称</param>
            <param name="strAlgoName">算法名称</param>
            <returns>是否执行成功</returns>
            <summary>
创建实例
</summary>
            <param name="strLibName">Lib名称</param>
            <param name="strAlgoName">算法名称</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.CommonAlgo.SystemAlgo.OnExecuteCompleted">
            <summary>
执行完成事件
</summary>
        </member>
        <member name="E:PIE.CommonAlgo.SystemAlgo.OnProgressChanged">
            <summary>
进度变化事件
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.RaiseExecuteCompletedEvent">
            <summary>
触发完成事件
</summary>
            <return />
            <summary>
触发完成事件
</summary>
            <return />
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.Execute">
            <summary>
执行算法
</summary>
            <returns>是否执行成功</returns>
            <summary>
执行算法
</summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.SetErrorInfo(System.Int32,System.String)">
            <summary>
设置错误信息
</summary>
            <param name="errCode">错误信息编号</param>
            <param name="errMsg">错误信息描述</param>
            <summary>
设置错误信息
</summary>
            <param name="errCode">错误信息编号</param>
            <param name="errMsg">错误信息描述</param>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.GetErrorInfo(System.Int32@,System.String@)">
            <summary>
获取错误信息
</summary>
            <param name="errCode">错误信息编号</param>
            <param name="errMsg">错误信息描述</param>
            <summary>
获取错误信息
</summary>
            <param name="errCode">错误信息编号</param>
            <param name="errMsg">错误信息描述</param>
        </member>
        <member name="P:PIE.CommonAlgo.SystemAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.SystemAlgo.Description">
            <summary>
描述
</summary>
        </member>
        <member name="P:PIE.CommonAlgo.SystemAlgo.Name">
            <summary>
名称
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.CommonAlgo.SystemAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.SystemAlgo">
            <summary>
ISystemAlgo 系统算法接口
</summary>
        </member>
        <member name="F:SysAlgo.ISysAlgo.ProgressChanged">
**
</member>
        <member name="M:SysAlgo.ISysAlgo.Cancel">
@brief 取消执行算法

</member>
        <member name="M:SysAlgo.ISysAlgo.Execute">
@brief 执行算法		
@return 算法执行是否成功

</member>
        <member name="M:SysAlgo.ISysAlgo.SetErrorInfo(System.Int32,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置错误信息
@param [in] nErrCode 错误编号
@param [in] strErrMsg 错误消息

</member>
        <member name="M:SysAlgo.ISysAlgo.GetErrorInfo(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取错误信息
@param [out] nErrCode 错误编号
@param [out] strErrMsg 错误消息

</member>
        <member name="M:SysAlgo.ISysAlgo.SetParams(boost.any*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法参数
@param [in] anyData 算法参数
@return

</member>
        <member name="M:SysAlgo.ISysAlgo.GetParams">
@brief 获取算法参数
@return 算法参数

</member>
        <member name="M:SysAlgo.ISysAlgo.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法描述信息
@param [in] strDesc 算法描述信息
@return

</member>
        <member name="M:SysAlgo.ISysAlgo.GetDescription">
@brief 获取算法描述信息
@return 算法描述信息

</member>
        <member name="M:SysAlgo.ISysAlgo.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法名称
@param [in] strName 算法名称

</member>
        <member name="M:SysAlgo.ISysAlgo.GetName">
@brief 获取算法名称
@return 算法名称

</member>
        <member name="M:SysAlgo.ISysAlgo.GetID">
@brief 获取算法ID
@return 算法ID

</member>
        <member name="T:SysAlgo.ISysAlgo">
@brief 算法基类接口

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.FileType">
            <summary>
文件类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.FuncName">
            <summary>
功能名称
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.Params">
            <summary />
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.imageResampling">
            <summary>
重采样类型
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.GcpFileName">
            <summary>
控制点路径
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.SrcHeight">
            <summary>
处理范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.proSrcWidth">
            <summary>
处理范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.proSrcULY">
            <summary>
处理范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.proSrcULX">
            <summary>
处理范围
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.GCP">
            <summary>
控制点
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.destWKT">
            <summary>
输出坐标系
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.gcpWKT">
            <summary>
控制点坐标系
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.OutPixelY">
            <summary>
输出分辨率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.OutPixelX">
            <summary>
输出分辨率
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.ErroFile">
            <summary>
有控制点时，可以输出精度报告文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.DestFileName">
            <summary>
输出影像
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.RPBFileName">
            <summary>
RPB文件
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.ConstDem">
            <summary>
高程常值
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.Demfile">
            <summary>
dem影像
</summary>
        </member>
        <member name="F:PIE.CommonAlgo.DataPreOrtho_Exchange_Info.FileName">
            <summary>
输入影像
</summary>
        </member>
        <member name="T:PIE.CommonAlgo.DataPreOrtho_Exchange_Info">
            <summary>
正射校正算法接口
</summary>
        </member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:PIE.CommonAlgo.Interestregion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetPreRasterFilterList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IRasterFilterProps.GetAfterRasterFilterPtrList”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterRender.GetType”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetDataset”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.RasterLayer.GetRenderer”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ellipse.GetPointsOnEdge(System.Int32)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatureIDs”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IFeatureSelection.GetSelectionFeatures”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c1”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c2”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c3”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“F:SysDataSource.ColorEntry.c4”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetNoDataValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetCategoryNames”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.SetCategoryNames(QVector<QString>!System.Runtime.CompilerServices.IsConst)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterBand.GetBlockSize(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDataSource.RasterDataset.GetPyramidSize(System.Int32,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
    </members>
</doc>