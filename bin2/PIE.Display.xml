<?xml version="1.0"?>
<doc>
    <assembly>
        "Display"
    </assembly>
    <members>
        <member name="M:PIE.Display.FillSymbol.get_OutlineSymbol">
            <summary>
获取轮廓线样式
</summary>
            <returns>轮廓线样式</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.set_OutlineSymbol(PIE.Display.ILineSymbol)">
            <summary>
设置轮廓线样式
</summary>
            <param name="OutlineSymbol">轮廓线样式</param>
        </member>
        <member name="M:PIE.Display.FillSymbol.get_Color">
            <summary>
获取面的颜色
</summary>
            <returns>颜色</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.set_Color(System.Drawing.Color)">
            <summary>
设置面的颜色
</summary>
            <param name="color">颜色</param>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.get_Font">
            <summary>
 获取或者设置字体
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.get_CharacterIndex">
            <summary>
获取或者字体符的编号
</summary>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.get_YOffset">
            <summary>
获取Y方向的偏移
</summary>
            <returns>Y方向的偏移</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.set_YOffset(System.Double)">
            <summary>
设置Y方向偏移
</summary>
            <param name="yOffset">Y方向偏移</param>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.get_XOffset">
            <summary>
获取X方向的偏移
</summary>
            <returns>X方向的偏移</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.set_XOffset(System.Double)">
            <summary>
设置X方向偏移
</summary>
            <param name="xOffset">X方向偏移</param>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.get_Size">
            <summary>
获取点符号大小
</summary>
            <returns>点符号大小</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.set_Size(System.Double)">
            <summary>
设置点符号大小
</summary>
            <param name="size">点符号大小</param>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.get_Color">
            <summary>
获取点的颜色
</summary>
            <returns>颜色</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.set_Color(System.Drawing.Color)">
            <summary>
设置点的颜色
</summary>
            <param name="color">颜色</param>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.get_Angle">
            <summary>
获取符号旋转角度
</summary>
            <returns>旋转角度</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.set_Angle(System.Double)">
            <summary>
设置符号旋转角度
</summary>
            <param name="angle">旋转角度</param>
        </member>
        <member name="M:PIE.Display.TextSymbol.get_Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.set_Image(System.Drawing.Image)">
            <summary>
设置图片
</summary>
            <param name="image">image 图片</param>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.set_Size(System.Int32)">
            <summary>
设置大小
</summary>
            <param name="nSize">大小</param>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.get_Size">
            <summary>
获取大小
</summary>
            <returns>大小</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.set_Algorithm(PIE.Display.ColorRampAlgorithm)">
            <summary>
设置颜色带算法
</summary>
            <param name="colorRampAlgorithm">算法</param>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.get_Algorithm">
            <summary>
获取颜色带算法
</summary>
            <returns>目标颜色</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.set_ToColor(System.Drawing.Color)">
            <summary>
设置目标颜色
</summary>
            <param name="toColor">目标颜色</param>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.get_ToColor">
            <summary>
获取目标颜色
</summary>
            <returns>目标颜色</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.set_FromColor(System.Drawing.Color)">
            <summary>
设置源颜色
</summary>
            <param name="fromColor">源颜色</param>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.get_FromColor">
            <summary>
获取源颜色
</summary>
            <returns>源颜色</returns>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.get_DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.get_Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.set_MarkerSymbol(PIE.Display.IMarkerSymbol)">
            <summary>
获取或者设置点符号样式
</summary>
            <param name="markerSymbol">点符号样式</param>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.get_Symbol">
            <summary>
获取符号
</summary>
            <returns>符号</returns>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.set_Symbol(PIE.Display.ISymbol)">
            <summary>
设置符号
</summary>
            <param name="symbol">符号</param>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.get_Category">
            <summary>
获取分组
</summary>
            <returns>分组</returns>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.set_Category(System.String)">
            <summary>
设置分组
</summary>
            <param name="category">分组</param>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.get_Name">
            <summary>
获取名称
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.set_Name(System.String)">
            <summary>
设置名称
</summary>
            <param name="name">名称</param>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.get_ID">
            <summary>
获取名称
</summary>
            <returns>名称</returns>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.set_ID(System.Int32)">
            <summary>
设置编号
</summary>
            <param name="id">编号</param>
        </member>
        <member name="M:PIE.Display.SymbolOperator.ConvertSymbolToJSON(PIE.Display.ISymbol)">
            <summary>
转化符号样式为JSON串
</summary>
            <param name="symbol">符号样式</param>
            <returns>JSON串</returns>
            <summary>
转化符号样式为JSON串
</summary>
            <param name="symbol">符号样式</param>
            <returns>JSON串</returns>
        </member>
        <member name="M:PIE.Display.SymbolOperator.ConvertJSONToSymbol(System.String)">
            <summary>
转化JSON串为符号样式
</summary>
            <param name="jSONString">JSON串</param>
            <returns>符号样式</returns>
            <summary>
转化JSON串为符号样式
</summary>
            <param name="jSONString">JSON串</param>
            <returns>符号样式</returns>
        </member>
        <member name="T:PIE.Display.SymbolOperator">
            <summary>
符号操作类
</summary>
        </member>
        <member name="M:SysDisplay.SymbolOperator.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.SymbolOperator.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.SymbolOperator.ConvertSymbolToJSON(SysUtility._ptr_t&lt;SysDisplay.Symbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 转化符号样式为JSON串
@param[in] const SymbolPtr ptrSymbol 符号样式
@return QString Json字符串

</member>
        <member name="T:SysDisplay.SymbolOperator">
@class SymbolOperator
	* @brief 符号控制器

</member>
        <member name="M:PIE.Display.SimpleLineSymbol.get_Style">
            <summary>
获取或者设置简单线符号样式
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnVisibleBoundsUpdated(PIE.Display.OnVisibleBoundsUpdatedEventHandler)">
            <summary>
可视范围变化事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnUnitsUpdated(PIE.Display.OnUnitsUpdatedEventHandler)">
            <summary>
地图显示单位变化事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnRotationUpdated(PIE.Display.OnRotationUpdatedEventHandler)">
            <summary>
地图旋转变化事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnResolutionUpdated(PIE.Display.OnResolutionUpdatedEventHandler)">
            <summary>
分辨率变化事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnDeviceFrameUpdated(PIE.Display.OnDeviceFrameUpdatedEventHandler)">
            <summary>
设备范围更新事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.add_OnBoundsUpdated(PIE.Display.OnBoundsUpdatedEventHandler)">
            <summary>
 全图范围更新事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.get_Units">
            <summary>
获取或设置单位
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.get_DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.get_Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.set_Width(System.Double)">
            <summary>
设置线的宽度
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.get_Style">
            <summary>
获取渐变色填充样式
</summary>
            <returns>渐变色填充样式</returns>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.set_Style(System.ValueType!&lt;unknown type&gt;!System.Runtime.CompilerServices.IsBoxed)">
            <summary>
设置渐变色填充样式
</summary>
            <param name="style">渐变色填充样式</param>
        </member>
        <member name="F:PIE.Display.GradientFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.GradientFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.SetColorRamp(System.Int32)">
            <summary>
设置颜色列表
</summary>
            <param name="colors">颜色表</param>
            <summary>
设置颜色列表
</summary>
            <param name="colors">颜色表</param>
        </member>
        <member name="P:PIE.Display.GradientFillSymbol.Style">
            <summary>
获取或者设置渐变色填充样式
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.GradientFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.GradientFillSymbol">
            <summary>
渐变填充面符号类
</summary>
        </member>
        <member name="M:PIE.Display.IGradientFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IGradientFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IGradientFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IGradientFillSymbol.SetColorRamp(System.Int32)">
            <summary>
设置颜色列表
</summary>
            <param name="colors">颜色表</param>
        </member>
        <member name="P:PIE.Display.IGradientFillSymbol.Style">
            <summary>
获取或者设置渐变色填充样式
</summary>
        </member>
        <member name="T:PIE.Display.IGradientFillSymbol">
            <summary>
渐变填充面符号接口
</summary>
        </member>
        <member name="D:SysDisplay.GradientFillSymbolPtr">
@brief  渐变填充符号 智能指针对象

</member>
        <member name="F:SysDisplay.GradientFillSymbol.m_bHorizontal">
@brief 水平位置

</member>
        <member name="F:SysDisplay.GradientFillSymbol.m_ColorRamp">
@brief 颜色列表

</member>
        <member name="F:SysDisplay.GradientFillSymbol.m_Style">
@brief 渐变色样式

</member>
        <member name="M:SysDisplay.GradientFillSymbol.SetHorizontal(System.Boolean)">
@brief  设置水平位置
@param[in] bool bValue 是否设置
@return viod

</member>
        <member name="M:SysDisplay.GradientFillSymbol.GetHorizontal">
@brief  获取水平位置
@return bool 是否成功

</member>
        <member name="M:SysDisplay.GradientFillSymbol.SetStyle(SysDisplay.GradientFillStyle)">
@brief 设置简单面样式
@param[in] GradientFillStyle style 简单线样式
@return void

</member>
        <member name="M:SysDisplay.GradientFillSymbol.GetStyle">
@brief 获得简单面样式
@return GradientFillStyle 简单线样式

</member>
        <member name="M:SysDisplay.GradientFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.GradientFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.GradientFillSymbol">
@class GradientFillSymbol
	* @brief 渐变填充符号

</member>
        <member name="M:PIE.Display.CustomColorRamp.set_Size(System.Int32)">
            <summary>
设置大小
</summary>
            <param name="nSize">大小</param>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.get_Size">
            <summary>
获取大小
</summary>
            <returns>大小</returns>
        </member>
        <member name="F:PIE.Display.CustomColorRamp.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.#ctor(SysUtility._ptr_t&lt;SysDisplay.CustomColorRamp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Display.CustomColorRamp.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.GetColors">
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.GetColor(System.Int32)">
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色对象</returns>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
设置颜色
</summary>
            <param name="nIndex">索引</param>
            <param name="color">颜色对象</param>
            <summary>
设置颜色
</summary>
            <param name="nIndex">索引</param>
            <param name="color">颜色对象</param>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CustomColorRamp.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.CustomColorRamp">
            <summary>
CustomColorRamp类
</summary>
        </member>
        <member name="M:PIE.Display.ICustomColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.ICustomColorRamp.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
设置颜色
</summary>
            <param name="nIndex">索引</param>
            <param name="color">颜色对象</param>
        </member>
        <member name="M:PIE.Display.ICustomColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="T:PIE.Display.ICustomColorRamp">
            <summary>
ICustomColorRamp接口
</summary>
        </member>
        <member name="F:PIE.Display.SystemSymbolSetting.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.SystemSymbolSetting.GetHandle">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Display.SystemSymbolSetting.DefaultTextSymbol">
            <summary>
获取或者设置文本符号样式
</summary>
        </member>
        <member name="P:PIE.Display.SystemSymbolSetting.DefaultFillSymbol">
            <summary>
获取或者设置面符号样式
</summary>
        </member>
        <member name="P:PIE.Display.SystemSymbolSetting.DefaultMarkerSymbol">
            <summary>
获取或者设置点符号样式
</summary>
        </member>
        <member name="P:PIE.Display.SystemSymbolSetting.DefaultLineSymbol">
            <summary>
获取或者设置轮廓线样式
</summary>
        </member>
        <member name="T:PIE.Display.SystemSymbolSetting">
            <summary>
默认符号类
</summary>
        </member>
        <member name="F:SysDisplay.SystemSymbolSetting.m_ptrDefaultTextSymbol">
@brief 文本样式符号

</member>
        <member name="F:SysDisplay.SystemSymbolSetting.m_ptrDefaultFillSymbol">
@brief 面填充样式符号

</member>
        <member name="F:SysDisplay.SystemSymbolSetting.m_ptrDefaultLineSymbol">
@brief 线样式符号

</member>
        <member name="F:SysDisplay.SystemSymbolSetting.m_ptrDefaultMarkerSymbol">
@brief 点样式符号

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.GetDefaultTextSymbol">
@brief 获取默认的文本样式符号
@return  SysDisplay::TextSymbolPtr 文本样式符号

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.GetDefaultFillSymbol">
@brief 获取默认的面填充样式符号
@return  SysDisplay::FillSymbolPtr 面填充样式符号

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.GetDefaultLineSymbol">
@brief 获取默认的线样式符号
@return  SysDisplay::LineSymbolPtr 线样式符号

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.GetDefaultMarkerSymbol">
@brief 获取默认的点样式符号
@return  SysDisplay::MarkerSymbolPtr 点样式符号

</member>
        <member name="M:SysDisplay.SystemSymbolSetting.Instance">
@brief 获得单例
@return 系统样式符号设置对象指针

</member>
        <member name="T:SysDisplay.SystemSymbolSetting">
@class SystemSymbolSetting
	* @brief  系统样式符号设置 

</member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.get_Width">
            <summary>
获取或者设置宽度
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.get_Length">
            <summary>
获取或者设置长度
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.get_YOffset">
            <summary>
获取Y方向的偏移
</summary>
            <returns>Y方向的偏移</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.set_YOffset(System.Double)">
            <summary>
设置Y方向偏移
</summary>
            <param name="yOffset">Y方向偏移</param>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.get_XOffset">
            <summary>
获取X方向的偏移
</summary>
            <returns>X方向的偏移</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.set_XOffset(System.Double)">
            <summary>
设置X方向偏移
</summary>
            <param name="xOffset">X方向偏移</param>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.get_Size">
            <summary>
获取点符号大小
</summary>
            <returns>点符号大小</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.set_Size(System.Double)">
            <summary>
设置点符号大小
</summary>
            <param name="size">点符号大小</param>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.get_Color">
            <summary>
获取点符号的颜色
</summary>
            <returns>点符号颜色</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.set_Color(System.Drawing.Color)">
            <summary>
设置点符号颜色
</summary>
            <param name="color">点符号颜色</param>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.get_Angle">
            <summary>
获取符号旋转角度
</summary>
            <returns>旋转角度</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.set_Angle(System.Double)">
            <summary>
设置符号旋转角度
</summary>
            <param name="angle">旋转角度</param>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.set_Image(System.Drawing.Image)">
            <summary>
设置图片
</summary>
            <param name="image">image 图片</param>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.get_YScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.get_XScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="F:PIE.Display.AlgorithmicColorRamp.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.#ctor(SysUtility._ptr_t&lt;SysDisplay.AlgorithmicColorRamp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Display.AlgorithmicColorRamp.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.GetColors">
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.GetColor(System.Int32)">
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色对象</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="P:PIE.Display.AlgorithmicColorRamp.Algorithm">
            <summary>
获取或设置颜色带算法
</summary>
        </member>
        <member name="P:PIE.Display.AlgorithmicColorRamp.ToColor">
            <summary>
获取或设置目标颜色
</summary>
        </member>
        <member name="P:PIE.Display.AlgorithmicColorRamp.FromColor">
            <summary>
获取或设置源颜色
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.AlgorithmicColorRamp.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.AlgorithmicColorRamp">
            <summary>
栅格RGB渲染类
</summary>
        </member>
        <member name="M:PIE.Display.IAlgorithmicColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="P:PIE.Display.IAlgorithmicColorRamp.Algorithm">
            <summary>
获取或设置颜色带算法
</summary>
        </member>
        <member name="P:PIE.Display.IAlgorithmicColorRamp.ToColor">
            <summary>
获取或设置目标颜色
</summary>
        </member>
        <member name="P:PIE.Display.IAlgorithmicColorRamp.FromColor">
            <summary>
获取或设置源颜色
</summary>
        </member>
        <member name="M:PIE.Display.IAlgorithmicColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="T:PIE.Display.IAlgorithmicColorRamp">
            <summary>
IAlgorithmicColorRamp接口
</summary>
        </member>
        <member name="F:PIE.Display.TextSymbol.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.TextSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.TextSymbol.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.TextSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.TextSymbol.Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="P:PIE.Display.TextSymbol.Text">
            <summary>
获取或者设置文字
</summary>
        </member>
        <member name="P:PIE.Display.TextSymbol.Size">
            <summary>
获取或者设置大小
</summary>
        </member>
        <member name="P:PIE.Display.TextSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.TextSymbol.Color">
            <summary>
获取或者设置颜色
</summary>
        </member>
        <member name="P:PIE.Display.TextSymbol.Angle">
            <summary>
获取或者设置角度
</summary>
        </member>
        <member name="M:PIE.Display.TextSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.TextSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.TextSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.TextSymbol">
            <summary>
文字符号类
</summary>
        </member>
        <member name="F:PIE.Display.MultiLayerLineSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.MultiLayerLineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.ClearLayer">
            <summary>
清除线符号样式图层
</summary>
            <returns>是否成功</returns>
            <summary>
清除线符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.MoveLayer(PIE.Display.ILineSymbol,System.Int32)">
            <summary>
 移动线符号样式图层
</summary>
            <param name="ptrLineSymbol">ptrLineSymbol</param>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
 移动线符号样式图层
</summary>
            <param name="ptrLineSymbol">ptrLineSymbol</param>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.DeleteLayer(System.Int32)">
            <summary>
删除线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
删除线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.GetLayer(System.Int32)">
            <summary>
获得线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>LineSymbolPtr</returns>
            <summary>
获得线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>ptrLineSymbol</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.AddLayer(PIE.Display.ILineSymbol,System.Boolean)">
            <summary>
添加线符号样式图层
</summary>
            <param name="ptrLineSymbol">线符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
            <summary>
添加线符号样式图层
</summary>
            <param name="ptrLineSymbol">线符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerLineSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MultiLayerLineSymbol">
            <summary>
多图层线符号类
</summary>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.ClearLayer">
            <summary>
清除线符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.MoveLayer(PIE.Display.ILineSymbol,System.Int32)">
            <summary>
 移动线符号样式图层
</summary>
            <param name="ptrLineSymbol">ptrLineSymbol</param>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.DeleteLayer(System.Int32)">
            <summary>
删除线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.GetLayer(System.Int32)">
            <summary>
获得线符号样式图层
</summary>
            <param name="index">线符号样式图层Index</param>
            <returns>LineSymbolPtr</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerLineSymbol.AddLayer(PIE.Display.ILineSymbol,System.Boolean)">
            <summary>
添加线符号样式图层
</summary>
            <param name="ptrLineSymbol">线符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Display.IMultiLayerLineSymbol">
            <summary>
多图层线符号接口
</summary>
        </member>
        <member name="D:SysDisplay.MultiLayerLineSymbolPtr">
@brief 多图层线符号 智能指针对象

</member>
        <member name="F:SysDisplay.MultiLayerLineSymbol.m_SymbolLockedInfos">
@brief 锁定信息集

</member>
        <member name="F:SysDisplay.MultiLayerLineSymbol.m_LineSymbols">
@brief 线符号样式集合

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.IsLayerLocked(System.Int32)">
@brief 判断图层是否锁定
@param[in] int index 编号
@return bool 是否锁定，锁定返回True，未锁定返回False

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetMiterLimit(System.Double)">
@brief 设置线的MiterLimit
@param[in] double miterLimit MiterLimit
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetMiterLimit">
@brief 获得线的MiterLimit
@return double MiterLimit 

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetJoinStyle(SysDisplay.LineJoinStyle)">
@brief 设置连接样式
@param[in] LineJoinStyle join 连接样式
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetJoinStyle">
@brief 获得连接样式
@return LineJoinStyle 连接样式

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetCapStyle(SysDisplay.LineCapStyle)">
@brief 设置线帽样式
@param[in] LineCapStyle cap 线帽样式
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetCapStyle">
@brief 得到线帽样式
@return LineCapStyle 线帽样式

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color  颜色
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetColor">
@brief 获取颜色
@return QColor  颜色

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetWidth(System.Double)">
@brief 设置宽度值
@param[in] double width  宽度值
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetWidth">
@brief 获取宽度
@return double 宽度值

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.SetOffset(System.Double)">
@brief  设置偏移量
@param[in] double offset 偏移量
@return void

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetOffset">
@brief  获取偏移量
@return double 偏移量

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetLayerCount">
@brief 获得图层数目
@return int 图层数目

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.ClearLayer">
@brief 清除线符号样式图层
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.MoveLayer(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 移动线符号样式图层
@param[in] LineSymbolPtr ptrLineSymbol 线符号样式
@param[in] int index 线符号样式图层索引Index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.DeleteLayer(System.Int32)">
@brief 删除线符号样式图层
@param[in] int index 线符号样式图层索引Index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.GetLayer(System.Int32)">
@brief 获得线符号样式图层
@param[in] int index 线符号样式图层索引Index
@return LineSymbolPtr  线符号样式

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.AddLayer(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
@brief 添加线符号样式图层 
@param[in] LineSymbolPtr ptrLineSymbol 线符号样式
@param[in] bool bLocked=false	是否被锁定
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MultiLayerLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MultiLayerLineSymbol">
@class MultiLayerLineSymbol
	* @brief  多图层线符号类

</member>
        <member name="F:PIE.Display.PictureLineSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.PictureLineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="P:PIE.Display.PictureLineSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="P:PIE.Display.PictureLineSymbol.YScale">
            <summary>
获取或者设置Y方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.PictureLineSymbol.XScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureLineSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.PictureLineSymbol">
            <summary>
图片线符号类
</summary>
        </member>
        <member name="M:PIE.Display.IPictureLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IPictureLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureLineSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="P:PIE.Display.IPictureLineSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="P:PIE.Display.IPictureLineSymbol.YScale">
            <summary>
获取或者设置Y方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.IPictureLineSymbol.XScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="T:PIE.Display.IPictureLineSymbol">
            <summary>
图片线符号接口
</summary>
        </member>
        <member name="D:SysDisplay.PictureLineSymbolPtr">
@brief 图片线符号 智能指针对象

</member>
        <member name="F:SysDisplay.PictureLineSymbol.m_YScale">
@brief Y方向缩放比例

</member>
        <member name="F:SysDisplay.PictureLineSymbol.m_XScale">
@brief X方向缩放比例

</member>
        <member name="F:SysDisplay.PictureLineSymbol.m_Image">
@brief 图片对象

</member>
        <member name="M:SysDisplay.PictureLineSymbol.SetYScale(System.Double)">
@brief 设置Y方向缩放比例
@param[in] double scale Y方向缩放比例
@returnvoid

</member>
        <member name="M:SysDisplay.PictureLineSymbol.GetYScale">
@brief 获得Y方向缩放比例
@return double Y方向缩放比例

</member>
        <member name="M:SysDisplay.PictureLineSymbol.SetXScale(System.Double)">
@brief 设置X方向缩放比例
@param[in] double scale X方向缩放比例
@returnvoid

</member>
        <member name="M:SysDisplay.PictureLineSymbol.GetXScale">
@brief 获得X方向缩放比例
@return double X方向缩放比例

</member>
        <member name="M:SysDisplay.PictureLineSymbol.SetImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图片
@param[in] QImage image 图片
@return void

</member>
        <member name="M:SysDisplay.PictureLineSymbol.CreateFromFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从文件创建
@param[in] QString filePath 文件路径
@return bool

</member>
        <member name="M:SysDisplay.PictureLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.PictureLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.PictureLineSymbol">
@class PictureLineSymbol
	* @brief 图片线符号

</member>
        <member name="F:PIE.Display.MarkerLineSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.MarkerLineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.MarkerLineSymbol.DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="P:PIE.Display.MarkerLineSymbol.Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="P:PIE.Display.MarkerLineSymbol.MarkerSymbol">
            <summary>
获取或者设置点符号
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerLineSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MarkerLineSymbol">
            <summary>
点状线符号类
</summary>
        </member>
        <member name="M:PIE.Display.IMarkerLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMarkerLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IMarkerLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IMarkerLineSymbol.DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerLineSymbol.Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerLineSymbol.MarkerSymbol">
            <summary>
获取或者设置点符号
</summary>
        </member>
        <member name="T:PIE.Display.IMarkerLineSymbol">
            <summary>
点状线符号接口
</summary>
        </member>
        <member name="D:SysDisplay.MarkerLineSymbolPtr">
@brief 智能指针对象

</member>
        <member name="F:SysDisplay.MarkerLineSymbol.m_MarkPosition">
@brief mark位置

</member>
        <member name="F:SysDisplay.MarkerLineSymbol.m_Interval">
@brief 绘图线规则比例

</member>
        <member name="F:SysDisplay.MarkerLineSymbol.m_DashPattern">
@brief 制图线规则

</member>
        <member name="F:SysDisplay.MarkerLineSymbol.m_ptrMarkerSymbol">
@brief 点符号

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.SetPoistion(SysDisplay.MarkPosition)">
@brief 设置Position
@param[in] double miterLimit MiterLimit
@return void

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.GetPosition">
@brief 获得Position
@return double MiterLimit

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.GetInterval">
@brief 获取绘图线规则比例
@return double 绘图线规则比例

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.SetInterval(System.Double)">
@brief 设置绘图线规则比例
@param[in] double interval 绘图线规则比例
@return void 

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.GetMarkerSymbol">
@brief 获得点符号
@returnMarkerSymbolPtr 点符号

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.SetMarkerSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置点符号
@param[in] MarkerSymbolPtr ptrMarkerSymbol 点符号
@return void

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MarkerLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MarkerLineSymbol">
@class MarkerLineSymbol
	* @brief  点状线符号类

</member>
        <member name="F:PIE.Display.CartographicLineSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.CartographicLineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.CartographicLineSymbol.DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="P:PIE.Display.CartographicLineSymbol.Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="P:PIE.Display.CartographicLineSymbol.Width">
            <summary>
设置线的宽度
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CartographicLineSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.CartographicLineSymbol">
            <summary>
制图线符号类
</summary>
        </member>
        <member name="M:PIE.Display.ICartographicLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ICartographicLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.ICartographicLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.ICartographicLineSymbol.DashPattern">
            <summary>
获取或者设置制图线的规则
</summary>
        </member>
        <member name="P:PIE.Display.ICartographicLineSymbol.Interval">
            <summary>
获取或者设置线的间距
</summary>
        </member>
        <member name="P:PIE.Display.ICartographicLineSymbol.Width">
            <summary>
设置线的宽度
</summary>
        </member>
        <member name="T:PIE.Display.ICartographicLineSymbol">
            <summary>
制图线符号接口
</summary>
        </member>
        <member name="D:SysDisplay.CartographicLineSymbolPtr">
@brief  制图线符号 智能指针对象

</member>
        <member name="F:SysDisplay.CartographicLineSymbol.m_Interval">
@brief 绘图线规则比例

</member>
        <member name="F:SysDisplay.CartographicLineSymbol.m_bDashPatternUpdate">
@brief 制图线规则有没有更新

</member>
        <member name="F:SysDisplay.CartographicLineSymbol.m_DashPattern">
@brief 制图线规则

</member>
        <member name="M:SysDisplay.CartographicLineSymbol.GetInterval">
@brief 获取绘图线规则比例
@return double 绘图线规则比例值

</member>
        <member name="M:SysDisplay.CartographicLineSymbol.SetInterval(System.Double)">
@brief 设置绘图线规则比例
@param[in] double interval  绘图线规则比例值
@return void

</member>
        <member name="M:SysDisplay.CartographicLineSymbol.SetWidth(System.Double)">
@brief 设置宽度 
@param[in] double width 宽度值
@return void

</member>
        <member name="M:SysDisplay.CartographicLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.CartographicLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.CartographicLineSymbol">
@class CartographicLineSymbol
	* @brief 制图线符号

</member>
        <member name="F:PIE.Display.SimpleLineSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.SimpleLineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.SimpleLineSymbol.Style">
            <summary>
获取或者设置简单线符号样式
</summary>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleLineSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.SimpleLineSymbol">
            <summary>
简单线符号类
</summary>
        </member>
        <member name="F:PIE.Display.LineSymbol.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.LineSymbol.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.LineSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.LineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.LineSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.LineSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.LineSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point[])">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">QPainter对象</param>
            <param name="points">绘制路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.LineSymbol.Join">
            <summary>
获取或者设置线的连接样式
</summary>
        </member>
        <member name="P:PIE.Display.LineSymbol.Cap">
            <summary>
获取或者设置线的线帽样式
</summary>
        </member>
        <member name="P:PIE.Display.LineSymbol.MiterLimit">
            <summary>
获取或者设置线的MiterLimit
</summary>
        </member>
        <member name="P:PIE.Display.LineSymbol.Color">
            <summary>
获取或者设置线的颜色
</summary>
        </member>
        <member name="P:PIE.Display.LineSymbol.Width">
            <summary>
获取或者设置线的宽度
</summary>
        </member>
        <member name="P:PIE.Display.LineSymbol.Offset">
            <summary>
获取或者设置线的偏移量
</summary>
        </member>
        <member name="T:PIE.Display.LineSymbol">
            <summary>
线符号类
</summary>
        </member>
        <member name="M:PIE.Display.ISimpleLineSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ISimpleLineSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.ISimpleLineSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.ISimpleLineSymbol.Style">
            <summary>
获取或者设置简单线符号样式
</summary>
        </member>
        <member name="T:PIE.Display.ISimpleLineSymbol">
            <summary>
简单线符号接口
</summary>
        </member>
        <member name="D:SysDisplay.SimpleLineSymbolPtr">
@brief 简单线符号类 智能指针对象

</member>
        <member name="F:SysDisplay.SimpleLineSymbol.m_Style">
@brief 线样式

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.SetStyle(SysDisplay.SimpleLineStyle)">
@brief 设置简单线样式
@param[in] SimpleLineStyle style 简单线样式
@return void

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.GetStyle">
@brief 获得简单线样式
@return SimpleLineStyle 简单线样式

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.SimpleLineSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.SimpleLineSymbol">
@class SimpleLineSymbol
	* @brief 简单线符号类 

</member>
        <member name="F:PIE.Display.MultiLayerMarkerSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.MultiLayerMarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">点符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">点符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.ClearLayer">
            <summary>
清除点符号样式图层
</summary>
            <returns>是否成功</returns>
            <summary>
清除点符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.MoveLayer(PIE.Display.IMarkerSymbol,System.Int32)">
            <summary>
 移动点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">MarkerSymbolPtr</param>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
 移动点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">MarkerSymbolPtr</param>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.DeleteLayer(System.Int32)">
            <summary>
删除点符号样式图层
</summary>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
删除点符号样式图层
</summary>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.GetLayer(System.Int32)">
            <summary>
获得点符号样式图层
</summary>
            <param name="index">对点符号样式图层Index</param>
            <returns>点符号样式</returns>
            <summary>
获得点符号样式图层
</summary>
            <param name="index">对点符号样式图层Index</param>
            <returns>MarkerSymbolPtr</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.AddLayer(PIE.Display.IMarkerSymbol,System.Boolean)">
            <summary>
添加点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">点符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
            <summary>
添加点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">点符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.MultiLayerMarkerSymbol.YOffset">
            <summary>
获取或者设置Y方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.MultiLayerMarkerSymbol.XOffset">
            <summary>
获取或者设置X方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.MultiLayerMarkerSymbol.Size">
            <summary>
获取或者设置点的大小
</summary>
        </member>
        <member name="P:PIE.Display.MultiLayerMarkerSymbol.Color">
            <summary>
获取或者设置点的颜色
</summary>
        </member>
        <member name="P:PIE.Display.MultiLayerMarkerSymbol.Angle">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerMarkerSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MultiLayerMarkerSymbol">
            <summary>
多图层点符号类
</summary>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">点符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.ClearLayer">
            <summary>
清除点符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.MoveLayer(PIE.Display.IMarkerSymbol,System.Int32)">
            <summary>
 移动点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">MarkerSymbolPtr</param>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.DeleteLayer(System.Int32)">
            <summary>
删除点符号样式图层
</summary>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.GetLayer(System.Int32)">
            <summary>
获得点符号样式图层
</summary>
            <param name="index">对点符号样式图层Index</param>
            <returns>MarkerSymbolPtr</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerMarkerSymbol.AddLayer(PIE.Display.IMarkerSymbol,System.Boolean)">
            <summary>
添加点符号样式图层
</summary>
            <param name="ptrMarkerSymbol">点符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IMultiLayerMarkerSymbol.YOffset">
            <summary>
获取或者设置Y方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMultiLayerMarkerSymbol.XOffset">
            <summary>
获取或者设置X方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMultiLayerMarkerSymbol.Size">
            <summary>
获取或者设置点的大小
</summary>
        </member>
        <member name="P:PIE.Display.IMultiLayerMarkerSymbol.Color">
            <summary>
获取或者设置点的颜色
</summary>
        </member>
        <member name="P:PIE.Display.IMultiLayerMarkerSymbol.Angle">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="T:PIE.Display.IMultiLayerMarkerSymbol">
            <summary>
多图层点符号接口
</summary>
        </member>
        <member name="D:SysDisplay.MultiLayerMarkerSymbolPtr">
@brief 多图层点样式符号 智能指针对象

</member>
        <member name="F:SysDisplay.MultiLayerMarkerSymbol.m_SymbolLockedInfos">
@brief 锁定信息集

</member>
        <member name="F:SysDisplay.MultiLayerMarkerSymbol.m_MarkerSymbols">
@brief 点符号样式集合

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation 显示转换对象
@param [in] ptrGeometry  几何对象
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.SetYOffset(System.Double)">
@brief 设置点Y方向的偏移值
@param[in] double offset Y方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetYOffset">
@brief 获得点Y方向的偏移值
@return double Y方向偏移值

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.SetXOffset(System.Double)">
@brief 设置点X方向的偏移值
@param[in] double offset X方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetXOffset">
@brief 获得点X方向偏移值
@return double X方向偏移值

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.SetSize(System.Double)">
@brief 设置点大小
@param[in] double size 点大小
@return void

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetSize">
@brief 获得点大小
@return double 点大小

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.SetColor(QColor)">
@brief 设置点颜色
@param[in] QColor color 设置点颜色
@return void

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetColor">
@brief 获得点颜色
@return QColor 点颜色

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.SetAngle(System.Double)">
@brief 设置旋转角度值
@param[in] double angle 旋转角度值
@return void

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetAngle">
@brief 获得旋转角度值
@return double 旋转角度值

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.IsLayerLocked(System.Int32)">
@brief 判断图层是否锁定
@param[in] int index 编号
@return bool 是否锁定，锁定返回True，未锁定返回False

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetLayerCount">
@brief 获得图层数目
@return int 图层数目

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.ClearLayer">
@brief 清除点符号样式图层
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.MoveLayer(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 移动点符号样式图层
@param[in] MarkerSymbolPtr ptrMarkerSymbol
@param[in] int index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.DeleteLayer(System.Int32)">
@brief 删除点符号样式图层
@param[in] int index 点符号样式图层Index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.GetLayer(System.Int32)">
@brief 获得点符号样式图层
@param[in] int index 点符号样式图层Index
@return MarkerSymbolPtr

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.AddLayer(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
@brief 添加点符号样式图层
@param[in] MarkerSymbolPtr ptrMarkerSymbol 点符号样式
@param[in] bool bLocked=false	是否被锁定
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MultiLayerMarkerSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MultiLayerMarkerSymbol">
@class MultiLayerMarkerSymbol
	* @brief  多图层点符号类 

</member>
        <member name="F:PIE.Display.PictureMarkerSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.PictureMarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.DrawPoint(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint)">
            <summary>
绘制点
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="point">ptrPoint 点</param>
            <returns>是否成功</returns>
            <summary>
绘制点
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="point">ptrPoint 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="P:PIE.Display.PictureMarkerSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureMarkerSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.PictureMarkerSymbol">
            <summary>
图片点符号类
</summary>
        </member>
        <member name="M:PIE.Display.IPictureMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IPictureMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureMarkerSymbol.DrawPoint(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IPoint)">
            <summary>
绘制点
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="point">ptrPoint 点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureMarkerSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="P:PIE.Display.IPictureMarkerSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="T:PIE.Display.IPictureMarkerSymbol">
            <summary>
图片点符号接口
</summary>
        </member>
        <member name="D:SysDisplay.PictureMarkerSymbolPtr">
@brief  图片点符号 智能指针对象

</member>
        <member name="F:SysDisplay.PictureMarkerSymbol.m_Image">
@brief 图片对象

</member>
        <member name="M:SysDisplay.PictureMarkerSymbol.SetImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图片
@param[in] QImage image 图片
@return void

</member>
        <member name="M:SysDisplay.PictureMarkerSymbol.CreateFromFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从文件创建
@param[in] QString filePath 文件路径
@return bool  是否成功

</member>
        <member name="M:SysDisplay.PictureMarkerSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.PictureMarkerSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.PictureMarkerSymbol">
@class PictureMarkerSymbol
	* @brief 图片点符号

</member>
        <member name="F:PIE.Display.ArrowMarkerSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.ArrowMarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.ArrowMarkerSymbol.Width">
            <summary>
获取或者设置宽度
</summary>
        </member>
        <member name="P:PIE.Display.ArrowMarkerSymbol.Length">
            <summary>
获取或者设置长度
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.ArrowMarkerSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.ArrowMarkerSymbol">
            <summary>
箭头点符号类
</summary>
        </member>
        <member name="M:PIE.Display.IArrowMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IArrowMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IArrowMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.IArrowMarkerSymbol.Width">
            <summary>
获取或者设置宽度
</summary>
        </member>
        <member name="P:PIE.Display.IArrowMarkerSymbol.Length">
            <summary>
获取或者设置长度
</summary>
        </member>
        <member name="T:PIE.Display.IArrowMarkerSymbol">
            <summary>
箭头点符号接口
</summary>
        </member>
        <member name="D:SysDisplay.ArrowMarkerSymbolPtr">
@brief  箭头点符号样式 智能指针对象

</member>
        <member name="F:SysDisplay.ArrowMarkerSymbol.m_Pen">
@brief 画笔

</member>
        <member name="F:SysDisplay.ArrowMarkerSymbol.m_Width">
@brief 宽度

</member>
        <member name="F:SysDisplay.ArrowMarkerSymbol.m_Length">
@brief 长度

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.GetWidth">
@brief 获得宽度
@return double 宽度值

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.SetWidth(System.Double)">
@brief 设置宽度
@param[in] double width 宽度
@returnvoid

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.SetLength(System.Double)">
@brief 设置长度
@param[in] double length 长度
@return void

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.ArrowMarkerSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.ArrowMarkerSymbol">
@class ArrowMarkerSymbol
	* @brief 箭头点符号样式

</member>
        <member name="F:PIE.Display.CharacterMarkerSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.CharacterMarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.ExportToJson(System.String@)">
            <summary>
导出字体点符号样式
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.ImportFromJson(System.String)">
            <summary>
设置字体点符号样式
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
设置字体点符号样式
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.CharacterMarkerSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.CharacterMarkerSymbol.CharacterIndex">
            <summary>
获取或者字体符的编号
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.CharacterMarkerSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.CharacterMarkerSymbol">
            <summary>
字体点符号类
</summary>
        </member>
        <member name="M:PIE.Display.ICharacterMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.ICharacterMarkerSymbol.ExportToJson(System.String@)">
            <summary>
导出字体点符号样式
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ICharacterMarkerSymbol.ImportFromJson(System.String)">
            <summary>
设置字体点符号样式
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.ICharacterMarkerSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.ICharacterMarkerSymbol.CharacterIndex">
            <summary>
获取或者字体符的编号
</summary>
        </member>
        <member name="T:PIE.Display.ICharacterMarkerSymbol">
            <summary>
字体点符号接口
</summary>
        </member>
        <member name="D:SysDisplay.CharacterMarkerSymbolPtr">
@brief  字体点符号 智能指针对象

</member>
        <member name="F:SysDisplay.CharacterMarkerSymbol.m_Pen">
@brief 绘制笔

</member>
        <member name="F:SysDisplay.CharacterMarkerSymbol.m_Font">
@brief 字体

</member>
        <member name="F:SysDisplay.CharacterMarkerSymbol.m_CharacterIndex">
@brief 字体符的编号

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation 转换对象
@param [in] ptrGeometry 几何对象
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.GetFont">
@brief 获得字体
@return QFont 字体

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.SetFont(QFont)">
@brief 设置字体
@param[in] QFont font 字体
@return void

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.GetCharacterIndex">
@brief 获得字体符的编号
@return int 字体符的编号

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.SetCharacterIndex(System.Int32)">
@brief 设置字体符的编号
@param[in] int characterIndex 字体符的编号
@return void

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.CharacterMarkerSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.CharacterMarkerSymbol">
@class CharacterMarkerSymbol
	* @brief 字体点符号

</member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnVisibleBoundsUpdatedEventHandler">
            <summary>
可视范围变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnUnitsUpdatedEventHandler">
            <summary>
地图显示单位变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnRotationUpdatedEventHandler">
            <summary>
地图旋转变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnResolutionUpdatedEventHandler">
            <summary>
分辨率变化EventHandler
</summary>
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnDeviceFrameUpdatedEventHandler">
            <summary>
设备范围更新EventHandler
</summary>
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_OnBoundsUpdatedEventHandler">
            <summary>
全图范围更新EventHandler
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseVisibleBoundsUpdatedEvent(SysDisplay.DisplayTransformation*,System.Boolean)">
            <summary>
触发可视范围变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <param name="bChanged">是否发生变化</param>
            <return />
            <summary>
触发可视范围变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <param name="bChanged">是否发生变化</param>
            <return />
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseUnitsUpdatedEvent(SysDisplay.DisplayTransformation*)">
            <summary>
触发地图显示单位变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
            <summary>
触发地图显示单位变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseRotationUpdatedEvent(SysDisplay.DisplayTransformation*)">
            <summary>
触发地图旋转变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
            <summary>
触发地图旋转变化事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseResolutionUpdatedEvent(SysDisplay.DisplayTransformation*)">
            <summary>
触发分辨率更新事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
            <summary>
触发分辨率更新事件
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseDeviceFrameUpdatedEvent(SysDisplay.DisplayTransformation*)">
            <summary>
设备范围变化
</summary>
            <return />
            <summary>
设备范围变化
</summary>
            <param name="pDisplay">转换对象</param>
            <return />
        </member>
        <member name="M:PIE.Display.DisplayTransformation.RaiseBoundsUpdatedEvent">
            <summary>
触发全图范围更新
</summary>
            <return />
            <summary>
触发全图范围更新
</summary>
            <return />
        </member>
        <member name="F:PIE.Display.DisplayTransformation.m_pCInstance">
            <summary>
C++对象-子对象
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.#ctor(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnVisibleBoundsUpdated">
            <summary>
可视范围变化事件
</summary>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnUnitsUpdated">
            <summary>
地图显示单位变化事件
</summary>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnRotationUpdated">
            <summary>
地图旋转变化事件
</summary>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnResolutionUpdated">
            <summary>
分辨率变化事件
</summary>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnDeviceFrameUpdated">
            <summary>
设备范围更新事件
</summary>
        </member>
        <member name="E:PIE.Display.DisplayTransformation.OnBoundsUpdated">
            <summary>
全图范围更新事件
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.ZoomToPageScale(System.Double)">
            <summary>
缩放到制图比例尺
</summary>
            <param name="pageScale">缩放到Page比例尺</param>
            <summary>
缩放到制图比例尺
</summary>
            <param name="pageScale">缩放到Page比例尺</param>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.CalculatePointBufferRect(PIE.Geometry.IPoint,System.Double)">
            <summary>
计算点的BufferRect
</summary>
            <param name="point">地图点</param>
            <param name="dTolrance">缓冲距离</param>
            <return>缓冲区Envelope</return>
            <summary>
计算点的BufferRect
</summary>
            <param name="point">地图点</param>
            <param name="dTolrance">缓冲距离</param>
            <return>Envelope</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.ToMapPoint(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <param name="mapX">地图点X</param>
            <param name="mapY">地图点Y</param>
            <return>是否成功</return>
            <summary>
从设备点转化为地图点
</summary>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <param name="mapX">地图点</param>
            <param name="mapY">地图点</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.ToMapPoint(System.Drawing.Point)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <return>地图点</return>
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <return>地图点</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="x">设备点X</param>
            <param name="y">设备点Y</param>
            <return>地图点</return>
            <summary>
从设备点转化为地图点
</summary>
            <param name="x">设备点X</param>
            <param name="y">设备点Y</param>
            <return>地图点</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="mapX">地图点X</param>
            <param name="mapY">地图点Y</param>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <return>是否成功</return>
            <summary>
从地图点转化为设备点
</summary>
            <param name="mapX">地图点</param>
            <param name="mapY">地图点</param>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <return>设备点</return>
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <return>设备点</return>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.FromMapPoint(System.Double,System.Double)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="x">地图点X</param>
            <param name="y">地图点Y</param>
            <return>设备点</return>
            <summary>
从地图点转化为设备点
</summary>
            <param name="x">地图点X</param>
            <param name="y">地图点Y</param>
            <return>设备点</return>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.ZoomResolution">
            <summary>
获取或设置缩放分辨率
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.PageScale">
            <summary>
获取或设置制图比例尺
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.Dpi">
            <summary>
获取或设置屏幕的DPI
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.Resolution">
            <summary>
获得设备每像素的图上距离
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.ExportFrame">
            <summary>
获取或设置设备导出框架
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.DeviceFrame">
            <summary>
获取或设置设备框架
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.FittedBounds">
            <summary>
获取或设置调整后的范围
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.VisibleBounds">
            <summary>
获取或设置可视范围
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.Bounds">
            <summary>
获取或设置全图范围
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.Display.DisplayTransformation.Units">
            <summary>
获取或设置单位
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.Dispose">
            <summary>
析构函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.DisplayTransformation.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.DisplayTransformation">
            <summary>
显示转换类
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnVisibleBoundsUpdated">
            <summary>
可视范围变化事件
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnUnitsUpdated">
            <summary>
地图显示单位变化事件
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnRotationUpdated">
            <summary>
地图旋转变化事件
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnResolutionUpdated">
            <summary>
分辨率变化事件
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnDeviceFrameUpdated">
            <summary>
全图范围更新事件
</summary>
        </member>
        <member name="E:PIE.Display.ITransformEvents.OnBoundsUpdated">
            <summary>
全图范围更新事件
</summary>
        </member>
        <member name="T:PIE.Display.ITransformEvents">
            <summary>
转换事件接口
</summary>
        </member>
        <member name="T:PIE.Display.OnVisibleBoundsUpdatedEventHandler">
            <summary>
可视范围变化事件句柄
</summary>
            <param name="displayTransformation">DisplayTransformation对象</param>
            <param name="displayTransformation">范围是否变化</param>
        </member>
        <member name="T:PIE.Display.OnUnitsUpdatedEventHandler">
            <summary>
地图显示单位变化事件句柄
</summary>
            <param name="displayTransformation">DisplayTransformation对象</param>
        </member>
        <member name="T:PIE.Display.OnRotationUpdatedEventHandler">
            <summary>
地图旋转变化事件句柄
</summary>
            <param name="displayTransformation">DisplayTransformation对象</param>
        </member>
        <member name="T:PIE.Display.OnResolutionUpdatedEventHandler">
            <summary>
分辨率变化事件句柄
</summary>
            <param name="displayTransformation">DisplayTransformation对象</param>
        </member>
        <member name="T:PIE.Display.OnDeviceFrameUpdatedEventHandler">
            <summary>
设备框架变化事件句柄
</summary>
            <param name="displayTransformation">DisplayTransformation对象</param>
        </member>
        <member name="T:PIE.Display.OnBoundsUpdatedEventHandler">
            <summary>
全图范围更新事件句柄
</summary>
        </member>
        <member name="D:SysDisplay.CustomColorRampPtr">
@brief  定制颜色带 智能指针对象

</member>
        <member name="M:SysDisplay.CustomColorRamp.Clone">
@brief 克隆
@return IColorRampPtr 克隆成果

</member>
        <member name="M:SysDisplay.CustomColorRamp.GetSize">
@brief 获取大小
@return int  大小值

</member>
        <member name="M:SysDisplay.CustomColorRamp.SetSize(System.Int32)">
@brief 设置大小
@param[in] int nSize 大小值
@return void 

</member>
        <member name="M:SysDisplay.CustomColorRamp.CreateRamp">
@brief 创建颜色带
@return bool  是否成功

</member>
        <member name="M:SysDisplay.CustomColorRamp.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.CustomColorRamp.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.CustomColorRamp">
@class CustomColorRamp
	* @brief  定制颜色带对象类

</member>
        <member name="D:SysDisplay.AlgorithmicColorRampPtr">
@brief 算法颜色带 智能指针对象

</member>
        <member name="F:SysDisplay.AlgorithmicColorRamp.m_ColorRampAlgorithm">
@brief 颜色带算法枚举

</member>
        <member name="F:SysDisplay.AlgorithmicColorRamp.m_colorTo">
@brief 目的颜色

</member>
        <member name="F:SysDisplay.AlgorithmicColorRamp.m_colorFrom">
@brief 来源颜色

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.Clone">
@brief 克隆
@return IColorRampPtr 克隆成果

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.GetAlgorithm">
@brief 获取算法
@return ColorRampAlgorithm  颜色带算法枚举变量

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.SetAlgorithm(SysDisplay.ColorRampAlgorithm)">
@brief 设置算法
@param[in] ColorRampAlgorithm algorithm 颜色带算法枚举变量
@return void

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.GetToColor">
@brief 获取目的颜色
@return QColor  颜色对象

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.GetFromColor">
@brief 获取来源颜色
@return QColor  颜色对象

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.CreateRamp">
@brief 创建颜色带 
@param[in] void
@return bool 是否成功

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDisplay.AlgorithmicColorRamp.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDisplay.AlgorithmicColorRamp">
@class AlgorithmicColorRamp
@brief 算法颜色带类

</member>
        <member name="T:SysDisplay.ColorRampAlgorithm">
@brief 枚举  颜色带算法枚举

</member>
        <member name="M:PIE.Display.MultiPartColorRamp.set_Size(System.Int32)">
            <summary>
设置大小
</summary>
            <param name="nSize">大小</param>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.get_Size">
            <summary>
获取大小
</summary>
            <returns>大小</returns>
        </member>
        <member name="F:PIE.Display.MultiPartColorRamp.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.#ctor(SysUtility._ptr_t&lt;SysDisplay.MultiPartColorRamp&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="P:PIE.Display.MultiPartColorRamp.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.GetColors">
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.GetColor(System.Int32)">
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色对象</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.GetRamp(System.Int32)">
            <summary>
获取颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
            <summary>
获取颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.RemoveRamp(System.Int32)">
            <summary>
移除索引颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带个数</returns>
            <summary>
移除索引颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带个数</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.GetNumberOfRamps">
            <summary>
获取颜色带个数
</summary>
            <returns>颜色带个数</returns>
            <summary>
获取颜色带个数
</summary>
            <returns>颜色带个数</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.AddRamp(PIE.Display.IColorRamp)">
            <summary>
添加Ramp
</summary>
            <param name="colorRamp">colorRamp对象</param>
            <summary>
添加Ramp
</summary>
            <param name="colorRamp">colorRamp对象</param>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiPartColorRamp.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MultiPartColorRamp">
            <summary>
MultiPartColorRamp类
</summary>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.GetRamp(System.Int32)">
            <summary>
获取颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.RemoveRamp(System.Int32)">
            <summary>
移除索引颜色带
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带个数</returns>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.GetNumberOfRamps">
            <summary>
获取颜色带个数
</summary>
            <returns>颜色带个数</returns>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.AddRamp(PIE.Display.IColorRamp)">
            <summary>
添加Ramp
</summary>
            <param name="colorRamp">colorRamp对象</param>
        </member>
        <member name="M:PIE.Display.IMultiPartColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="T:PIE.Display.IMultiPartColorRamp">
            <summary>
IMultiPartColorRamp接口
</summary>
        </member>
        <member name="M:PIE.Display.IColorRamp.Clone">
            <summary>
克隆
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="P:PIE.Display.IColorRamp.Size">
            <summary>
获取或设置大小
</summary>
        </member>
        <member name="M:PIE.Display.IColorRamp.GetColors">
            <summary>
创建颜色集合
</summary>
            <returns>颜色集合对象</returns>
        </member>
        <member name="M:PIE.Display.IColorRamp.GetColor(System.Int32)">
            <summary>
获取颜色
</summary>
            <param name="nIndex">索引</param>
            <returns>颜色带对象</returns>
        </member>
        <member name="M:PIE.Display.IColorRamp.CreateRamp">
            <summary>
创建颜色带
</summary>
            <returns>颜色带对象</returns>
        </member>
        <member name="T:PIE.Display.IColorRamp">
            <summary>
IColorRamp接口 
</summary>
        </member>
        <member name="D:SysDisplay.MultiPartColorRampPtr">
@brief 多片段颜色带 智能指针对象

</member>
        <member name="F:SysDisplay.MultiPartColorRamp.m_vecColorRamp">
@brief  颜色带集合

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.GetRamp(System.Int32)">
@brief 根据索引获取颜色带
@int nIndex 索引变量
@return IColorRampPtr  克隆结果 颜色带对象

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.Clone">
@brief 克隆 
@return IColorRampPtr  克隆结果 颜色带对象

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.RemoveRamp(System.Int32)">
@brief 根据索引移除颜色带
@param int nIndex 索引
@return bool 是否成功  

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.GetNumberOfRamps">
@brief 获取颜色带个数 
@return int  颜色带个数 

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.CreateRamp">
@brief 创建颜色带
@param[in] void
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MultiPartColorRamp.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MultiPartColorRamp">
@class MultiPartColorRamp
	* @brief  多片段颜色带类

</member>
        <member name="F:SysDisplay.IColorRamp.m_strName">
@brief 名字

</member>
        <member name="F:SysDisplay.IColorRamp.m_vecColor">
@brief 颜色集合

</member>
        <member name="F:SysDisplay.IColorRamp.m_nSize">
@brief  大小

</member>
        <member name="M:SysDisplay.IColorRamp.Clone">
@brief 克隆
@return IColorRampPtr 克隆成果

</member>
        <member name="M:SysDisplay.IColorRamp.GetSize">
@brief  获取大小
@return  int 尺寸大小值

</member>
        <member name="M:SysDisplay.IColorRamp.SetSize(System.Int32)">
@brief  设置大小
@param  int nSize 尺寸大小

</member>
        <member name="M:SysDisplay.IColorRamp.GetColors">
@brief  获取颜色集合
@return  QVector 颜色集合

</member>
        <member name="M:SysDisplay.IColorRamp.GetColor(System.Int32)">
@brief  根据索引获取颜色
@return QColor 获取的颜色

</member>
        <member name="M:SysDisplay.IColorRamp.CreateRamp">
@brief 创建颜色带   （修改了参数之后，必须调用CreateRamp）
@return bool 成功与否

</member>
        <member name="M:SysDisplay.IColorRamp.GetName">
@brief 获取名字
@return QString 名称

</member>
        <member name="M:SysDisplay.IColorRamp.Dispose">
@brief 析构函数

</member>
        <member name="M:SysDisplay.IColorRamp.#ctor">
@brief 构造函数

</member>
        <member name="T:SysDisplay.IColorRamp">
@brief 类的前置声明和智能指针定义


@class IColorRamp
@brief 颜色带类 

</member>
        <member name="M:PIE.Display.PictureFillSymbol.get_YOffset">
            <summary>
获取Y方向偏移
</summary>
            <returns>Y方向偏移</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_YOffset(System.Double)">
            <summary>
设置Y方向偏移
</summary>
            <param name="yOffset">Y方向偏移</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_XOffset">
            <summary>
获取X方向偏移
</summary>
            <returns>X方向偏移</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_XOffset(System.Double)">
            <summary>
设置X方向偏移
</summary>
            <param name="xOffset">X方向偏移</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_YSeparation">
            <summary>
获取Y方向间距
</summary>
            <returns>Y方向偏移</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_YSeparation(System.Double)">
            <summary>
设置Y方向间距
</summary>
            <param name="ySeparation">Y方向间距</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_XSeparation">
            <summary>
获取X方向间距
</summary>
            <returns>X方向间距</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_XSeparation(System.Double)">
            <summary>
设置X方向间距
</summary>
            <param name="xSeparation">X方向间距</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_YScale">
            <summary>
获取Y方向缩放比例
</summary>
            <returns>Y方向缩放比例</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_YScale(System.Double)">
            <summary>
设置Y方向缩放比例
</summary>
            <param name="yscale">Y方向缩放比例</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_XScale">
            <summary>
获取X方向缩放比例
</summary>
            <returns>X方向缩放比例</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_XScale(System.Double)">
            <summary>
设置X方向缩放比例
</summary>
            <param name="xscale">X方向缩放比例</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_Rotate">
            <summary>
获取旋转角度
</summary>
            <returns>旋转角度</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_Rotate(System.Double)">
            <summary>
设置旋转角度
</summary>
            <param name="angle">旋转角度</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.get_BackgroundColor">
            <summary>
获取背景色
</summary>
            <returns>颜色</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_BackgroundColor(System.Drawing.Color)">
            <summary>
设置背景色
</summary>
            <param name="color">背景色</param>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.set_Image(System.Drawing.Image)">
            <summary>
设置图片
</summary>
            <param name="image">图片</param>
        </member>
        <member name="F:PIE.Display.PictureFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.PictureFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.YOffset">
            <summary>
获取或者设置Y方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.XOffset">
            <summary>
获取或者设置X方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.YSeparation">
            <summary>
获取或者设置Y方向间距
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.XSeparation">
            <summary>
获取或者设置X方向间距
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.YScale">
            <summary>
获取或者设置Y方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.XScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.Rotate">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.BackgroundColor">
            <summary>
获取或者设置背景色
</summary>
        </member>
        <member name="P:PIE.Display.PictureFillSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否成功</returns>
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.PictureFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.PictureFillSymbol">
            <summary>
图片填充面符号类
</summary>
        </member>
        <member name="M:PIE.Display.IPictureFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IPictureFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.YOffset">
            <summary>
获取或者设置Y方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.XOffset">
            <summary>
获取或者设置X方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.YSeparation">
            <summary>
获取或者设置Y方向间距
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.XSeparation">
            <summary>
获取或者设置X方向间距
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.YScale">
            <summary>
获取或者设置Y方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.XScale">
            <summary>
获取或者设置X方向缩放比例
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.Rotate">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.BackgroundColor">
            <summary>
获取或者设置背景色
</summary>
        </member>
        <member name="P:PIE.Display.IPictureFillSymbol.Image">
            <summary>
设置图片
</summary>
        </member>
        <member name="M:PIE.Display.IPictureFillSymbol.CreateFromFile(System.String)">
            <summary>
从文件创建
</summary>
            <param name="filePath">文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Display.IPictureFillSymbol">
            <summary>
图片填充面符号接口
</summary>
        </member>
        <member name="D:SysDisplay.PictureFillSymbolPtr">
@brief 图片填充符号 智能指针对象

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_BackgroundColor">
@brief 背景色

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_YSeparation">
@brief Y方向间距

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_XSeparation">
@brief X方向间距

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_YOffset">
@brief Y方向偏移

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_XOffset">
@brief X方向偏移

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_YScale">
@brief Y方向缩放比例

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_XScale">
@brief X方向缩放比例

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_Rotate">
@brief 旋转角度

</member>
        <member name="F:SysDisplay.PictureFillSymbol.m_Image">
@brief 图片对象

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetYOffset">
@brief 获得Y方向偏移
@return double Y方向偏移

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetYOffset(System.Double)">
@brief 设置Y方向偏移
@param[in] double offset Y方向偏移
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetXOffset">
@brief 获得X方向偏移
@return double X方向偏移

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetXOffset(System.Double)">
@brief 设置X方向偏移
@param[in] double offset X方向偏移
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetYSeparation">
@brief 获得Y方向间距
@return double Y方向间距

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetYSeparation(System.Double)">
@brief 设置Y方向间距
@param[in] double separation Y方向间距
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetXSeparation">
@brief 获得X方向间距
@return double X方向间距

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetXSeparation(System.Double)">
@brief 设置X方向间距
@param[in] double separation X方向间距
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetYScale(System.Double)">
@brief 设置Y方向缩放比例
@param[in] double scale Y方向缩放比例
@returnvoid

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetYScale">
@brief 获得Y方向缩放比例
@return double Y方向缩放比例

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetXScale(System.Double)">
@brief 设置X方向缩放比例
@param[in] double scale X方向缩放比例
@returnvoid

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetXScale">
@brief 获得X方向缩放比例
@return double X方向缩放比例

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetRotate(System.Double)">
@brief 设置旋转角度
@param[in] double angle 旋转角度
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetRotate">
@brief 获得旋转角度
@return double 旋转角度

</member>
        <member name="M:SysDisplay.PictureFillSymbol.GetBackgroundColor">
@brief 获得背景色
@return QColor 背景色

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetBackgroundColor(QColor)">
@brief 设置背景色
@param[in] QColor color 图片
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.SetImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图片
@param[in] QImage image 图片
@return void

</member>
        <member name="M:SysDisplay.PictureFillSymbol.CreateFromFile(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从文件创建
@param[in] QString filePath 文件路径
@return bool  成功与否

</member>
        <member name="M:SysDisplay.PictureFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.PictureFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.PictureFillSymbol">
@class PictureFillSymbol
	* @brief 图片填充符号

</member>
        <member name="M:PIE.Display.FormattedTextSymbol.get_Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="F:PIE.Display.FormattedTextSymbol.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.FormattedTextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Text">
            <summary>
获取或者设置文字
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Size">
            <summary>
获取或者设置大小
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Color">
            <summary>
获取或者设置颜色
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Angle">
            <summary>
获取或者设置角度
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.TypeSetting">
            <summary>
获取或者设置类型设置
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Background">
            <summary>
获取或者设置文本背景
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.FlipAngle">
            <summary>
获取或者设置翻转角度
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Direction">
            <summary>
获取或者设置文本方向
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Leading">
            <summary>
获取或者设置行距
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Kerning">
            <summary>
获取或者设置字间调整
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.WordSpacing">
            <summary>
获取或者设置词间距
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.CharacterWidth">
            <summary>
获取或者设置字符宽度
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.CharacterSpacing">
            <summary>
获取或者设置字符间距
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.Case">
            <summary>
获取或者设置文本大小写样式
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.PositionStyle">
            <summary>
获取或者设置文本位置样式
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.ShadowYOffset">
            <summary>
获取或者设置阴影Y偏移
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.ShadowXOffset">
            <summary>
获取或者设置阴影X偏移
</summary>
        </member>
        <member name="P:PIE.Display.FormattedTextSymbol.ShadowColor">
            <summary>
获取或者设置阴影颜色
</summary>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.FormattedTextSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.FormattedTextSymbol">
            <summary>
文字符号类
</summary>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Text">
            <summary>
获取或者设置文字
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Size">
            <summary>
获取或者设置大小
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Color">
            <summary>
获取或者设置颜色
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Angle">
            <summary>
获取或者设置角度
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.TypeSetting">
            <summary>
获取或者设置类型设置
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Background">
            <summary>
获取或者设置文本背景
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.FlipAngle">
            <summary>
获取或者设置翻转角度
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Direction">
            <summary>
获取或者设置文本方向
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Leading">
            <summary>
获取或者设置行距
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Kerning">
            <summary>
获取或者设置字间调整
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.WordSpacing">
            <summary>
获取或者设置词间距
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.CharacterWidth">
            <summary>
获取或者设置字符宽度
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.CharacterSpacing">
            <summary>
获取或者设置字符间距
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.Case">
            <summary>
获取或者设置文本大小写样式
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.PositionStyle">
            <summary>
获取或者设置文本位置样式
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.ShadowYOffset">
            <summary>
获取或者设置阴影Y偏移
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.ShadowXOffset">
            <summary>
获取或者设置阴影X偏移
</summary>
        </member>
        <member name="P:PIE.Display.IFormattedTextSymbol.ShadowColor">
            <summary>
获取或者设置阴影颜色
</summary>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IFormattedTextSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Display.IFormattedTextSymbol">
            <summary>
格式化文字符号接口
</summary>
        </member>
        <member name="D:SysDisplay.FormattedTextSymbolPtr">
@brief 格式化符号 智能指针对象

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_bTypeSetting">
@brief 类型设置

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_pBackground">
@brief 文本背景

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dFlipAngle">
@brief 翻转角度

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_Direction">
@brief 文本方向

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dLeading">
@brief 行距

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_bKerning">
@brief 字键调整

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dWordSpacing">
@brief 词间距

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dCharacterWidth">
@brief 字符宽度

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dCharacterSpacing">
@brief 字符间距

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_Case">
@brief 文本大小写

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_PositionStyle">
@brief 文本位置

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dShadowYOffset">
@brief 阴影Y方向偏移

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_dShadowXOffset">
@brief 阴影X方向偏移

</member>
        <member name="F:SysDisplay.FormattedTextSymbol.m_ShadowColor">
@brief 阴影颜色

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetTypeSetting(System.Boolean)">
@brief 设置类型设置
@param[in] bool  typeSetting 类型
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetTypeSetting">
@brief 获得类型设置
@return bool 是否成功

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetBackground(SysUtility._ptr_t&lt;SysDisplay.TextBackground&gt;)">
@brief 设置文本背景
@param[in] SysDisplay::TextBackgroundPtr textBackground 文本背景
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetBackground">
@brief 获得文本背景
@return SysDisplay::TextBackgroundPtr

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetFlipAngle(System.Double)">
@brief 设置翻转角度
@param[in] double flipAngle 翻转角度
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetFlipAngle">
@brief 获得翻转角度
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetDirection(SysDisplay.TextDirection)">
@brief 设置文本方向
@param[in] SysDisplay::TextDirection textDirection 文本方向
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetDirection">
@brief 获得文本方向
@return SysDisplay::TextDirection

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetLeading(System.Double)">
@brief 设置行距
@param[in] double leading 行距
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetLeading">
@brief 获得行距
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetKerning(System.Boolean)">
@brief 设置字间调整
@param[in] bool
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetKerning">
@brief 获得字间调整
@return bool

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetWordSpacing(System.Double)">
@brief 设置词间距
@param[in] double wordSpacing 词间距
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetWordSpacing">
@brief 获得词间距
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetCharacterWidth(System.Double)">
@brief 设置字符宽度
@param[in] double characterWidth 字符宽度
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetCharacterWidth">
@brief 获得字符宽度
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetCharacterSpacing(System.Double)">
@brief 设置字符间距
@param[in] double characterSpacing 间距
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetCharacterSpacing">
@brief 获得字符间距
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetCase(SysDisplay.TextCase)">
@brief 设置文本大小写
@param[in] SysDisplay::TextCase textCase 样式
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetCase">
@brief 获得文本大小写
@return SysDisplay::TextCase 大小写

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetPositionStyle(SysDisplay.TextPositionStyle)">
@brief 设置文本位置样式
@param[in] SysDisplay::TextPositionStyle positionStyle 样式
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetPositionStyle">
@brief 获得文本位置样式
@return SysDisplay::TextPositionStyle 样式

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetShadowYOffset(System.Double)">
@brief 设置阴影Y偏移
@param[in] double doffsetY 颜色
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetShadowYOffset">
@brief 获得阴影Y偏移
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.SetShadowXOffset(System.Double)">
@brief 设置阴影X偏移
@param[in] double doffsetX 颜色
@return void

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetShadowXOffset">
@brief 获得阴影X偏移
@return double

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.GetShadowColor">
@brief 获得阴影颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation 转换对象
@param [in] ptrGeometry 几何对象
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.FormattedTextSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.FormattedTextSymbol">
@class FormattedTextSymbol
	* @brief 格式化文本符号

</member>
        <member name="F:PIE.Display.BalloonCallout.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.BalloonCallout.#ctor(SysUtility._ptr_t&lt;SysDisplay.BalloonCallout&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.SetTextSymbol(PIE.Display.ITextSymbol)">
            <summary>
设置文本符号
</summary>
            <param name="textSymbol">文本符号对象</param>
            <summary>
设置文本符号
</summary>
            <param name="textSymbol">文本符号对象</param>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetTextSymbol">
            <summary>
获取文本符号
</summary>
            <returns>文本符号对象</returns>
            <summary>
获取文本符号
</summary>
            <returns>文本符号对象</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.SetFillSymbol(PIE.Display.IFillSymbol)">
            <summary>
设置填充符号样式
</summary>
            <param name="symbol">填充符号样式</param>
            <summary>
设置填充符号样式
</summary>
            <param name="symbol">填充符号样式</param>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetFillSymbol">
            <summary>
获取填充符号样式
</summary>
            <returns>填充符号样式</returns>
            <summary>
获取填充符号样式
</summary>
            <returns>填充符号样式</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetTextBackgroundType">
            <summary>
获取文本符号背景类型
</summary>
            <returns>文本符号对象背景类型</returns>
            <summary>
获取文本符号背景类型
</summary>
            <returns>文本符号对象背景类型</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.SetAnchorPoint(PIE.Geometry.IPoint)">
            <summary>
设置定位点
</summary>
            <param name="pPoint">定位点</param>
            <summary>
设置定位点
</summary>
            <param name="pPoint">定位点</param>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetAnchorPoint">
            <summary>
获得定位点
</summary>
            <returns>定位点</returns>
            <summary>
获得定位点
</summary>
            <returns>定位点</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.SetLeaderTolerance(System.Double)">
            <summary>
设置牵引限度
</summary>
            <param name="tolerance">限度</param>
            <summary>
设置牵引限度
</summary>
            <param name="tolerance">限度</param>
        </member>
        <member name="M:PIE.Display.BalloonCallout.GetLeaderTolerance">
            <summary>
获得牵引限度
</summary>
            <returns>牵引限度</returns>
            <summary>
获得牵引限度
</summary>
            <returns>牵引限度</returns>
        </member>
        <member name="M:PIE.Display.BalloonCallout.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.BalloonCallout.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.BalloonCallout.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.BalloonCallout">
            <summary>
气泡注释类
</summary>
        </member>
        <member name="M:PIE.Display.ITextBackground.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.SetTextSymbol(PIE.Display.ITextSymbol)">
            <summary>
设置文本符号
</summary>
            <param name="textSymbol">文本符号对象</param>
        </member>
        <member name="M:PIE.Display.ITextBackground.GetTextSymbol">
            <summary>
获取文本符号
</summary>
            <returns>文本符号对象</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.SetFillSymbol(PIE.Display.IFillSymbol)">
            <summary>
设置填充符号样式
</summary>
            <param name="symbol">填充符号样式</param>
        </member>
        <member name="M:PIE.Display.ITextBackground.GetFillSymbol">
            <summary>
获取填充符号样式
</summary>
            <returns>填充符号样式</returns>
        </member>
        <member name="M:PIE.Display.ITextBackground.GetTextBackgroundType">
            <summary>
获取文本符号背景类型
</summary>
            <returns>文本符号对象背景类型</returns>
        </member>
        <member name="T:PIE.Display.ITextBackground">
            <summary>
文本背景色符号接口
</summary>
        </member>
        <member name="M:PIE.Display.ITextSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ITextSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Alignment">
            <summary>
获取或设置文本对齐方式
</summary>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Text">
            <summary>
获取或者设置文字
</summary>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Size">
            <summary>
获取或者设置大小
</summary>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Font">
            <summary>
获取或者设置字体
</summary>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Color">
            <summary>
获取或者设置颜色
</summary>
        </member>
        <member name="P:PIE.Display.ITextSymbol.Angle">
            <summary>
获取或者设置角度
</summary>
        </member>
        <member name="T:PIE.Display.ITextSymbol">
            <summary>
文字符号接口
</summary>
        </member>
        <member name="T:PIE.Display.IBalloonCallout">
            <summary>
气泡注释接口
</summary>
        </member>
        <member name="M:PIE.Display.ICallout.SetAnchorPoint(PIE.Geometry.IPoint)">
            <summary>
设置定位点
</summary>
            <param name="pPoint">定位点</param>
        </member>
        <member name="M:PIE.Display.ICallout.GetAnchorPoint">
            <summary>
获得定位点
</summary>
            <returns>定位点</returns>
        </member>
        <member name="M:PIE.Display.ICallout.SetLeaderTolerance(System.Double)">
            <summary>
设置牵引限度
</summary>
            <param name="tolerance">限度</param>
        </member>
        <member name="M:PIE.Display.ICallout.GetLeaderTolerance">
            <summary>
获得牵引限度
</summary>
            <returns>牵引限度</returns>
        </member>
        <member name="T:PIE.Display.ICallout">
            <summary>
气泡符号接口
</summary>
        </member>
        <member name="D:SysDisplay.BalloonCalloutPtr">
@brief 气球注释 智能指针对象

</member>
        <member name="F:SysDisplay.BalloonCallout.m_nBalloonSegment">
@brief 连接定位点边界索引

</member>
        <member name="F:SysDisplay.BalloonCallout.m_pFillSym">
@brief 面符号

</member>
        <member name="F:SysDisplay.BalloonCallout.m_Style">
@brief 样式

</member>
        <member name="M:SysDisplay.BalloonCallout.SetSymbol(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置面符号
@param[in] SysDisplay::FillSymbolPtr fillSym 面符号
@return void

</member>
        <member name="M:SysDisplay.BalloonCallout.GetSymbol">
@brief 获得面符号
@return SysDisplay::FillSymbolPtr 面符号

</member>
        <member name="M:SysDisplay.BalloonCallout.SetStyle(SysDisplay.BalloonCalloutStyle)">
@brief 设置样式
@param[in] SysDisplay::BalloonCalloutStyle style 样式
@return void

</member>
        <member name="M:SysDisplay.BalloonCallout.GetStyle">
@brief 获得样式
@return SysDisplay::BalloonCalloutStyle 样式

</member>
        <member name="M:SysDisplay.BalloonCallout.SetAnchorPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置定位点
@param[in] SysGeometry::PointPtr tolerance 定位点
@return void

</member>
        <member name="M:SysDisplay.BalloonCallout.GetAnchorPoint">
@brief 获得定位点
@return SysGeometry::PointPtr 定位点

</member>
        <member name="M:SysDisplay.BalloonCallout.SetLeaderTolerance(System.Double)">
@brief 设置牵引限度
@param[in] double tolerance 限度
@return void

</member>
        <member name="M:SysDisplay.BalloonCallout.GetLeaderTolerance">
@brief 获得牵引限度
@return double 限度

</member>
        <member name="M:SysDisplay.BalloonCallout.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation 显示变换对象
@param [in] ptrGeometry 几何对象
@return SysGeometry::EnvelopePtr  外接多边形对象

</member>
        <member name="M:SysDisplay.BalloonCallout.SetTextSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置文本符号
@param[in] SysDisplay::TextSymbolPtr textSymbol 文本符号
@return void

</member>
        <member name="M:SysDisplay.BalloonCallout.GetTextSymbol">
@brief 获得文本符号
@return SysDisplay::TextSymbolPtr  文本符号

</member>
        <member name="M:SysDisplay.BalloonCallout.GetTextBackgroundType">
@brief 获得文本背景类型
@return SysDisplay::TextBackgroundType  文本背景类型

</member>
        <member name="M:SysDisplay.BalloonCallout.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.BalloonCallout.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.BalloonCallout">
@class BalloonCallout
	* @brief 气球注释

</member>
        <member name="D:SysDisplay.TextBackgroundPtr">
@brief 文本背景类 智能指针对象

</member>
        <member name="F:SysDisplay.TextBackground.m_TBTType">
@brief 背景类型

</member>
        <member name="F:SysDisplay.TextBackground.m_pTextSymbol">
@brief 文字符号

</member>
        <member name="M:SysDisplay.TextBackground.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation  转换对象
@param [in] ptrGeometry  几何形状
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.TextBackground.SetTextSymbol(SysUtility._ptr_t&lt;SysDisplay.TextSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置文本符号
@param[in] SysDisplay::TextSymbolPtr textSymbol 文本符号
@return void

</member>
        <member name="M:SysDisplay.TextBackground.GetTextSymbol">
@brief 获得文本符号
@return SysDisplay::TextSymbolPtr  文本符号

</member>
        <member name="M:SysDisplay.TextBackground.GetTextBackgroundType">
@brief 获得文本背景类型  
@return SysDisplay::TextBackgroundType  文本背景类型  

</member>
        <member name="M:SysDisplay.TextBackground.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.TextBackground.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.TextBackground">
@class TextBackground
	* @brief 文本背景类

</member>
        <member name="D:SysDisplay.TextSymbolPtr">
@brief  文字符号类 智能指针对象

</member>
        <member name="F:SysDisplay.TextSymbol.m_Alignment">
@brief 文本对齐方式

</member>
        <member name="F:SysDisplay.TextSymbol.m_Text">
@brief 文字内容

</member>
        <member name="F:SysDisplay.TextSymbol.m_Size">
@brief 文字大小

</member>
        <member name="F:SysDisplay.TextSymbol.m_Font">
@brief 文字字体

</member>
        <member name="F:SysDisplay.TextSymbol.m_Color">
@brief 文字颜色

</member>
        <member name="F:SysDisplay.TextSymbol.m_Angle">
@brief 文字旋转角度

</member>
        <member name="M:SysDisplay.TextSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.TextSymbol.SetAlignment(SysDisplay.TextAlignment)">
@brief 设置文本对齐方式
@param[in] SysDisplay::TextAlignment alignment 文本对齐方式
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAlignment">
@brief 获得文本对齐方式
@return SysDisplay::TextAlignment 文本对齐方式

</member>
        <member name="M:SysDisplay.TextSymbol.SetText(QString)">
@brief 设置文字
@param[in] QString text 文字
@returnvoid

</member>
        <member name="M:SysDisplay.TextSymbol.GetText">
@brief 获得文字
@return QString 文字

</member>
        <member name="M:SysDisplay.TextSymbol.SetSize(System.Double)">
@brief 设置大小
@param[in] double size 大小
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetSize">
@brief 获得大小
@return double

</member>
        <member name="M:SysDisplay.TextSymbol.SetFont(QFont)">
@brief 设置字体
@param[in] QFont font 字体
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetFont">
@brief 获得字体
@return QFont 字体

</member>
        <member name="M:SysDisplay.TextSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.TextSymbol.SetAngle(System.Double)">
@brief 设置角度
@param[in] double angle 角度
@return void

</member>
        <member name="M:SysDisplay.TextSymbol.GetAngle">
@brief 获得角度
@return double 角度

</member>
        <member name="M:SysDisplay.TextSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.TextSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.TextSymbol">
@class TextSymbol
	* @brief 文本符号

</member>
        <member name="F:SysDisplay.Callout.m_pAnchorPoint">
@brief 定位点

</member>
        <member name="F:SysDisplay.Callout.m_dLeaderTolerance">
@brief 牵引限度

</member>
        <member name="M:SysDisplay.Callout.SetAnchorPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置定位点
@param[in] SysGeometry::PointPtr tolerance 定位点
@return void

</member>
        <member name="M:SysDisplay.Callout.GetAnchorPoint">
@brief 获得定位点
@return SysGeometry::PointPtr 定位点

</member>
        <member name="M:SysDisplay.Callout.SetLeaderTolerance(System.Double)">
@brief 设置牵引限度
@param[in] double tolerance 限度
@return void

</member>
        <member name="M:SysDisplay.Callout.GetLeaderTolerance">
@brief 获得牵引限度
@return double 限度

</member>
        <member name="M:SysDisplay.Callout.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.Callout.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.Callout">
@class Callout
	* @brief 注释

</member>
        <member name="F:PIE.Display.StyleGallery.m_pCInstance">
            <summary>
C++对象Display
</summary>
        </member>
        <member name="M:PIE.Display.StyleGallery.GetItems(System.String,System.String,System.String,System.Collections.Generic.IList`1{PIE.Display.IStyleGalleryItem}@)">
            <summary>
获得符号样式
</summary>
            <param name="path">路径</param>
            <param name="className">类型名称</param>
            <param name="category">分组</param>
            <param name="styleGalleryItems">样式集合</param>
            <returns>是否成功</returns>
            <summary>
获得符号样式
</summary>
            <param name="path">路径</param>
            <param name="className">类型名称</param>
            <param name="category">分组</param>
            <param name="styleGalleryItems">样式集合</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.StyleGallery.GetCategorys(System.String,System.String,System.Collections.Generic.IList`1{System.String}@)">
            <summary>
获得符号样式
</summary>
            <param name="path">路径</param>
            <param name="className">类型名称</param>
            <param name="categories">分组</param>
            <returns>是否成功</returns>
            <summary>
获得符号样式
</summary>
            <param name="path">路径</param>
            <param name="className">类型名称</param>
            <param name="categories">分组</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.StyleGallery.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.StyleGallery.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.StyleGallery.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.StyleGallery">
            <summary>
样式类
</summary>
        </member>
        <member name="F:PIE.Display.StyleGalleryItem.m_pCInstance">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.#ctor(SysUtility._ptr_t&lt;SysDisplay.StyleGalleryItem&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="P:PIE.Display.StyleGalleryItem.Symbol">
            <summary>
获取或者设置符号
</summary>
        </member>
        <member name="P:PIE.Display.StyleGalleryItem.Category">
            <summary>
获取或者设置分组
</summary>
        </member>
        <member name="P:PIE.Display.StyleGalleryItem.Name">
            <summary>
获取或者设置名称
</summary>
        </member>
        <member name="P:PIE.Display.StyleGalleryItem.ID">
            <summary>
获取或者设置编号
</summary>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.StyleGalleryItem.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.StyleGalleryItem">
            <summary>
样式项目类
</summary>
        </member>
        <member name="P:PIE.Display.IStyleGalleryItem.Symbol">
            <summary>
获取或者设置符号
</summary>
        </member>
        <member name="P:PIE.Display.IStyleGalleryItem.Category">
            <summary>
获取或者设置分组
</summary>
        </member>
        <member name="P:PIE.Display.IStyleGalleryItem.Name">
            <summary>
获取或者设置名称
</summary>
        </member>
        <member name="P:PIE.Display.IStyleGalleryItem.ID">
            <summary>
获取或者设置编号
</summary>
        </member>
        <member name="T:PIE.Display.IStyleGalleryItem">
            <summary>
样式类项目接口
</summary>
        </member>
        <member name="D:SysDisplay.StyleGalleryPtr">
@brief 样式类 智能指针对象

</member>
        <member name="M:SysDisplay.StyleGallery.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.StyleGallery.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.StyleGallery">
@class StyleGallery
	* @brief 样式类 

</member>
        <member name="D:SysDisplay.StyleGalleryItemPtr">
@brief 样式项目类 智能指针对象

</member>
        <member name="F:SysDisplay.StyleGalleryItem.m_ptrObject">
@brief 符号

@brief 对象智能指针

</member>
        <member name="F:SysDisplay.StyleGalleryItem.m_Category">
@brief 分组

</member>
        <member name="F:SysDisplay.StyleGalleryItem.m_Name">
@brief 名称

</member>
        <member name="F:SysDisplay.StyleGalleryItem.m_ID">
@brief 编号

</member>
        <member name="M:SysDisplay.StyleGalleryItem.GetItem">
@brief 获取条目
@return  对象智能指针

</member>
        <member name="M:SysDisplay.StyleGalleryItem.SetItem(SysUtility._ptr_t&lt;SysUtility.CRef&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置符号
@param[in] SymbolPtr ptrSymbol 符号
@return

@brief 获得符号
@return SymbolPtr 符号

@brief 设置条目
@param[in] smartPtr 对象智能指针
@return  void

</member>
        <member name="M:SysDisplay.StyleGalleryItem.GetCategory">
@brief 获得分组
@return QString 分组

</member>
        <member name="M:SysDisplay.StyleGalleryItem.SetCategory(QString)">
@brief 设置分组
@param[in] QString category 分组
@return

</member>
        <member name="M:SysDisplay.StyleGalleryItem.GetName">
@brief 获得名称
@return QString 名称

</member>
        <member name="M:SysDisplay.StyleGalleryItem.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return

</member>
        <member name="M:SysDisplay.StyleGalleryItem.GetID">
@brief 获得编号
@return int 编号

</member>
        <member name="M:SysDisplay.StyleGalleryItem.SetID(System.Int32)">
@brief 设置编号
@param[in] int id 编号
@return

</member>
        <member name="M:SysDisplay.StyleGalleryItem.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.StyleGalleryItem.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.StyleGalleryItem">
@class StyleGalleryItem
	* @brief 样式项目类 

</member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.get_OutlineSymbol">
            <summary>
获取轮廓线样式
</summary>
            <returns>轮廓线样式</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.set_OutlineSymbol(PIE.Display.ILineSymbol)">
            <summary>
设置轮廓线样式
</summary>
            <param name="OutlineSymbol">轮廓线样式</param>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.get_Color">
            <summary>
获取填充面符号的颜色
</summary>
            <returns>填充面符号颜色</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.set_Color(System.Drawing.Color)">
            <summary>
设置多图层填充面符号颜色
</summary>
            <param name="color">填充面符号颜色</param>
        </member>
        <member name="F:PIE.Display.MultiLayerFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.MultiLayerFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.ClearLayer">
            <summary>
清除填充面符号样式图层
</summary>
            <returns>是否成功</returns>
            <summary>
清除填充面符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.MoveLayer(PIE.Display.IFillSymbol,System.Int32)">
            <summary>
 移动填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">ptrFillSymbol</param>
            <param name="index">填充面符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
 移动填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">ptrFillSymbol</param>
            <param name="index">填充面符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.DeleteLayer(System.Int32)">
            <summary>
删除填充面符号样式图层
</summary>
            <param name="index">填充面符号样式图层Index</param>
            <returns>是否成功</returns>
            <summary>
删除填充面符号样式图层
</summary>
            <param name="index">填充面符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.GetLayer(System.Int32)">
            <summary>
获得填充面符号样式图层
</summary>
            <param name="index">对填充面符号样式图层Index</param>
            <returns>ptrFillSymbol</returns>
            <summary>
获得填充面符号样式图层
</summary>
            <param name="index">对填充面符号样式图层Index</param>
            <returns>ptrFillSymbol</returns>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.AddLayer(PIE.Display.IFillSymbol,System.Boolean)">
            <summary>
添加填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">填充面符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
            <summary>
添加填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">填充面符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.MultiLayerFillSymbol.OutlineSymbol">
            <summary>
获取或者设置轮廓线样式
</summary>
        </member>
        <member name="P:PIE.Display.MultiLayerFillSymbol.Color">
            <summary>
获取或者设置点的颜色
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MultiLayerFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MultiLayerFillSymbol">
            <summary>
多图层面符号类
</summary>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json字符串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.ExportToJson">
            <summary>
从转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.DrawLayer(System.Drawing.Graphics,PIE.Display.IDisplayTransformation!System.Runtime.CompilerServices.IsConst,System.Int32,PIE.Geometry.IGeometry)">
            <summary>
绘制几何形状
</summary>
            <param name="graphics">graphics对象</param>
            <param name="ptrDisplayTransformation">转换对象</param>
            <param name="index">填充面符号样式图层Index</param>
            <param name="ptrGeometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.IsLayerLocked(System.Int32)">
            <summary>
判断图层是否锁定
</summary>
            <param name="index">编号</param>
            <returns>是否锁定，锁定返回True，未锁定返回False</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.GetLayerCount">
            <summary>
获得图层数目
</summary>
            <returns>图层数目</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.ClearLayer">
            <summary>
清除填充面符号样式图层
</summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.MoveLayer(PIE.Display.IFillSymbol,System.Int32)">
            <summary>
 移动填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">ptrFillSymbol</param>
            <param name="index">点符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.DeleteLayer(System.Int32)">
            <summary>
删除填充面符号样式图层
</summary>
            <param name="index">填充面符号样式图层Index</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.GetLayer(System.Int32)">
            <summary>
获得填充面符号样式图层
</summary>
            <param name="index">对填充面符号样式图层Index</param>
            <returns>FillSymbolPtr</returns>
        </member>
        <member name="M:PIE.Display.IMultiLayerFillSymbol.AddLayer(PIE.Display.IFillSymbol,System.Boolean)">
            <summary>
添加填充面符号样式图层
</summary>
            <param name="ptrFillSymbol">填充面符号样式</param>
            <param name="bLocked">是否被锁定</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IMultiLayerFillSymbol.OutlineSymbol">
            <summary>
获取或者设置轮廓线样式
</summary>
        </member>
        <member name="P:PIE.Display.IMultiLayerFillSymbol.Color">
            <summary>
获取或者设置填充面颜色
</summary>
        </member>
        <member name="T:PIE.Display.IMultiLayerFillSymbol">
            <summary>
多图层面符号接口
</summary>
        </member>
        <member name="D:SysDisplay.MultiLayerFillSymbolPtr">
@brief 多图层面符号类 智能指针对象

</member>
        <member name="F:SysDisplay.MultiLayerFillSymbol.m_SymbolLockedInfos">
@brief 锁定信息集

</member>
        <member name="F:SysDisplay.MultiLayerFillSymbol.m_FillSymbols">
@brief 填充面符号样式集合

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.IsLayerLocked(System.Int32)">
@brief 判断图层是否锁定
@param[in] int index 编号
@return bool 是否锁定，锁定返回True，未锁定返回False

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.SetOutlineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置轮廓线样式
@param[in] LineSymbolPtr ptrLineSymbol 轮廓线样式
@return void

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.GetOutlineSymbol">
@brief 获得轮廓线样式
@return LineSymbolPtr 轮廓线样式

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.GetLayerCount">
@brief 获得图层数目
@return int 图层数目

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.ClearLayer">
@brief 清除填充面符号样式图层
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.MoveLayer(SysUtility._ptr_t&lt;SysDisplay.FillSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
@brief 移动填充面符号样式图层
@param[in] FillSymbolPtr ptrFillSymbol 填充面符号样式
@param[in] int index  填充面符号样式图层索引Index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.DeleteLayer(System.Int32)">
@brief 删除填充面符号样式图层 
@param[in] int index 面符号样式图层索引Index
@return bool 是否成功

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.GetLayer(System.Int32)">
@brief 获得填充面符号样式图层
@param[in] int index 填充面符号样式图层索引Index
@return FillSymbolPtr 填充面符号样式对象

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MultiLayerFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MultiLayerFillSymbol">
@class MultiLayerFillSymbol
	* @brief 多图层面符号类 

</member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.get_Style">
            <summary>
获取或者设置简单点符号样式
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.get_OutlineSize">
            <summary>
获取或者设置轮廓线颜色
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.get_OutlineColor">
            <summary>
获取或者设置轮廓线颜色
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.get_IsDrawOutline">
            <summary>
获取或者设置是否绘制轮廓线
</summary>
        </member>
        <member name="F:PIE.Display.SimpleMarkerSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.SimpleMarkerSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.SimpleMarkerSymbol.Style">
            <summary>
获取或者设置简单点符号样式
</summary>
        </member>
        <member name="P:PIE.Display.SimpleMarkerSymbol.OutlineSize">
            <summary>
获取或者设置轮廓线宽度
</summary>
        </member>
        <member name="P:PIE.Display.SimpleMarkerSymbol.OutlineColor">
            <summary>
获取或者设置轮廓线颜色
</summary>
        </member>
        <member name="P:PIE.Display.SimpleMarkerSymbol.IsDrawOutline">
            <summary>
获取或者设置是否绘制轮廓线
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleMarkerSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.SimpleMarkerSymbol">
            <summary>
简单点符号类
</summary>
        </member>
        <member name="F:PIE.Display.MarkerSymbol.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MarkerSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.MarkerSymbol.YOffset">
            <summary>
获取或者设置Y方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.MarkerSymbol.XOffset">
            <summary>
获取或者设置X方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.MarkerSymbol.Size">
            <summary>
获取或者设置点的大小
</summary>
        </member>
        <member name="P:PIE.Display.MarkerSymbol.Color">
            <summary>
获取或者设置点的颜色
</summary>
        </member>
        <member name="P:PIE.Display.MarkerSymbol.Angle">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="T:PIE.Display.MarkerSymbol">
            <summary>
点符号类
</summary>
        </member>
        <member name="M:PIE.Display.ISimpleMarkerSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ISimpleMarkerSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ISimpleMarkerSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.ISimpleMarkerSymbol.Style">
            <summary>
获取或者设置简单点符号样式
</summary>
        </member>
        <member name="P:PIE.Display.ISimpleMarkerSymbol.OutlineSize">
            <summary>
获取或者设置轮廓线颜色
</summary>
        </member>
        <member name="P:PIE.Display.ISimpleMarkerSymbol.OutlineColor">
            <summary>
获取或者设置轮廓线颜色
</summary>
        </member>
        <member name="P:PIE.Display.ISimpleMarkerSymbol.IsDrawOutline">
            <summary>
获取或者设置是否绘制轮廓线
</summary>
        </member>
        <member name="T:PIE.Display.ISimpleMarkerSymbol">
            <summary>
简单点符号接口
</summary>
        </member>
        <member name="D:SysDisplay.SimpleMarkerSymbolPtr">
@brief 简单点符号样式 智能指针对象

</member>
        <member name="F:SysDisplay.SimpleMarkerSymbol.m_Pen">
@brief 画笔

</member>
        <member name="F:SysDisplay.SimpleMarkerSymbol.m_Style">
@brief 点符号样式

</member>
        <member name="F:SysDisplay.SimpleMarkerSymbol.m_OutlineSize">
@brief 轮廓线宽度

</member>
        <member name="F:SysDisplay.SimpleMarkerSymbol.m_OutlineColor">
@brief 轮廓线颜色

</member>
        <member name="F:SysDisplay.SimpleMarkerSymbol.m_IsDrawOutline">
@brief 是否绘制轮廓线

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.SetStyle(SysDisplay.SimpleMarkerStyle)">
@brief 设置简单点符号样式
@param[in] SimpleMarkerStyle style 简单点符号样式
@return void

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.GetStyle">
@brief 获得简单点符号样式
@return SimpleMarkerStyle 简单点符号样式

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.SetOutlineSize(System.Double)">
@brief 设置轮廓线大小
@param[in] double outlineSize 轮廓线大小
@returnvoid

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.GetOutlineSize">
@brief 获得轮廓线大小
@return double 轮廓线大小

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.SetOutlineColor(QColor)">
@brief 设置轮廓线颜色
@param[in] QColor color 轮廓线颜色
@return void

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.GetOutlineColor">
@brief 获得轮廓线颜色
@return QColor 轮廓线颜色

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.SetIsDrawOutline(System.Boolean)">
@brief 设置是否绘制轮廓线
@param[in] bool isDrawOutline 是否绘制轮廓线
@return void

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.GetIsDrawOutline">
@brief 获得是否绘制轮廓线
@return bool 是否绘制轮廓线

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.SimpleMarkerSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysDisplay.SimpleMarkerSymbol">
@class SimpleMarkerSymbol
	* @brief 简单点符号样式

</member>
        <member name="M:PIE.Display.LineFillSymbol.get_Rotate">
            <summary>
获取旋转角度
</summary>
            <returns>旋转角度</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.set_Rotate(System.Double)">
            <summary>
设置旋转角度
</summary>
            <param name="rotate">旋转角度</param>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.get_Offset">
            <summary>
获取偏移
</summary>
            <returns>偏移</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.set_Offset(System.Double)">
            <summary>
设置偏移
</summary>
            <param name="offset">偏移</param>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.get_Separation">
            <summary>
获取间距
</summary>
            <returns>间距</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.set_Separation(System.Double)">
            <summary>
设置间距
</summary>
            <param name="separation">间距</param>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.get_LineSymbol">
            <summary>
获取线填充符号样式
</summary>
            <returns>线填充符号样式</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.set_LineSymbol(PIE.Display.ILineSymbol)">
            <summary>
设置线填充符号样式
</summary>
            <param name="lineSymbol">线填充符号样式</param>
        </member>
        <member name="F:PIE.Display.LineFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.LineFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.LineFillSymbol.Rotate">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Display.LineFillSymbol.Separation">
            <summary>
获取或者设置间距
</summary>
        </member>
        <member name="P:PIE.Display.LineFillSymbol.Offset">
            <summary>
获取或者设置偏移
</summary>
        </member>
        <member name="P:PIE.Display.LineFillSymbol.LineSymbol">
            <summary>
获取或者设置线样式符号
</summary>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.LineFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.LineFillSymbol">
            <summary>
线填充面符号类
</summary>
        </member>
        <member name="M:PIE.Display.ILineFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ILineFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ILineFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.ILineFillSymbol.Rotate">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="P:PIE.Display.ILineFillSymbol.Separation">
            <summary>
获取或者设置间距
</summary>
        </member>
        <member name="P:PIE.Display.ILineFillSymbol.Offset">
            <summary>
获取或者设置偏移
</summary>
        </member>
        <member name="P:PIE.Display.ILineFillSymbol.LineSymbol">
            <summary>
获取或者设置线样式符号
</summary>
        </member>
        <member name="T:PIE.Display.ILineFillSymbol">
            <summary>
线填充面符号接口
</summary>
        </member>
        <member name="D:SysDisplay.LineFillSymbolPtr">
@brief  线填充符号 智能指针对象

</member>
        <member name="F:SysDisplay.LineFillSymbol.m_Angle">
@brief 旋转角度

</member>
        <member name="F:SysDisplay.LineFillSymbol.m_Separation">
@brief 间距

</member>
        <member name="F:SysDisplay.LineFillSymbol.m_Offset">
@brief 偏移

</member>
        <member name="F:SysDisplay.LineFillSymbol.m_ptrLineSymbol">
@brief 点符号

</member>
        <member name="M:SysDisplay.LineFillSymbol.SetRotate(System.Double)">
@brief 设置旋转角度
@param[in] double angle 旋转角度
@return void

</member>
        <member name="M:SysDisplay.LineFillSymbol.GetRotate">
@brief 获得旋转角度
@return double 旋转角度

</member>
        <member name="M:SysDisplay.LineFillSymbol.GetSeparation">
@brief 获得间隔
@return double 间隔

</member>
        <member name="M:SysDisplay.LineFillSymbol.SetSeparation(System.Double)">
@brief 设置间隔
@param[in] double separation 间隔
@return void

</member>
        <member name="M:SysDisplay.LineFillSymbol.GetOffset">
@brief 获得偏移
@return double 偏移量

</member>
        <member name="M:SysDisplay.LineFillSymbol.SetOffset(System.Double)">
@brief 设置偏移
@param[in] double offset 偏移
@returnvoid

</member>
        <member name="M:SysDisplay.LineFillSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.LineFillSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="M:SysDisplay.LineFillSymbol.GetLineSymbol">
@brief 获得线样式符号
@return LineSymbolPtr 线样式符号对象指针

</member>
        <member name="M:SysDisplay.LineFillSymbol.SetLineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置线样式符号
@param[in] LineSymbolPtr lineSymbol 线样式符号
@return void

</member>
        <member name="M:SysDisplay.LineFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.LineFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.LineFillSymbol">
@class LineFillSymbol
	* @brief 线填充符号

</member>
        <member name="M:PIE.Display.SimpleFillSymbol.get_Style">
            <summary>
获取或者设置简单点符号样式
</summary>
        </member>
        <member name="F:PIE.Display.SimpleFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.SimpleFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.SimpleFillSymbol.Style">
            <summary>
获取或者设置简单点符号样式
</summary>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.SimpleFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.SimpleFillSymbol">
            <summary>
简单面符号类
</summary>
        </member>
        <member name="M:PIE.Display.ISimpleFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ISimpleFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ISimpleFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.ISimpleFillSymbol.Style">
            <summary>
获取或者设置简单面样式
</summary>
        </member>
        <member name="T:PIE.Display.ISimpleFillSymbol">
            <summary>
简单面符号接口
</summary>
        </member>
        <member name="D:SysDisplay.SimpleFillSymbolPtr">
@brief 简单面填充符号 智能指针对象

</member>
        <member name="F:SysDisplay.SimpleFillSymbol.m_Style">
@brief 面样式

</member>
        <member name="M:SysDisplay.SimpleFillSymbol.SetStyle(SysDisplay.SimpleFillStyle)">
@brief 设置简单面样式
@param[in] SimpleFillStyle style 简单线样式
@return void

</member>
        <member name="M:SysDisplay.SimpleFillSymbol.GetStyle">
@brief 获得简单面样式
@return SimpleFillStyle 简单线样式

</member>
        <member name="M:SysDisplay.SimpleFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.SimpleFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.SimpleFillSymbol">
@class SimpleFillSymbol
	* @brief 简单面填充符号

</member>
        <member name="M:PIE.Display.MarkerFillSymbol.get_YOffset">
            <summary>
获取Y方向偏移
</summary>
            <returns>Y方向偏移</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.set_YOffset(System.Double)">
            <summary>
设置Y方向偏移
</summary>
            <param name="yOffset">Y方向偏移</param>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.get_XOffset">
            <summary>
获取X方向偏移
</summary>
            <returns>X方向偏移</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.set_XOffset(System.Double)">
            <summary>
设置X方向偏移
</summary>
            <param name="xOffset">X方向偏移</param>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.get_YSeparation">
            <summary>
获取Y方向间距
</summary>
            <returns>Y方向偏移</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.set_YSeparation(System.Double)">
            <summary>
设置Y方向间距
</summary>
            <param name="ySeparation">Y方向间距</param>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.get_XSeparation">
            <summary>
获取X方向间距
</summary>
            <returns>X方向间距</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.set_XSeparation(System.Double)">
            <summary>
设置X方向间距
</summary>
            <param name="xSeparation">X方向间距</param>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.get_MarkerSymbol">
            <summary>
获取点符号样式
</summary>
            <returns>点符号样式</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.set_MarkerSymbol(PIE.Display.IMarkerSymbol)">
            <summary>
设置点符号样式
</summary>
            <param name="markerSymbol">点符号样式</param>
        </member>
        <member name="F:PIE.Display.MarkerFillSymbol.m_pCInstanceSub">
            <summary>
C++对象
</summary>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.#ctor(SysUtility._ptr_t&lt;SysDisplay.MarkerFillSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
构造函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.MarkerFillSymbol.YOffset">
            <summary>
获取或者设置Y方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.MarkerFillSymbol.XOffset">
            <summary>
获取或者设置X方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.MarkerFillSymbol.YSeparation">
            <summary>
获取或者设置Y方向间距
</summary>
        </member>
        <member name="P:PIE.Display.MarkerFillSymbol.XSeparation">
            <summary>
获取或者设置X方向间距
</summary>
        </member>
        <member name="P:PIE.Display.MarkerFillSymbol.MarkerSymbol">
            <summary>
获取或者设置点符号
</summary>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.Display.MarkerFillSymbol.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.Display.MarkerFillSymbol">
            <summary>
点填充面符号类
</summary>
        </member>
        <member name="F:PIE.Display.FillSymbol.m_pCInstance">
            <summary>
C++对象Geometry
</summary>
        </member>
        <member name="M:PIE.Display.FillSymbol.GetHandle">
            <summary>
获取关联对象的句柄
</summary>
            <returns>关联对象的句柄</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.FillSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point[])">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">QPainter对象</param>
            <param name="points">绘制路径</param>
            <returns>是否成功</returns>
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="points">绘制路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.FillSymbol.OutlineSymbol">
            <summary>
获取或者设置轮廓线样式
</summary>
        </member>
        <member name="P:PIE.Display.FillSymbol.Color">
            <summary>
获取或者设置面的颜色
</summary>
        </member>
        <member name="T:PIE.Display.FillSymbol">
            <summary>
面符号类
</summary>
        </member>
        <member name="M:PIE.Display.IFillSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.IFillSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.IFillSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.IFillSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IFillSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point[])">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">QPainter对象</param>
            <param name="points">绘制路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IFillSymbol.OutlineSymbol">
            <summary>
获取或者设置轮廓线样式
</summary>
        </member>
        <member name="P:PIE.Display.IFillSymbol.Color">
            <summary>
获取或者设置面的颜色
</summary>
        </member>
        <member name="T:PIE.Display.IFillSymbol">
            <summary>
面符号接口
</summary>
        </member>
        <member name="M:PIE.Display.ILineSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.ILineSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.ILineSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.ILineSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.ILineSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point[])">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">QPainter对象</param>
            <param name="points">绘制路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.ILineSymbol.MiterLimit">
            <summary>
获取或者设置线的MiterLimit
</summary>
        </member>
        <member name="P:PIE.Display.ILineSymbol.Join">
            <summary>
获取或者设置线的连接样式
</summary>
        </member>
        <member name="P:PIE.Display.ILineSymbol.Cap">
            <summary>
获取或者设置线的线帽样式
</summary>
        </member>
        <member name="P:PIE.Display.ILineSymbol.Color">
            <summary>
获取或者设置线的颜色
</summary>
        </member>
        <member name="P:PIE.Display.ILineSymbol.Width">
            <summary>
获取或者设置线的宽度
</summary>
        </member>
        <member name="P:PIE.Display.ILineSymbol.Offset">
            <summary>
获取或者设置线的偏移量
</summary>
        </member>
        <member name="T:PIE.Display.ILineSymbol">
            <summary>
线符号接口
</summary>
        </member>
        <member name="M:PIE.Display.IMarkerFillSymbol.ImportFromJson(System.String)">
            <summary>
从Json转换为Symbol
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMarkerFillSymbol.ExportToJson(System.String@)">
            <summary>
从Symbol转换为Json
</summary>
            <param name="jsonString">json串</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMarkerFillSymbol.ExportToJson">
            <summary>
从Symbol转换为Json
</summary>
            <returns>json串</returns>
        </member>
        <member name="P:PIE.Display.IMarkerFillSymbol.YOffset">
            <summary>
获取或者设置Y方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerFillSymbol.XOffset">
            <summary>
获取或者设置X方向偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerFillSymbol.YSeparation">
            <summary>
获取或者设置Y方向间距
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerFillSymbol.XSeparation">
            <summary>
获取或者设置X方向间距
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerFillSymbol.MarkerSymbol">
            <summary>
获取或者设置点符号
</summary>
        </member>
        <member name="T:PIE.Display.IMarkerFillSymbol">
            <summary>
点填充面符号接口
</summary>
        </member>
        <member name="M:PIE.Display.IMarkerSymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.IMarkerSymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.IMarkerSymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.IMarkerSymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:PIE.Display.IMarkerSymbol.Draw(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
绘制Point
</summary>
            <param name="graphics">graphics</param>
            <param name="point">绘制点</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:PIE.Display.IMarkerSymbol.YOffset">
            <summary>
获取或者设置Y方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerSymbol.XOffset">
            <summary>
获取或者设置X方向的偏移
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerSymbol.Size">
            <summary>
获取或者设置点的大小
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerSymbol.Color">
            <summary>
获取或者设置点的颜色
</summary>
        </member>
        <member name="P:PIE.Display.IMarkerSymbol.Angle">
            <summary>
获取或者设置旋转角度
</summary>
        </member>
        <member name="T:PIE.Display.IMarkerSymbol">
            <summary>
点符号接口
</summary>
        </member>
        <member name="M:PIE.Display.ISymbol.QueryBoundary(PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
查询外接多边形
</summary>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>外接多边形</returns>
        </member>
        <member name="M:PIE.Display.ISymbol.Clone">
            <summary>
克隆
</summary>
            <returns>克隆对象</returns>
        </member>
        <member name="M:PIE.Display.ISymbol.GetType">
            <summary>
获得样式符号类型
</summary>
            <returns>样式符号类型</returns>
        </member>
        <member name="M:PIE.Display.ISymbol.Draw(System.Drawing.Graphics,PIE.Display.IDisplayTransformation,PIE.Geometry.IGeometry)">
            <summary>
绘制Geometry
</summary>
            <param name="graphics">graphics对象</param>
            <param name="displayTransformation">转换对象</param>
            <param name="geometry">几何形状</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:PIE.Display.ISymbol">
            <summary>
符号接口
</summary>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.ZoomToPageScale(System.Double)">
            <summary>
缩放到制图比例尺
</summary>
            <param name="pageScale">缩放到Page比例尺</param>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.CalculatePointBufferRect(PIE.Geometry.IPoint,System.Double)">
            <summary>
计算点的BufferRect
</summary>
            <param name="point">地图点</param>
            <param name="dTolrance">缓冲距离</param>
            <return>缓冲区Envelope</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.ToMapPoint(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <param name="mapX">地图点X</param>
            <param name="mapY">地图点Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.ToMapPoint(System.Drawing.Point)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="point">设备点</param>
            <return>地图点</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
            <summary>
从设备点转化为地图点
</summary>
            <param name="x">设备点X</param>
            <param name="y">设备点Y</param>
            <return>地图点</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32@,System.Int32@)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="mapX">地图点X</param>
            <param name="mapY">地图点Y</param>
            <param name="deviceX">设备点X</param>
            <param name="deviceY">设备点Y</param>
            <return>是否成功</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.FromMapPoint(PIE.Geometry.IPoint)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="point">地图点</param>
            <return>设备点</return>
        </member>
        <member name="M:PIE.Display.IDisplayTransformation.FromMapPoint(System.Double,System.Double)">
            <summary>
从地图点转化为设备点
</summary>
            <param name="x">地图点X</param>
            <param name="y">地图点Y</param>
            <return>设备点</return>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.ZoomResolution">
            <summary>
获取或设置缩放分辨率
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.PageScale">
            <summary>
获取或设置制图比例尺
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.MapScale">
            <summary>
获取或设置地图比例尺
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.Dpi">
            <summary>
获取或设置屏幕的DPI
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.Resolution">
            <summary>
获得设备每像素的图上距离
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.ExportFrame">
            <summary>
获取或设置设备导出框架
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.DeviceFrame">
            <summary>
获取或设置设备框架
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.FittedBounds">
            <summary>
获取或设置调整后的范围
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.VisibleBounds">
            <summary>
获取或设置可视范围
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.Bounds">
            <summary>
获取或设置全图范围
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.SpatialReference">
            <summary>
获取或设置空间参考
</summary>
        </member>
        <member name="P:PIE.Display.IDisplayTransformation.Units">
            <summary>
获取或设置单位
</summary>
        </member>
        <member name="T:PIE.Display.IDisplayTransformation">
            <summary>
显示转换接口
</summary>
        </member>
        <member name="T:PIE.Display.TextAlignmentType">
            <summary>
文本对齐方式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AlignCenter">
            <summary>
居中对齐
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AlignRight">
            <summary>
右对齐
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AlignLeft">
            <summary>
左对齐
</summary>
        </member>
        <member name="T:PIE.Display.TextBackgroundType">
            <summary>
文本背景类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TBTBalloonCallout">
            <summary>
气球形
</summary>
        </member>
        <member name="T:PIE.Display.TextDirection">
            <summary>
文本方向
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TDVertical">
            <summary>
纵向
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TDAngle">
            <summary>
按角度
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TDHorizontal">
            <summary>
横向
</summary>
        </member>
        <member name="T:PIE.Display.TextCase">
            <summary>
文本大小写
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TCSmallCaps">
            <summary>
小型大写
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TCAllCaps">
            <summary>
全部大写
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TCLowercase">
            <summary>
全部小写
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TCNormal">
            <summary>
常规
</summary>
        </member>
        <member name="T:PIE.Display.TextPositionStyle">
            <summary>
文本位置样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TPSubscript">
            <summary>
下标
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TPSuperscript">
            <summary>
上标
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TPNormal">
            <summary>
常规
</summary>
        </member>
        <member name="T:PIE.Display.BalloonCalloutStyle">
            <summary>
气球注释样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BCSOval">
            <summary>
椭圆
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BCSRoundedRectangle">
            <summary>
圆角矩形
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BCSRectangle">
            <summary>
矩形
</summary>
        </member>
        <member name="T:PIE.Display.GradientFillStyle">
            <summary>
渐变色填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GFSNull">
            <summary>
无填充
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GFSBuffered">
            <summary>
缓冲渐变填充
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GFSCircular">
            <summary>
圆形渐变填充
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GFSRectangular">
            <summary>
矩形渐变填充
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GFSLinear">
            <summary>
线性渐变填充
</summary>
        </member>
        <member name="T:PIE.Display.SimpleFillStyle">
            <summary>
 简单填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense7Pattern">
            <summary>
方式7
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense6Pattern">
            <summary>
方式6
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense5Pattern">
            <summary>
方式5
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense4Pattern">
            <summary>
方式4
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense3Pattern">
            <summary>
方式3
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense2Pattern">
            <summary>
方式2
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDense1Pattern">
            <summary>
方式1
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSDiagonalCross">
            <summary>
xxxxxxxxxxxxxxxxxxxx
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSCross">
            <summary>
+++++++++++++++++++
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSBackwardDiagonal">
            <summary>
////////////////////
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSForwardDiagonal">
            <summary>
\\\\\\\\\\\\\\\\\\\
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSVertical">
            <summary>
||||||||||||||||||
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSHorizontal">
            <summary>
------------------
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSNull">
            <summary>
无填充
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SFSSolid">
            <summary>
实体填充
</summary>
        </member>
        <member name="T:PIE.Display.LineCapStyle">
            <summary>
线帽样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LCSSquare">
            <summary>
矩形线帽样式包含最后的点
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LCSRound">
            <summary>
圆角线帽样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LCSButt">
            <summary>
矩形线帽样式不包含最后点
</summary>
        </member>
        <member name="T:PIE.Display.LineJoinStyle">
            <summary>
线连接样式
</summary>
        </member>
        <member name="F:PIE.Display.LineJoinStyle.LJSBevel">
            <summary>
平角转折
</summary>
        </member>
        <member name="F:PIE.Display.LineJoinStyle.LJSRound">
            <summary>
圆角转折
</summary>
        </member>
        <member name="F:PIE.Display.LineJoinStyle.LJSMitre">
            <summary>
直接相交转折点
</summary>
        </member>
        <member name="T:PIE.Display.SimpleLineStyle">
            <summary>
简单线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSNull">
            <summary>
无
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSDashDotDot">
            <summary>
_.._.._.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSDashDot">
            <summary>
_._._._.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSDot">
            <summary>
............
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSDash">
            <summary>
-----------
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SLSSolid">
            <summary>
实线
</summary>
        </member>
        <member name="T:PIE.Display.SimpleMarkerStyle">
            <summary>
简单点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SMSDiamond">
            <summary>
菱形
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SMSX">
            <summary>
X叉
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SMSCross">
            <summary>
十字叉
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SMSSquare">
            <summary>
正方形
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SMSCircle">
            <summary>
圆形
</summary>
        </member>
        <member name="T:PIE.Display.SymbolType">
            <summary>
样式符号类型
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolFormattedTextSymbol">
            <summary>
格式化文本样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolTextSymbol">
            <summary>
文本样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolMultiLayerFillSymbol">
            <summary>
多层填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolLineFillSymbol">
            <summary>
线符号填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolMarkerFillSymbol">
            <summary>
点符号填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolPictureFillSymbol">
            <summary>
图片填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolGradientFillSymbol">
            <summary>
渐变填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolSimpleFillSymbol">
            <summary>
简单填充样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolMultiLayerLineSymbol">
            <summary>
多层线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolMarkerLineSymbol">
            <summary>
点符号线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolPictureLineSymbol">
            <summary>
图片线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolCartographicLineSymbol">
            <summary>
制图线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolSimpleLineSymbol">
            <summary>
简单线样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolMultiLayerMarkerSymbol">
            <summary>
多层点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolPictureMarkerSymbol">
            <summary>
图片点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolCharacterMarkerSymbol">
            <summary>
字体点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolArrowMarkerSymbol">
            <summary>
箭头点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolSimpleMarkerSymbol">
            <summary>
简单点样式
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SymbolUnknownSymbol">
            <summary>
未知符号
</summary>
        </member>
        <member name="D:SysDisplay.MarkerFillSymbolPtr">
@brief 点填充符号类 智能指针对象

</member>
        <member name="F:SysDisplay.MarkerFillSymbol.m_YSeparation">
@brief Y方向间距

</member>
        <member name="F:SysDisplay.MarkerFillSymbol.m_XSeparation">
@brief X方向间距

</member>
        <member name="F:SysDisplay.MarkerFillSymbol.m_YOffset">
@brief Y方向偏移

</member>
        <member name="F:SysDisplay.MarkerFillSymbol.m_XOffset">
@brief X方向偏移

</member>
        <member name="F:SysDisplay.MarkerFillSymbol.m_ptrMarkerSymbol">
@brief 点符号

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.GetYOffset">
@brief 获得Y方向偏移
@return double Y方向偏移

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.SetYOffset(System.Double)">
@brief 设置Y方向偏移
@param[in] double offset Y方向偏移
@return void

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.GetXOffset">
@brief 获得X方向偏移
@return double X方向偏移

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.SetXOffset(System.Double)">
@brief 设置X方向偏移
@param[in] double offset X方向偏移
@return void

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.GetYSeparation">
@brief 获得Y方向间距
@return double Y方向间距

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.SetYSeparation(System.Double)">
@brief 设置Y方向间距
@param[in] double separation Y方向间距
@return void

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.GetXSeparation">
@brief 获得X方向间距
@return double X方向间距

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.SetXSeparation(System.Double)">
@brief 设置X方向间距
@param[in] double separation X方向间距
@return void

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.GetMarkerSymbol">
@brief 获得点符号
@return MarkerSymbolPtr 点符号

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.SetMarkerSymbol(SysUtility._ptr_t&lt;SysDisplay.MarkerSymbol&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置点符号
@param[in] MarkerSymbolPtr ptrMarkerSymbol 点符号
@return void

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysDisplay.MarkerFillSymbol.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="T:SysDisplay.MarkerFillSymbol">
@class MarkerFillSymbol
	* @brief 点填充符号类

</member>
        <member name="D:SysDisplay.MarkerSymbolPtr">
@brief 点符号样式 智能指针对象

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Brush">
@brief 画刷

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_YOffset">
@brief Y方向偏移

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_XOffset">
@brief X方向偏移

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Color">
@brief 点颜色

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Angle">
@brief 点角度

</member>
        <member name="F:SysDisplay.MarkerSymbol.m_Size">
@brief 点大小

</member>
        <member name="M:SysDisplay.MarkerSymbol.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.MarkerSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.MarkerSymbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 外接多边形对象

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetYOffset(System.Double)">
@brief 设置点Y方向的偏移值
@param[in] double offset Y方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetYOffset">
@brief 获得点Y方向的偏移值
@return double Y方向偏移值

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetXOffset(System.Double)">
@brief 设置点X方向的偏移值
@param[in] double offset X方向偏移值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetXOffset">
@brief 获得点X方向偏移值
@return double X方向偏移值

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetSize(System.Double)">
@brief 设置点大小
@param[in] double size 点大小
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetSize">
@brief 获得点大小
@return double 点大小

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetColor(QColor)">
@brief 设置点颜色
@param[in] QColor color 设置点颜色
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetColor">
@brief 获得点颜色
@return QColor 点颜色

</member>
        <member name="M:SysDisplay.MarkerSymbol.SetAngle(System.Double)">
@brief 设置旋转角度值
@param[in] double angle 旋转角度值
@return void

</member>
        <member name="M:SysDisplay.MarkerSymbol.GetAngle">
@brief 获得旋转角度值
@return double 旋转角度值

</member>
        <member name="T:SysDisplay.MarkerSymbol">
@class MarkerSymbol
	* @brief  点符号样式

</member>
        <member name="D:SysDisplay.FillSymbolPtr">
@brief 面填充样式 智能指针对象

</member>
        <member name="F:SysDisplay.FillSymbol.m_Brush">
@brief 画刷

</member>
        <member name="F:SysDisplay.FillSymbol.m_ptrOutLineSymbol">
@brief 轮廓线样式

</member>
        <member name="F:SysDisplay.FillSymbol.m_Color">
@brief 颜色样式

</member>
        <member name="M:SysDisplay.FillSymbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.FillSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.FillSymbol.SetOutlineSymbol(SysUtility._ptr_t&lt;SysDisplay.LineSymbol&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置轮廓线样式
@param[in] LineSymbolPtr ptrLineSymbol 轮廓线样式
@return void

</member>
        <member name="M:SysDisplay.FillSymbol.GetOutlineSymbol">
@brief 获得轮廓线样式
@return LineSymbolPtr 轮廓线样式

</member>
        <member name="M:SysDisplay.FillSymbol.SetColor(QColor)">
@brief 设置颜色
@param[in] QColor color 颜色
@return void

</member>
        <member name="M:SysDisplay.FillSymbol.GetColor">
@brief 获得颜色
@return QColor 颜色

</member>
        <member name="T:SysDisplay.FillSymbol">
@class FillSymbol
	* @brief  面填充样式

</member>
        <member name="D:SysGeometry.PolygonPtr">
@brief 面对象 智能指针对象

</member>
        <member name="F:SysGeometry.Polygon.m_ExteriorRing">
@brief 外环

</member>
        <member name="F:SysGeometry.Polygon.m_InteriorRings">
@brief 内环集合

</member>
        <member name="M:SysGeometry.Polygon.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Polygon.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polygon.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polygon.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polygon.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polygon.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polygon.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polygon.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polygon.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polygon.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polygon.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Polygon.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Polygon.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polygon.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetZ(System.Int32)">
@brief 通过索引获得点的Z值
@param[in] int index 编号
@return double 编号为index的点的Z值

</member>
        <member name="M:SysGeometry.Polygon.GetY(System.Int32)">
@brief 通过索引获得点的Y值
@param[in] int index 编号
@return double 编号为index的点的Y值

</member>
        <member name="M:SysGeometry.Polygon.GetX(System.Int32)">
@brief 通过索引获得点的X值
@param[in] int index 编号
@return double 编号为index的点的X值

</member>
        <member name="M:SysGeometry.Polygon.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.Polygon.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 要赋值点的数量
@param[in] double* px  X坐标的数组中的值
@param[in] double* py  Y坐标的数组中的值
@param[in] double* pz = NULL   Z坐标的数组中的值  默认为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x  X坐标
@param[in] double y  Y坐标
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetPointCount">
@brief 获得点数目
@return int 点的数目

</member>
        <member name="M:SysGeometry.Polygon.GetExteriorRing">
@brief 获得外环
@return RingPtr 外环

</member>
        <member name="M:SysGeometry.Polygon.SetExteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置外环
@param[in] RingPtr interiorRing 外环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingCount">
@brief 得到内环个数
@return int 内环个数

</member>
        <member name="M:SysGeometry.Polygon.ClearInteriorRings">
@brief 清除内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.RemoveInteriorRing(System.Int32)">
@brief 移除内环
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.GetInteriorRingByIndex(System.Int32)">
@brief 通过编号获得内环
@param[in] int index 编号
@return RingPtr 内环

</member>
        <member name="M:SysGeometry.Polygon.AddInteriorRing(SysUtility._ptr_t&lt;SysGeometry.Ring&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加内环
@param[in] RingPtr interiorRing 内环
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polygon.CloseRings">
@brief 关闭所有的Ring
@return

</member>
        <member name="M:SysGeometry.Polygon.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polygon.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polygon">
@class Polygon
	* @brief 面对象

</member>
        <member name="D:SysGeometry.RingPtr">
@brief 闭合环 智能指针对象

</member>
        <member name="M:SysGeometry.Ring.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@return PointPtr  获得的点对象指针

</member>
        <member name="M:SysGeometry.Ring.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Ring.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Ring.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Ring.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Ring.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Ring.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Ring.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Ring.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Ring.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Ring.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Ring.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Ring.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Ring.SetEmpty">
@brief 设置为空
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Ring.IsPointInRing(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 点是否在环里边
@param[in] SysGeometry::PointPtr ptrPoint 点
@return bool 是否在环里边

</member>
        <member name="M:SysGeometry.Ring.Close">
@brief 闭合
@return

</member>
        <member name="M:SysGeometry.Ring.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Ring.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Ring">
@class Ring
	* @brief 闭合环

</member>
        <member name="D:SysGeometry.SurfacePtr">
@brief  表面对象的智能指针对象

</member>
        <member name="M:SysGeometry.Surface.GetLength(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.GetArea(SysUtility._ptr_t&lt;SysGeometry.PointCollection&gt;)">
@brief 获得面积
@param[in] PointCollectionPtr ptrPointCollection 要计算面积的对象
@return 面积

</member>
        <member name="M:SysGeometry.Surface.IsPointOnSurface(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 点是否在面上
@param[in] PointPtr ptrPoint 点
@return bool 点是否在面上

</member>
        <member name="M:SysGeometry.Surface.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Surface.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Surface.Dispose">
@brief 构造函数
@return

</member>
        <member name="M:SysGeometry.Surface.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Surface">
@class Surface
	* @brief 表面对象

</member>
        <member name="D:SysDisplay.LineSymbolPtr">
@brief  线样式 智能指针对象

</member>
        <member name="F:SysDisplay.LineSymbol.m_Pen">
@brief 画笔

</member>
        <member name="F:SysDisplay.LineSymbol.m_MiterLimit">
@brief 限制长度

</member>
        <member name="F:SysDisplay.LineSymbol.m_JoinStyle">
@brief 折点连接样式

</member>
        <member name="F:SysDisplay.LineSymbol.m_CapStyle">
@brief 线帽样式

</member>
        <member name="F:SysDisplay.LineSymbol.m_Width">
@brief 线宽度

</member>
        <member name="F:SysDisplay.LineSymbol.m_Offset">
@brief 偏移

</member>
        <member name="F:SysDisplay.LineSymbol.m_Color">
@brief 线颜色

</member>
        <member name="M:SysDisplay.LineSymbol.Dispose">
@brief 析造函数
@return

</member>
        <member name="M:SysDisplay.LineSymbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.LineSymbol.SetMiterLimit(System.Double)">
@brief 设置MiterLimit
@param[in] double miterLimit MiterLimit
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetMiterLimit">
@brief 获得MiterLimit
@return double MiterLimit

</member>
        <member name="M:SysDisplay.LineSymbol.SetJoinStyle(SysDisplay.LineJoinStyle)">
@brief 设置连接样式
@param[in] LineJoinStyle join 连接样式
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetJoinStyle">
@brief 获得连接样式
@return LineJoinStyle 连接样式

</member>
        <member name="M:SysDisplay.LineSymbol.SetCapStyle(SysDisplay.LineCapStyle)">
@brief 设置线帽样式
@param[in] LineCapStyle cap 线帽样式
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetCapStyle">
@brief 得到线帽样式
@return LineCapStyle 线帽样式

</member>
        <member name="M:SysDisplay.LineSymbol.SetColor(QColor)">
@brief  设置颜色
@param[in] QColor color
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetColor">
@brief  获取颜色
@return QColor

</member>
        <member name="M:SysDisplay.LineSymbol.SetWidth(System.Double)">
@brief  设置宽度
@param[in] double width
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetWidth">
@brief  获取宽度
@return double

</member>
        <member name="M:SysDisplay.LineSymbol.SetOffset(System.Double)">
@brief 设置偏移量
@param[in] double offset  偏移量
@return void

</member>
        <member name="M:SysDisplay.LineSymbol.GetOffset">
@brief  获取偏移量
@return double 偏移量

</member>
        <member name="T:SysDisplay.LineSymbol">
@class LineSymbol
	* @brief  线样式

</member>
        <member name="D:SysGeometry.PolylinePtr">
@brief 单线段 智能指针对象

</member>
        <member name="M:SysGeometry.Polyline.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Polyline.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Polyline.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Polyline.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Polyline.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Polyline.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Polyline.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Polyline.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Polyline.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Polyline.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Polyline.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Polyline.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Polyline.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Polyline.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Polyline.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Polyline.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Polyline.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Polyline">
@class Polyline
	* @brief 单线段

</member>
        <member name="D:SysGeometry.PointCollectionPtr">
@brief 点集合对象 智能指针对象

</member>
        <member name="M:SysGeometry.PointCollection.IsValidIndex(System.Int32,System.Boolean)">
@brief Index是否有效
@param[in] int index 编号
@param[in] bool bInsert 是否是插入
@return bool 是否有效

</member>
        <member name="F:SysGeometry.PointCollection.m_vecPoint">
@brief 点集合

</member>
        <member name="M:SysGeometry.PointCollection.ClearPoints">
@brief 清除点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.RemovePoint(System.Int32)">
@brief 通过索引删除点
@param[in] int index 编号
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetZ(System.Int32)">
@brief 通过索引获得点的Z坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Z坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetY(System.Int32)">
@brief 通过索引获得点的Y坐标值
@param[in] int index 索引编号
@return double 编号为index的点的Y坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetX(System.Int32)">
@brief 通过索引获得点的X坐标值
@param[in] int index 索引编号
@return double 编号为index的点的X坐标值

</member>
        <member name="M:SysGeometry.PointCollection.GetPoint(System.Int32)">
@brief 通过索引获得点
@param[in] int index 编号
@return PointPtr 点

</member>
        <member name="M:SysGeometry.PointCollection.InsertPoint(System.Int32,SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过索引插入点
@param[in] int index 编号
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 获取点集数组
@param[in] int count 需要获取点集的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@param[in] double* pz  Z坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.SetPoints(System.Int32,System.Double*,System.Double*)">
@brief 给PointCollection中点赋值
@param[in] int count 点的数量
@param[in] double* px  X坐标点值的数组
@param[in] double* py  Y坐标点值的数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(System.Double,System.Double)">
@brief 添加点
@param[in] double x X
@param[in] double y Y
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.AddPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加点
@param[in] PointPtr point 点
@return bool 是否成功

</member>
        <member name="M:SysGeometry.PointCollection.GetPointCount">
@brief 获得点数目
@return int 得点数目

</member>
        <member name="M:SysGeometry.PointCollection.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.PointCollection.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.PointCollection">
@class PointCollection
	* @brief 点集合对象


@brief 类的前期声明和智能指针的定义

</member>
        <member name="T:SysGeometry.RawPoint">
@brief 点的初始化结构体

</member>
        <member name="D:SysGeometry.CurvePtr">
@brief 曲线的智能指针对象

</member>
        <member name="M:SysGeometry.Curve.GetPointByDistance(System.Double)">
@brief 通过距离获得点
@param[in] double distance
@returnPointPtr

</member>
        <member name="M:SysGeometry.Curve.IsClosed">
@brief 是否闭合
@return bool 是否闭合

</member>
        <member name="M:SysGeometry.Curve.GetEndPoint">
@brief 获得终止点
@return PointPtr 终止点

</member>
        <member name="M:SysGeometry.Curve.GetStartPoint">
@brief 获得起始点
@return PointPtr 起始点

</member>
        <member name="M:SysGeometry.Curve.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Curve.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Curve.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Curve">
@class Curve
	* @brief 曲线对象

</member>
        <member name="F:SysDisplay.Symbol.m_SymbolType">
@brief 符号类型

</member>
        <member name="M:SysDisplay.Symbol.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.Symbol.#ctor">
@brief 构造函数
@return

</member>
        <member name="M:SysDisplay.Symbol.QueryBoundary(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 查询符号外接多边形
@param [in] ptrDisplayTransformation
@param [in] ptrGeometry
@return 符号外接多边形对象

</member>
        <member name="M:SysDisplay.Symbol.Clone">
@brief 克隆
@return SymbolPtr 克隆对象

</member>
        <member name="M:SysDisplay.Symbol.GetType">
@brief 获得符号类型
@return SymbolType 符号类型

</member>
        <member name="T:SysDisplay.Symbol">
@class Symbol
	* @brief 符号

</member>
        <member name="T:SysDisplay.TextAlignment">
@class TextAlignment
	* @brief  文本对齐方式

</member>
        <member name="F:AlignCenter">
@brief 居中对齐

</member>
        <member name="F:AlignRight">
@brief 右对齐

</member>
        <member name="F:AlignLeft">
@brief 左对齐

</member>
        <member name="T:SysDisplay.TextBackgroundType">
@class TextBackgroundType
	* @brief  文本背景类型

</member>
        <member name="F:TBTBalloonCallout">
@brief 气球

</member>
        <member name="T:SysDisplay.TextDirection">
@class TextDirection
	* @brief  文本方向

</member>
        <member name="F:TDVertical">
@brief 纵向

</member>
        <member name="F:TDAngle">
@brief 按角度

</member>
        <member name="F:TDHorizontal">
@brief 横向

</member>
        <member name="T:SysDisplay.TextCase">
@class TextCase
	* @brief  文本大小写

</member>
        <member name="F:TCSmallCaps">
@brief 小型大写

</member>
        <member name="F:TCAllCaps">
@brief 全部大写

</member>
        <member name="F:TCLowercase">
@brief 全部小写

</member>
        <member name="F:TCNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.TextPositionStyle">
@class TextPosition
	* @brief  文本位置样式

</member>
        <member name="F:TPSubscript">
@brief 下标

</member>
        <member name="F:TPSuperscript">
@brief 上标

</member>
        <member name="F:TPNormal">
@brief 常规

</member>
        <member name="T:SysDisplay.BalloonCalloutStyle">
@class BalloonCalloutStyle
	* @brief  气球注释样式

</member>
        <member name="F:BCSOval">
@brief 椭圆

</member>
        <member name="F:BCSRoundedRectangle">
@brief 圆角矩形

</member>
        <member name="F:BCSRectangle">
@brief 矩形

</member>
        <member name="T:SysDisplay.GradientFillStyle">
@class GradientFillStyle
	* @brief  渐变色填充样式

</member>
        <member name="F:GFSNull">
@brief 无填充

</member>
        <member name="F:GFSBuffered">
@brief 缓冲渐变填充

</member>
        <member name="F:GFSCircular">
@brief 圆形渐变填充

</member>
        <member name="F:GFSRectangular">
@brief 矩形渐变填充

</member>
        <member name="F:GFSLinear">
@brief 线性渐变填充

</member>
        <member name="T:SysDisplay.SimpleFillStyle">
@class SimpleFillStyle
	* @brief  简单填充样式

</member>
        <member name="F:SFSDense7Pattern">
@brief 方式7

</member>
        <member name="F:SFSDense6Pattern">
@brief 方式6

</member>
        <member name="F:SFSDense5Pattern">
@brief 方式5

</member>
        <member name="F:SFSDense4Pattern">
@brief 方式4

</member>
        <member name="F:SFSDense3Pattern">
@brief 方式3

</member>
        <member name="F:SFSDense2Pattern">
@brief 方式2

</member>
        <member name="F:SFSDense1Pattern">
@brief 方式1

</member>
        <member name="F:SFSDiagonalCross">
@brief xxxxxxxxxxxxxxxxxxxx

</member>
        <member name="F:SFSCross">
@brief +++++++++++++++++++

</member>
        <member name="F:SFSBackwardDiagonal">
@brief ////////////////////

</member>
        <member name="F:SFSForwardDiagonal">
@brief \\\\\\\\\\\\\\\\\\\

</member>
        <member name="F:SFSVertical">
@brief ||||||||||||||||||

</member>
        <member name="F:SFSHorizontal">
@brief ------------------

</member>
        <member name="F:SFSNull">
@brief 无填充

</member>
        <member name="F:SFSSolid">
@brief 实体填充

</member>
        <member name="T:SysDisplay.LineCapStyle">
@class LineCapStyle
	* @brief 线帽样式

</member>
        <member name="F:LCSSquare">
@brief 矩形线帽样式包含最后的点

</member>
        <member name="F:LCSRound">
@brief 圆角线帽样式

</member>
        <member name="F:LCSButt">
@brief 矩形线帽样式不包含最后点

</member>
        <member name="T:SysDisplay.LineJoinStyle">
@class LineJoinStyle
	* @brief 线连接样式

</member>
        <member name="F:LJSBevel">
@brief 平角转折

</member>
        <member name="F:LJSRound">
@brief 圆角转折

</member>
        <member name="F:LJSMitre">
@brief 直接相交转折点

</member>
        <member name="T:SysDisplay.SimpleLineStyle">
@enum SimpleLineStyle
	* @brief 简单线样式

</member>
        <member name="F:SLSNull">
@brief 无

</member>
        <member name="F:SLSDashDotDot">
@brief _.._.._.

</member>
        <member name="F:SLSDashDot">
@brief _._._._.

</member>
        <member name="F:SLSDot">
@brief ............

</member>
        <member name="F:SLSDash">
@brief -----------

</member>
        <member name="F:SLSSolid">
@brief 实线

</member>
        <member name="T:SysDisplay.SimpleMarkerStyle">
@enum SimpleMarkerStyle
	* @brief 简单点样式

</member>
        <member name="F:SMSDiamond">
@brief 菱形

</member>
        <member name="F:SMSX">
@brief X叉

</member>
        <member name="F:SMSCross">
@brief 十字叉

</member>
        <member name="F:SMSSquare">
@brief 正方形

</member>
        <member name="F:SMSCircle">
@brief 圆形

</member>
        <member name="T:SysDisplay.SymbolType">
@enum SymbolType
	* @brief 样式符号类型

</member>
        <member name="F:SymbolFormattedTextSymbol">
@brief 格式化文本样式

</member>
        <member name="F:SymbolTextSymbol">
@brief 文本样式

</member>
        <member name="F:SymbolMultiLayerFillSymbol">
@brief 多层填充样式

</member>
        <member name="F:SymbolLineFillSymbol">
@brief 线符号填充样式

</member>
        <member name="F:SymbolMarkerFillSymbol">
@brief 点符号填充样式

</member>
        <member name="F:SymbolPictureFillSymbol">
@brief 图片填充样式

</member>
        <member name="F:SymbolGradientFillSymbol">
@brief 渐变填充样式

</member>
        <member name="F:SymbolSimpleFillSymbol">
@brief 简单填充样式

</member>
        <member name="F:SymbolMultiLayerLineSymbol">
@brief 多层线样式

</member>
        <member name="F:SymbolMarkerLineSymbol">
@brief 点符号线样式

</member>
        <member name="F:SymbolPictureLineSymbol">
@brief 图片线样式

</member>
        <member name="F:SymbolCartographicLineSymbol">
@brief 制图线样式

</member>
        <member name="F:SymbolSimpleLineSymbol">
@brief 简单线样式

</member>
        <member name="F:SymbolMultiLayerMarkerSymbol">
@brief 多层点样式

</member>
        <member name="F:SymbolPictureMarkerSymbol">
@brief 图片点样式

</member>
        <member name="F:SymbolCharacterMarkerSymbol">
@brief 字体点样式

</member>
        <member name="F:SymbolArrowMarkerSymbol">
@brief 箭头点样式

</member>
        <member name="F:SymbolSimpleMarkerSymbol">
@brief 简单点样式

</member>
        <member name="F:SymbolUnknownSymbol">
@brief 未知符号

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_units">
@brief 单位

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_Bounds">
@brief 全图地图范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_FittedBounds">
@brief 地图定制范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_VisibleBounds">
@brief 地图显示范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_pDevice">
@brief 绘图设备对象指针

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DeviceFrame">
@brief 设备框架范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_ptrSpatialReference">
@brief 地图的空间参考

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_dPageScale">
@brief 制图比例

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_MapScale">
@brief 当前地图比例尺

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DPI">
@brief 当前屏幕的DPI

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_Y">
@brief 每设备单位的地图距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_X">
@brief 每设备单位的地图距离X

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_Y">
@brief 每地图单位的设备距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_X">
@brief 每地图单位的设备距离X

</member>
        <member name="M:SysDisplay.DisplayTransformation.CalculateVisibleExtent">
@brief 根据屏幕范围重新计算可视范围
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.Clone">
@brief 克隆
@return DisplayTransformationPtr 克隆成果 显示转换对象指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPaintDevice(QPaintDevice*)">
@brief  设置绘图设备
@param [in] QPaintDevice* pDevice 绘图设备指针对象
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPaintDevice">
@brief  获取绘图设备
@return  QPaintDevice* 绘图设备指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetUnits(SysUI.pieUnits)">
@brief 设置单位值
@param[in] SysUI::pieUnits units 单位值
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetUnits">
@brief 获取单位值
@return SysUI::pieUnits  单位值

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数		
@param[in] double* deveiceX	设备点X集合
@param[in] double* deviceY	设备点Y集合
@param[out] double* mapX	地图点X集合
@param[out] double* mapY	地图点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从设备点转化为地图点
@param[in] QPoint point 设备点
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
@brief 从设备点转化为地图点
@param[in] int x 设备X
@param[in] int y 设备Y
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数
@param[in] double* mapX	地图点X集合
@param[in] double* mapY	地图点Y集合
@param[out] double* deveiceX	设备点X集合
@param[out] double* deviceY	设备点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图点转化为设备点
@param[in] SysGeometry::PointPtr ptrPoint 地图点
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double)">
@brief 从地图点转化为设备点
@param[in] double 地图点X
@param[in] double 地图点Y
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetZoomResolution">
@brief  获取缩放设备每像素的图上距离
@param[in] bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetZoomResolution(System.Boolean)">
@brief  设置缩放设备每像素的图上距离
@param[in] bool bValue 是否为真
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.ZoomToPageScale(System.Double)">
@brief  缩放制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPageScale(System.Double)">
@brief 设置制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPageScale">
@brief 获得制图比例尺
@return 制图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetMapScale(System.Double)">
@brief 设置地图比例尺
@param[in] double mapscale 地图比例尺
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetMapScale">
@brief 获得地图比例尺
@return 地图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDpi(System.Int32)">
@brief 设置屏幕的DPI
@param[in] int dpi X
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDpi">
@brief 获得屏幕的DPI
@return 屏幕DPI

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetResolution">
@brief 获得设备每像素的图上距离
@return 每像素的图上距离

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetExportFrame">
@brief 获得输出范围
@return QRect 输出框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDeviceFrame">
@brief 获得设备范围
@return QRect 设备框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDeviceFrame(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置设备框架
@param[in] QRect deviceFrame 设备框架
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetFittedBounds">
 @brief FittedBounds 设置VisibleBounds后，要根据DeviceFrame的宽高比进行修改，修正后的值，保存在FittedBounds。
		 用户输入的原始值，保存在VisibleBounds
 @return  SysGeometry::EnvelopePtr  Envelope包络范围对象

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetVisibleBounds">
@brief 获得可视范围
@return virtualSysGeometry::EnvelopePtr 可视范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.IsOutValidExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 判断范围是否是有效范围
@param[in] SysGeometry::EnvelopePtr ptrEnv 范围
@return bool 是否有效

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetVisibleBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可视范围
@param[in] SysGeometry::EnvelopePtr ptrVisibleBounds 可视范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetBounds">
@brief 获得全图范围
@return SysGeometry::EnvelopePtr 全图范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全图范围
@param[in] SysGeometry::EnvelopePtr ptrBounds 全图范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetSpatialReference">
@brief 获得空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param[in] SysGeometry::SpatialReferencePtr ptrSReference 空间参考
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysDisplay.ITransformEvents.VisibleBoundsUpdated">
@brief 可视地图范围事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation
@param[out] bool 范围是否变化

</member>
        <member name="F:SysDisplay.ITransformEvents.UnitsUpdated">
@brief 单位更新事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.RotationUpdated">
@brief 地图旋转变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.ResolutionUpdated">
@brief 分辨率变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.DeviceFrameUpdated">
@brief 设备范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.BoundsUpdated">
@brief 地图范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="T:SysDisplay.ITransformEvents">
@class ITransformEvents
@brief 变化事件类

</member>
        <member name="T:SysDisplay.DisplayTransformation">
@brief 类的前置声明


@brief 类的前置声明和智能指针定义
@return


@class DisplayTransformation
	* @brief 显示转换

</member>
        <member name="D:boost.typeindex.type_info">
Depending on a compiler flags, optimal implementation of type_info will be used 
as a default boost::typeindex::type_info.

Could be a std::type_info, boost::typeindex::detail::ctti_data or 
some user defined class.

type_info \b is \b not copyable or default constructible. It is \b not assignable too!
</member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <member name="T:SysUI.pieUnits">
@class pieUnits
	* @brief PIE中长度单位

</member>
        <member name="F:UnitsCount">
@brief 单位数量

</member>
        <member name="F:UnitsDecimeters">
@brief 分米

</member>
        <member name="F:UnitsDecimalDegrees">
@brief 度（十进制）

</member>
        <member name="F:UnitsKilometers">
@brief 千米

</member>
        <member name="F:UnitsMeters">
@brief 米

</member>
        <member name="F:UnitsCentimeters">
@brief 厘米

</member>
        <member name="F:UnitsMillimeters">
@brief 毫米

</member>
        <member name="F:UnitsNauticalMiles">
@brief 海里

</member>
        <member name="F:UnitsMiles">
@brief 英里

</member>
        <member name="F:UnitsYards">
@brief 码

</member>
        <member name="F:UnitsFeet">
@brief 英尺

</member>
        <member name="F:UnitsPoints">
@brief 点

</member>
        <member name="F:UnitsInches">
@brief 英寸

</member>
        <member name="F:UnitsUnknown">
@brief 未知

</member>
        <member name="M:PIE.Display.SymbolFactory.ConstructCLRColorRamp(System.Void*)">
            <summary>
创建ColorRamp
</summary>
            <param name="pColorRamp">ColorRamp对象C++</param>
            <returns>ColorRamp对象CLR</returns>
            <summary>
创建ColorRamp
</summary>
            <param name="pColorRamp">ColorRamp对象C++</param>
            <returns>ColorRamp对象CLR</returns>
        </member>
        <member name="M:PIE.Display.SymbolFactory.ConstructCLRDisplayTransformation(System.Void*)">
            <summary>
创建DispalyTransformation
</summary>
            <param name="pDisplayTransformation">Geometry对象C++</param>
            <returns>DispalyTransformation对象CLR</returns>
            <summary>
创建DispalyTransformation
</summary>
            <param name="pDisplayTransformation">Geometry对象C++</param>
            <returns>DispalyTransformation对象CLR</returns>
        </member>
        <member name="M:PIE.Display.SymbolFactory.ConstructCLRSymbol``1(System.Void*)">
            <summary>
创建Geometry-泛型形式
</summary>
            <param name="pSymbol">Geometry对象C++</param>
            <returns>ItemType对象CLR</returns>
            <summary>
创建Geometry-泛型形式
</summary>
            <param name="pSymbol">Geometry对象C++</param>
            <returns>ItemType对象CLR</returns>
        </member>
        <member name="M:PIE.Display.SymbolFactory.ConstructCLRSymbol(System.Void*)">
            <summary>
创建Geometry
</summary>
            <param name="pSymbol">Geometry对象C++</param>
            <returns>Geometry对象CLR</returns>
            <summary>
创建Geometry
</summary>
            <param name="pSymbol">Geometry对象C++</param>
            <returns>Geometry对象CLR</returns>
        </member>
        <member name="T:PIE.Display.SymbolFactory">
            <summary>
符号工厂类
</summary>
        </member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.AddLayer(SysUtility._ptr_t<SysDisplay.FillSymbol>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.StyleGallery.GetCategorys(QString!System.Runtime.CompilerServices.IsConst,QString!System.Runtime.CompilerServices.IsConst,QStringList*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.StyleGallery.GetItems(QString!System.Runtime.CompilerServices.IsConst,QString!System.Runtime.CompilerServices.IsConst,QString!System.Runtime.CompilerServices.IsConst,QVector<SysUtility._ptr_t<SysDisplay.StyleGalleryItem>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.SetShadowColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.BalloonCallout.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiPartColorRamp.AddRamp(SysUtility._ptr_t<SysDisplay.IColorRamp>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.AlgorithmicColorRamp.SetFromColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.AlgorithmicColorRamp.SetToColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CustomColorRamp.SetColor(System.Int32,QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiPartColorRamp.AddRamp(SysUtility._ptr_t<SysDisplay.IColorRamp>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.SetDashPattern(QVector<System.Double>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.GetDashPattern”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.SetDashPattern(QVector<System.Double>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.GetDashPattern”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.AddLayer(SysUtility._ptr_t<SysDisplay.FillSymbol>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextBackground.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FormattedTextSymbol.SetShadowColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.ArrowMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SystemSymbolSetting.SetDefaultMarkerSymbol(SysUtility._ptr_t<SysDisplay.MarkerSymbol>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SystemSymbolSetting.SetDefaultLineSymbol(SysUtility._ptr_t<SysDisplay.LineSymbol>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SystemSymbolSetting.SetDefaultFillSymbol(SysUtility._ptr_t<SysDisplay.FillSymbol>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SystemSymbolSetting.SetDefaultTextSymbol(SysUtility._ptr_t<SysDisplay.TextSymbol>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CustomColorRamp.SetColor(System.Int32,QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.SetColorRamp(QVector<QPair<System.Double,QColor>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.GradientFillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.SetDashPattern(QVector<System.Double>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.GetDashPattern”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CartographicLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SimpleLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.SymbolOperator.ConvertJSONToSymbol(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.DrawLayer(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MultiLayerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.SetDashPattern(QVector<System.Double>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.GetDashPattern”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerLineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.IColorRamp.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.AlgorithmicColorRamp.SetFromColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.AlgorithmicColorRamp.SetToColor(QColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.PictureMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.TextSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.MarkerSymbol.DrawPoint(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ImportFromJson(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ImportFromJson(QJsonObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.ExportToJson(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.CharacterMarkerSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.Symbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.GetPoint(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.PointCollection.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polyline.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.LineSymbol.DrawCurve(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Curve>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Ring.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.QueryCoords(System.Int32,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Polygon.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QPainterPath!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawSurface(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Surface>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.FillSymbol.DrawEnvelope(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Envelope>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
    </members>
</doc>